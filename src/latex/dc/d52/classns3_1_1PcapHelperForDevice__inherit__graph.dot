digraph "ns3::PcapHelperForDevice"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{ns3::PcapHelperForDevice\n||+ PcapHelperForDevice()\l+ ~PcapHelperForDevice()\l+ EnablePcapInternal()\l+ EnablePcap()\l+ EnablePcap()\l+ EnablePcap()\l+ EnablePcap()\l+ EnablePcap()\l+ EnablePcapAll()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{ns3::CsmaHelper\n|- m_queueFactory\l- m_deviceFactory\l- m_channelFactory\l|+ CsmaHelper()\l+ ~CsmaHelper()\l+ SetQueue()\l+ SetDeviceAttribute()\l+ SetChannelAttribute()\l+ Install()\l+ Install()\l+ Install()\l+ Install()\l+ Install()\l+ Install()\l+ Install()\l+ Install()\l+ Install()\l+ AssignStreams()\l- InstallPriv()\l- EnablePcapInternal()\l- EnableAsciiInternal()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/dbd/classns3_1_1CsmaHelper.html",tooltip="build a set of CsmaNetDevice objects "];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{ns3::FdNetDeviceHelper\n|- m_deviceFactory\l|+ FdNetDeviceHelper()\l+ ~FdNetDeviceHelper()\l+ SetAttribute()\l+ Install()\l+ Install()\l+ Install()\l# InstallPriv()\l- EnablePcapInternal()\l- EnableAsciiInternal()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/def/classns3_1_1FdNetDeviceHelper.html",tooltip="build a set of FdNetDevice objects Normally we eschew multiple inheritance, however, the classes PcapUserHelperForDevice and AsciiTraceUserHelperForDevice are treated as \"mixins\". A mixin is a self-contained class that encapsulates a general attribute or a set of functionality that may be of interest to many other classes. "];
  Node3 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{ns3::EmuFdNetDeviceHelper\n|# m_deviceName\l|+ EmuFdNetDeviceHelper()\l+ ~EmuFdNetDeviceHelper()\l+ GetDeviceName()\l+ SetDeviceName()\l# InstallPriv()\l# SetFileDescriptor()\l# CreateFileDescriptor()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/d71/classns3_1_1EmuFdNetDeviceHelper.html",tooltip="build a set of FdNetDevice objects attached to a physical network interface "];
  Node4 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 [label="{ns3::PlanetLabFdNetDevice\lHelper\n|# m_tapIp\l# m_tapMask\l|+ PlanetLabFdNetDeviceHelper()\l+ ~PlanetLabFdNetDeviceHelper()\l+ SetTapIpAddress()\l+ SetTapMask()\l# InstallPriv()\l# SetFileDescriptor()\l# CreateFileDescriptor()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/dd7/classns3_1_1PlanetLabFdNetDeviceHelper.html",tooltip="build a set of FdNetDevice objects attached to a virtual TAP network interface "];
  Node4 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node6 [label="{ns3::TapFdNetDeviceHelper\n|# m_modePi\l# m_tapIp4\l# m_tapIp6\l# m_tapMask4\l# m_tapPrefix6\l# m_tapMac\l|+ TapFdNetDeviceHelper()\l+ ~TapFdNetDeviceHelper()\l+ SetModePi()\l+ SetTapIpv4Address()\l+ SetTapIpv4Mask()\l+ SetTapIpv6Address()\l+ SetTapIpv6Prefix()\l+ SetTapMacAddress()\l# InstallPriv()\l# SetFileDescriptor()\l# CreateFileDescriptor()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d94/classns3_1_1TapFdNetDeviceHelper.html",tooltip="build a set of FdNetDevice objects attached to a virtual TAP network interface "];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node7 [label="{ns3::LrWpanHelper\n|- m_channel\l|+ LrWpanHelper()\l+ LrWpanHelper()\l+ ~LrWpanHelper()\l+ GetChannel()\l+ SetChannel()\l+ SetChannel()\l+ AddMobility()\l+ Install()\l+ AssociateToPan()\l+ EnableLogComponents()\l+ AssignStreams()\l+ LrWpanPhyEnumerationPrinter()\l+ LrWpanMacStatePrinter()\l- LrWpanHelper()\l- operator=()\l- EnablePcapInternal()\l- EnableAsciiInternal()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/de8/classns3_1_1LrWpanHelper.html",tooltip="helps to manage and create IEEE 802.15.4 NetDevice objects "];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node8 [label="{ns3::PointToPointHelper\n|- m_queueFactory\l- m_channelFactory\l- m_remoteChannelFactory\l- m_deviceFactory\l|+ PointToPointHelper()\l+ ~PointToPointHelper()\l+ SetQueue()\l+ SetDeviceAttribute()\l+ SetChannelAttribute()\l+ Install()\l+ Install()\l+ Install()\l+ Install()\l+ Install()\l- EnablePcapInternal()\l- EnableAsciiInternal()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/d0d/classns3_1_1PointToPointHelper.html",tooltip="Build a set of PointToPointNetDevice objects. "];
  Node1 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node9 [label="{ns3::WifiPhyHelper\n|# m_phy\l# m_errorRateModel\l- m_pcapDlt\l|+ WifiPhyHelper()\l+ ~WifiPhyHelper()\l+ Create()\l+ Set()\l+ SetErrorRateModel()\l+ SetPcapDataLinkType()\l+ GetPcapDataLinkType()\l# PcapSniffTxEvent()\l# PcapSniffRxEvent()\l- EnablePcapInternal()\l- EnableAsciiInternal()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/df8/classns3_1_1WifiPhyHelper.html",tooltip="create PHY objects "];
  Node9 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node10 [label="{ns3::SpectrumWifiPhyHelper\n|- m_channel\l|+ SpectrumWifiPhyHelper()\l+ SetChannel()\l+ SetChannel()\l+ Default()\l- Create()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/dab/classns3_1_1SpectrumWifiPhyHelper.html",tooltip="Make it easy to create and manage PHY objects for the spectrum model. "];
  Node9 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node11 [label="{ns3::YansWifiPhyHelper\n|- m_channel\l|+ YansWifiPhyHelper()\l+ SetChannel()\l+ SetChannel()\l+ Default()\l- Create()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/dbf/classns3_1_1YansWifiPhyHelper.html",tooltip="Make it easy to create and manage PHY objects for the yans model. "];
  Node11 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node12 [label="{ns3::YansWavePhyHelper\n||+ Default()\l- EnablePcapInternal()\l- EnableAsciiInternal()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/d63/classns3_1_1YansWavePhyHelper.html"];
  Node1 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node13 [label="{ns3::WimaxHelper\n|- m_channel\l|+ WimaxHelper()\l+ ~WimaxHelper()\l+ CreatePhy()\l+ CreateUplinkScheduler()\l+ CreateBSScheduler()\l+ Install()\l+ Install()\l+ Install()\l+ SetPropagationLossModel()\l+ CreatePhyWithoutChannel()\land 6 more...\l+ EnableAsciiForConnection()\l+ EnableLogComponents()\l- EnablePcapInternal()\l- EnableAsciiInternal()\l- AsciiRxEvent()\l- AsciiTxEvent()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/d08/classns3_1_1WimaxHelper.html",tooltip="helps to manage and create WimaxNetDevice objects "];
}
