digraph "ns3::dot11s::HwmpProtocol"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{ns3::dot11s::HwmpProtocol\n|- m_preqTimeouts\l- m_rqueue\l- m_lastDataSeqno\l- m_hwmpSeqnoMetricDatabase\l- m_maxQueueSize\l- m_dot11MeshHWMPmaxPREQretries\l- m_isRoot\l- m_maxTtl\l- m_unicastPerrThreshold\l- m_unicastPreqThreshold\l- m_unicastDataThreshold\l- m_doFlag\l- m_rfFlag\l|+ HwmpProtocol()\l+ ~HwmpProtocol()\l+ DoDispose()\l+ RequestRoute()\l+ RemoveRoutingStuff()\l+ Install()\l+ PeerLinkStatus()\l+ SetNeighboursCallback()\l+ Report()\l+ ResetStats()\l+ AssignStreams()\l+ GetRoutingTable()\l+ SetRoot()\l+ UnsetRoot()\l+ GetTypeId()\l- DoInitialize()\l- operator=()\l- HwmpProtocol()\l- ForwardUnicast()\l- GetAddress()\l- ReceivePreq()\l- ReceivePrep()\l- ReceivePerr()\l- SendPrep()\l- MakePathError()\l- ForwardPathError()\l- InitiatePathError()\l- GetPerrReceivers()\l- GetPreqReceivers()\l- GetBroadcastReceivers()\l- DropDataFrame()\l- QueuePacket()\l- DequeueFirstPacketByDst()\l- DequeueFirstPacket()\l- ReactivePathResolved()\l- ProactivePathResolved()\l- ShouldSendPreq()\l- RetryPathDiscovery()\l- SendProactivePreq()\l* m_interfaces\l* m_dataSeqno\l* m_hwmpSeqno\l* m_preqId\l* GetDoFlag()\l* GetRfFlag()\l* GetPreqMinInterval()\l* GetPerrMinInterval()\l* GetMaxTtl()\l* GetNextPreqId()\l* GetNextHwmpSeqno()\l* GetActivePathLifetime()\l* GetUnicastPerrThreshold()\l* m_lastDataSeqno\l* m_hwmpSeqnoMetricDatabase\l* m_maxQueueSize\l* m_dot11MeshHWMPmaxPREQretries\l* m_isRoot\l* m_maxTtl\l* m_unicastPerrThreshold\l* m_unicastPreqThreshold\l* m_unicastDataThreshold\l* m_doFlag\l* m_rfFlag\l* SetRoot()\l* UnsetRoot()\l* ReceivePreq()\l* ReceivePrep()\l* ReceivePerr()\l* SendPrep()\l* MakePathError()\l* ForwardPathError()\l* InitiatePathError()\l* GetPerrReceivers()\l* GetPreqReceivers()\l* GetBroadcastReceivers()\l* DropDataFrame()\l* QueuePacket()\l* DequeueFirstPacketByDst()\l* DequeueFirstPacket()\l* ReactivePathResolved()\l* ProactivePathResolved()\l* ShouldSendPreq()\l* RetryPathDiscovery()\l* SendProactivePreq()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{ns3::MeshL2RoutingProtocol\n||+ ~MeshL2RoutingProtocol()\l+ RequestRoute()\l+ RemoveRoutingStuff()\l+ SetMeshPoint()\l+ GetMeshPoint()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/d91/classns3_1_1MeshL2RoutingProtocol.html",tooltip="Interface for L2 mesh routing protocol and mesh point communication. "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{ns3::Object\n|- m_disposed\l- m_initialized\l- m_getObjectCount\l|+ Object()\l+ ~Object()\l+ GetInstanceTypeId()\l+ GetObject()\l+ GetObject()\l+ Dispose()\l+ AggregateObject()\l+ GetAggregateIterator()\l+ Initialize()\l+ IsInitialized()\l+ GetTypeId()\l# NotifyNewAggregate()\l# DoInitialize()\l# DoDispose()\l# Object()\l- DoGetObject()\l- Check()\l- CheckLoose()\l- SetTypeId()\l- Construct()\l- UpdateSortedArray()\l- DoDelete()\l* CopyObject\l* CopyObject\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d77/classns3_1_1Object.html",tooltip="A base class which provides memory management and object aggregation. "];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{ns3::SimpleRefCount\l\< Object, ObjectBase,\l ObjectDeleter \>\n|- m_count\l|+ SimpleRefCount()\l+ SimpleRefCount()\l+ operator=()\l+ Ref()\l+ Unref()\l+ GetReferenceCount()\l+ Cleanup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da1/classns3_1_1SimpleRefCount.html"];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 [label="{ns3::ObjectBase\n||+ ~ObjectBase()\l+ GetInstanceTypeId()\l+ SetAttribute()\l+ SetAttributeFailSafe()\l+ GetAttribute()\l+ GetAttributeFailSafe()\l+ TraceConnect()\l+ TraceConnectWithoutContext()\l+ TraceDisconnect()\l+ TraceDisconnectWithoutContext()\l+ GetTypeId()\l# NotifyConstructionCompleted()\l# ConstructSelf()\l- DoSet()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/dac/classns3_1_1ObjectBase.html",tooltip="Anchor the ns-3 type and attribute system. "];
  Node6 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -m_tid" ,arrowhead="odiamond"];
  Node6 [label="{ns3::TypeId\n|- m_tid\l|+ TypeId()\l+ GetParent()\l+ HasParent()\l+ IsChildOf()\l+ GetGroupName()\l+ GetName()\l+ GetHash()\l+ GetSize()\l+ HasConstructor()\l+ GetAttributeN()\land 26 more...\l+ LookupByName()\l+ LookupByNameFailSafe()\l+ LookupByHash()\l+ LookupByHashFailSafe()\l+ GetRegisteredN()\l+ GetRegistered()\l- TypeId()\l- DoAddConstructor()\l* operator==\l* operator!=\l* operator\<\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d11/classns3_1_1TypeId.html",tooltip="a unique identifier for an interface. "];
  Node7 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -m_aggregates" ,arrowhead="odiamond"];
  Node7 [label="{ns3::Object::Aggregates\n|+ n\l|}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/de9/structns3_1_1Object_1_1Aggregates.html"];
  Node3 -> Node7 [color="grey25",fontsize="10",style="solid",label=" +buffer" ,arrowhead="odiamond"];
  Node8 -> Node2 [color="grey25",fontsize="10",style="solid",label=" #m_mp" ,arrowhead="odiamond"];
  Node8 [label="{ns3::Ptr\< ns3::MeshPoint\lDevice \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node9 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node9 [label="{ns3::MeshPointDevice\n|- m_ifaces\l- m_ifIndex\l- m_mtu\l|+ MeshPointDevice()\l+ ~MeshPointDevice()\l+ SetIfIndex()\l+ GetIfIndex()\l+ GetChannel()\l+ GetAddress()\l+ SetAddress()\l+ SetMtu()\l+ GetMtu()\l+ IsLinkUp()\land 17 more...\l+ AddInterface()\l+ GetNInterfaces()\l+ GetInterface()\l+ GetInterfaces()\l+ SetRoutingProtocol()\l+ GetRoutingProtocol()\l+ Report()\l+ ResetStats()\l+ GetTypeId()\l- ReceiveFromDevice()\l- Forward()\l- DoSend()\l* AddInterface()\l* GetNInterfaces()\l* GetInterface()\l* GetInterfaces()\l* SetRoutingProtocol()\l* GetRoutingProtocol()\l* Report()\l* ResetStats()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/da9/classns3_1_1MeshPointDevice.html",tooltip="Virtual net device modeling mesh point. "];
  Node10 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node10 [label="{ns3::NetDevice\n|+ isEnbTypeForDc\l|+ ~NetDevice()\l+ SetIfIndex()\l+ GetIfIndex()\l+ GetChannel()\l+ SetAddress()\l+ GetAddress()\l+ SetMtu()\l+ GetMtu()\l+ IsLinkUp()\l+ AddLinkChangeCallback()\land 15 more...\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/dac/classns3_1_1NetDevice.html",tooltip="Network layer to device interface. "];
  Node3 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node11 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -m_address" ,arrowhead="odiamond"];
  Node11 [label="{ns3::Mac48Address\n|- m_address\l|+ Mac48Address()\l+ Mac48Address()\l+ CopyFrom()\l+ CopyTo()\l+ operator Address()\l+ IsBroadcast()\l+ IsGroup()\l+ ConvertFrom()\l+ IsMatchingType()\l+ Allocate()\l+ GetBroadcast()\l+ GetMulticast()\l+ GetMulticast()\l+ GetMulticastPrefix()\l+ GetMulticast6Prefix()\l- ConvertTo()\l- GetType()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/dee/classns3_1_1Mac48Address.html",tooltip="an EUI-48 address "];
  Node12 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -m_routingProtocol" ,arrowhead="odiamond"];
  Node12 [label="{ns3::Ptr\< ns3::MeshL2Routing\lProtocol \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node2 -> Node12 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node13 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -m_promiscRxCallback" ,arrowhead="odiamond"];
  Node13 [label="{ns3::Callback\< bool,\l Ptr\< NetDevice \>, Ptr\l\< const Packet \>, uint16\l_t, const Address &, const\l Address &, enum PacketType \>\n||+ Callback()\l+ Callback()\l+ Callback()\l+ Callback()\l+ Bind()\l+ TwoBind()\l+ ThreeBind()\l+ IsNull()\l+ Nullify()\l+ IsEqual()\l+ CheckType()\l+ Assign()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l- DoPeekImpl()\l- DoCheckType()\l- DoAssign()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d48/classns3_1_1Callback.html"];
  Node14 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node14 [label="{ns3::CallbackBase\n||+ CallbackBase()\l+ GetImpl()\l# CallbackBase()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/db5/classns3_1_1CallbackBase.html"];
  Node15 -> Node14 [color="grey25",fontsize="10",style="solid",label=" #m_impl" ,arrowhead="odiamond"];
  Node15 [label="{ns3::Ptr\< ns3::CallbackImpl\lBase \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node16 -> Node15 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node16 [label="{ns3::CallbackImplBase\n||+ ~CallbackImplBase()\l+ IsEqual()\l+ GetTypeid()\l# Demangle()\l# GetCppTypeid()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/dfa/classns3_1_1CallbackImplBase.html"];
  Node17 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node17 [label="{ns3::SimpleRefCount\l\< CallbackImplBase \>\n|- m_count\l|+ SimpleRefCount()\l+ SimpleRefCount()\l+ operator=()\l+ Ref()\l+ Unref()\l+ GetReferenceCount()\l+ Cleanup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da1/classns3_1_1SimpleRefCount.html"];
  Node18 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node18 [label="{ns3::empty\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d6a/classns3_1_1empty.html",tooltip="make Callback use a separate empty type "];
  Node19 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -m_node" ,arrowhead="odiamond"];
  Node19 [label="{ns3::Ptr\< ns3::Node \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node20 -> Node19 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node20 [label="{ns3::Node\n|- m_id\l- m_sid\l- m_devices\l- m_applications\l- m_handlers\l- m_deviceAdditionListeners\l|+ Node()\l+ Node()\l+ ~Node()\l+ GetId()\l+ GetLocalTime()\l+ GetSystemId()\l+ AddDevice()\l+ GetDevice()\l+ GetNDevices()\l+ AddApplication()\land 6 more...\l+ GetTypeId()\l+ ChecksumEnabled()\l# DoDispose()\l# DoInitialize()\l- NotifyDeviceAdded()\l- NonPromiscReceiveFromDevice()\l- PromiscReceiveFromDevice()\l- ReceiveFromDevice()\l- Construct()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/ded/classns3_1_1Node.html",tooltip="A network Node. "];
  Node3 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node21 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -m_rxCallback" ,arrowhead="odiamond"];
  Node21 [label="{ns3::Callback\< bool,\l Ptr\< NetDevice \>, Ptr\l\< const Packet \>, uint16\l_t, const Address & \>\n||+ Callback()\l+ Callback()\l+ Callback()\l+ Callback()\l+ Bind()\l+ TwoBind()\l+ ThreeBind()\l+ IsNull()\l+ Nullify()\l+ IsEqual()\l+ CheckType()\l+ Assign()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l- DoPeekImpl()\l- DoCheckType()\l- DoAssign()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d48/classns3_1_1Callback.html"];
  Node14 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node22 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -m_channel" ,arrowhead="odiamond"];
  Node22 [label="{ns3::Ptr\< ns3::BridgeChannel \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node23 -> Node22 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node23 [label="{ns3::BridgeChannel\n|- m_bridgedChannels\l|+ BridgeChannel()\l+ ~BridgeChannel()\l+ AddChannel()\l+ GetNDevices()\l+ GetDevice()\l+ GetTypeId()\l- BridgeChannel()\l- operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d0/d12/classns3_1_1BridgeChannel.html",tooltip="Virtual channel implementation for bridges (BridgeNetDevice). "];
  Node24 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node24 [label="{ns3::Channel\n|- m_id\l|+ Channel()\l+ ~Channel()\l+ GetId()\l+ GetNDevices()\l+ GetDevice()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/d67/classns3_1_1Channel.html",tooltip="Abstract Channel Base Class. "];
  Node3 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node25 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -m_fwdStats\n-m_rxStats\n-m_txStats" ,arrowhead="odiamond"];
  Node25 [label="{ns3::MeshPointDevice\l::Statistics\n|+ unicastData\l+ unicastDataBytes\l+ broadcastData\l+ broadcastDataBytes\l|+ Statistics()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/de9/structns3_1_1MeshPointDevice_1_1Statistics.html",tooltip="statistics counters "];
  Node11 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_address" ,arrowhead="odiamond"];
  Node26 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_proactivePreqTimer" ,arrowhead="odiamond"];
  Node26 [label="{ns3::EventId\n|- m_ts\l- m_context\l- m_uid\l|+ EventId()\l+ EventId()\l+ Cancel()\l+ IsExpired()\l+ IsRunning()\l+ PeekEventImpl()\l+ GetTs()\l+ GetContext()\l+ GetUid()\l* PeekEventImpl()\l* GetTs()\l* GetContext()\l* GetUid()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/df8/classns3_1_1EventId.html",tooltip="An identifier for simulation events. "];
  Node27 -> Node26 [color="grey25",fontsize="10",style="solid",label=" -m_eventImpl" ,arrowhead="odiamond"];
  Node27 [label="{ns3::Ptr\< ns3::EventImpl \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node28 -> Node27 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node28 [label="{ns3::EventImpl\n|- m_cancel\l|+ EventImpl()\l+ ~EventImpl()\l+ Invoke()\l+ Cancel()\l+ IsCancelled()\l# Notify()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/def/classns3_1_1EventImpl.html",tooltip="A simulation event. "];
  Node29 -> Node28 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node29 [label="{ns3::SimpleRefCount\l\< EventImpl \>\n|- m_count\l|+ SimpleRefCount()\l+ SimpleRefCount()\l+ operator=()\l+ Ref()\l+ Unref()\l+ GetReferenceCount()\l+ Cleanup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da1/classns3_1_1SimpleRefCount.html"];
  Node18 -> Node29 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node30 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_stats" ,arrowhead="odiamond"];
  Node30 [label="{ns3::dot11s::HwmpProtocol\l::Statistics\n|+ txUnicast\l+ txBroadcast\l+ txBytes\l+ droppedTtl\l+ totalQueued\l+ totalDropped\l+ initiatedPreq\l+ initiatedPrep\l+ initiatedPerr\l|+ Print()\l+ Statistics()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d0d/structns3_1_1dot11s_1_1HwmpProtocol_1_1Statistics.html",tooltip="Statistics structure. "];
  Node31 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_neighboursCallback" ,arrowhead="odiamond"];
  Node31 [label="{ns3::Callback\< std\l::vector\< ns3::Mac48Address\l \>, uint32_t \>\n||+ Callback()\l+ Callback()\l+ Callback()\l+ Callback()\l+ Bind()\l+ TwoBind()\l+ ThreeBind()\l+ IsNull()\l+ Nullify()\l+ IsEqual()\l+ CheckType()\l+ Assign()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l- DoPeekImpl()\l- DoCheckType()\l- DoAssign()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d48/classns3_1_1Callback.html"];
  Node14 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node32 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_dot11MeshHWMPactivePath\lTimeout\n-m_dot11MeshHWMPpathToRoot\lInterval\n-m_dot11MeshHWMPpreqMinInterval\n-m_dot11MeshHWMPnetDiameterTraversal\lTime\n-m_dot11MeshHWMPperrMinInterval\n-m_dot11MeshHWMPrannInterval\n-m_dot11MeshHWMPactiveRootTimeout\n-m_randomStart" ,arrowhead="odiamond"];
  Node32 [label="{ns3::Time\n|- m_data\l- g_markingTimes\l|+ operator=()\l+ Time()\l+ Time()\l+ Time()\l+ ~Time()\l+ IsZero()\l+ IsNegative()\l+ IsPositive()\l+ IsStrictlyNegative()\l+ IsStrictlyPositive()\l+ Compare()\l+ operator int64x64_t()\l+ As()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ GetYears()\l+ GetDays()\l+ GetHours()\l+ GetMinutes()\l+ GetSeconds()\l+ GetMilliSeconds()\l+ GetMicroSeconds()\l+ GetNanoSeconds()\l+ GetPicoSeconds()\l+ GetFemtoSeconds()\l+ GetTimeStep()\l+ GetDouble()\l+ GetInteger()\l+ ToInteger()\l+ ToDouble()\l+ To()\l+ Min()\l+ Max()\l+ SetResolution()\l+ GetResolution()\l+ From()\l+ StaticInit()\l+ FromInteger()\l+ FromDouble()\l+ From()\l- PeekResolution()\l- PeekInformation()\l- SetDefaultNsResolution()\l- SetResolution()\l- ClearMarkedTimes()\l- Mark()\l- Clear()\l- ConvertTimes()\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* GetYears()\l* GetDays()\l* GetHours()\l* GetMinutes()\l* GetSeconds()\l* GetMilliSeconds()\l* GetMicroSeconds()\l* GetNanoSeconds()\l* GetPicoSeconds()\l* GetFemtoSeconds()\l* GetTimeStep()\l* GetDouble()\l* GetInteger()\l* FromInteger()\l* FromDouble()\l* From()\l* ToInteger()\l* ToDouble()\l* To()\l* operator==\l* operator!=\l* operator\<=\l* operator\>=\l* operator\<\l* operator\>\l* operator+\l* operator-\l* operator*\l* operator*\l* operator/\l* operator/\l* operator+=\l* operator-=\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d04/classns3_1_1Time.html",tooltip="Simulation virtual time values and global simulation resolution. "];
  Node33 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_routeDiscoveryTimeCallback" ,arrowhead="odiamond"];
  Node33 [label="{ns3::TracedCallback\l\< ns3::Time \>\n|- m_callbackList\l|+ TracedCallback()\l+ ConnectWithoutContext()\l+ Connect()\l+ DisconnectWithoutContext()\l+ Disconnect()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l* Uint32Callback\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/dec/classns3_1_1TracedCallback.html"];
  Node34 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_routeChangeTraceSource" ,arrowhead="odiamond"];
  Node34 [label="{ns3::TracedCallback\l\< struct ns3::dot11s\l::RouteChange \>\n|- m_callbackList\l|+ TracedCallback()\l+ ConnectWithoutContext()\l+ Connect()\l+ DisconnectWithoutContext()\l+ Disconnect()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l* Uint32Callback\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/dec/classns3_1_1TracedCallback.html"];
  Node35 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_rtable" ,arrowhead="odiamond"];
  Node35 [label="{ns3::Ptr\< ns3::dot11s\l::HwmpRtable \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node36 -> Node35 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node36 [label="{ns3::dot11s::HwmpRtable\n|+ INTERFACE_ANY\l+ MAX_METRIC\l- m_routes\l|+ HwmpRtable()\l+ ~HwmpRtable()\l+ DoDispose()\l+ GetUnreachableDestinations()\l+ AddReactivePath()\l+ AddProactivePath()\l+ AddPrecursor()\l+ GetPrecursors()\l+ DeleteProactivePath()\l+ DeleteProactivePath()\l+ DeleteReactivePath()\l+ LookupReactive()\l+ LookupReactiveExpired()\l+ LookupProactive()\l+ LookupProactiveExpired()\l+ GetTypeId()\l* AddReactivePath()\l* AddProactivePath()\l* AddPrecursor()\l* GetPrecursors()\l* DeleteProactivePath()\l* DeleteProactivePath()\l* DeleteReactivePath()\l* LookupReactive()\l* LookupReactiveExpired()\l* LookupProactive()\l* LookupProactiveExpired()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/df8/classns3_1_1dot11s_1_1HwmpRtable.html",tooltip="Routing table for HWMP – 802.11s routing protocol. "];
  Node3 -> Node36 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node37 -> Node36 [color="grey25",fontsize="10",style="solid",label=" -m_root" ,arrowhead="odiamond"];
  Node37 [label="{ns3::dot11s::HwmpRtable\l::ProactiveRoute\n|+ interface\l+ metric\l+ seqnum\l+ precursors\l|}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/de3/structns3_1_1dot11s_1_1HwmpRtable_1_1ProactiveRoute.html",tooltip="Route found in proactive mode. "];
  Node11 -> Node37 [color="grey25",fontsize="10",style="solid",label=" +retransmitter\n+root" ,arrowhead="odiamond"];
  Node32 -> Node37 [color="grey25",fontsize="10",style="solid",label=" +whenExpire" ,arrowhead="odiamond"];
  Node38 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_coefficient" ,arrowhead="odiamond"];
  Node38 [label="{ns3::Ptr\< ns3::UniformRandom\lVariable \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node39 -> Node38 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node39 [label="{ns3::UniformRandomVariable\n||+ UniformRandomVariable()\l+ GetMin()\l+ GetMax()\l+ GetValue()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d0/d5b/classns3_1_1UniformRandomVariable.html",tooltip="The uniform distribution Random Number Generator (RNG). "];
  Node40 -> Node39 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node40 [label="{ns3::RandomVariableStream\n|- m_isAntithetic\l- m_stream\l|+ RandomVariableStream()\l+ ~RandomVariableStream()\l+ SetStream()\l+ GetStream()\l+ SetAntithetic()\l+ IsAntithetic()\l+ GetValue()\l+ GetInteger()\l+ GetTypeId()\l# Peek()\l- RandomVariableStream()\l- operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/daa/classns3_1_1RandomVariableStream.html",tooltip="The basic uniform Random Number Generator (RNG). "];
  Node3 -> Node40 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node41 -> Node40 [color="grey25",fontsize="10",style="solid",label=" -m_rng" ,arrowhead="odiamond"];
  Node41 [label="{ns3::RngStream\n|- m_currentState\l|+ RngStream()\l+ RngStream()\l+ RandU01()\l- AdvanceNthBy()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/d35/classns3_1_1RngStream.html",tooltip="Combined Multiple-Recursive Generator MRG32k3a. "];
}
