digraph "WaypointLazyNotifyTrue"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{WaypointLazyNotifyTrue\n||+ WaypointLazyNotifyTrue()\l+ ~WaypointLazyNotifyTrue()\l- TestXPosition()\l- CourseChangeCallback()\l- DoRun()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{ns3::TestCase\n|- m_children\l- m_dataDir\l- m_name\l- m_duration\l|+ ~TestCase()\l+ GetName()\l# TestCase()\l# AddTestCase()\l# SetDataDir()\l# IsStatusFailure()\l# IsStatusSuccess()\l# GetParent()\l# ReportTestFailure()\l# MustAssertOnFailure()\l# MustContinueOnFailure()\l# CreateDataDirFilename()\l# CreateTempDirFilename()\l- DoSetup()\l- DoRun()\l- DoTeardown()\l- Run()\l- IsFailed()\l* ReportTestFailure()\l* MustAssertOnFailure()\l* MustContinueOnFailure()\l* CreateDataDirFilename()\l* CreateTempDirFilename()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/d88/classns3_1_1TestCase.html",tooltip="encapsulates test code "];
  Node3 -> Node2 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{ns3::NonCopyable\n||# NonCopyable()\l# ~NonCopyable()\l- NonCopyable()\l- operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/dd1/classns3_1_1NonCopyable.html"];
  Node4 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -m_runner" ,arrowhead="odiamond"];
  Node4 [label="{ns3::TestRunnerImpl\n|- m_suites\l- m_tempDir\l- m_verbose\l- m_assertOnFailure\l- m_continueOnFailure\l- m_updateData\l|+ TestRunnerImpl()\l+ AddTestSuite()\l+ MustAssertOnFailure()\l+ MustContinueOnFailure()\l+ MustUpdateData()\l+ GetTopLevelSourceDir()\l+ GetTempDir()\l+ Run()\l- IsTopLevelSourceDir()\l- ReplaceXmlSpecialCharacters()\l- PrintReport()\l- PrintTestNameList()\l- PrintTestTypeList()\l- PrintHelp()\l- FilterTests()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/d71/classns3_1_1TestRunnerImpl.html"];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 [label="{ns3::Singleton\< TestRunner\lImpl \>\n||+ Get()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/d77/classns3_1_1Singleton.html"];
  Node3 -> Node5 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -m_parent" ,arrowhead="odiamond"];
  Node6 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -m_result" ,arrowhead="odiamond"];
  Node6 [label="{ns3::TestCase::Result\n|+ failure\l+ childrenFailed\l|+ Result()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/d25/structns3_1_1TestCase_1_1Result.html"];
  Node7 -> Node6 [color="grey25",fontsize="10",style="solid",label=" +clock" ,arrowhead="odiamond"];
  Node7 [label="{ns3::SystemWallClockMs\n||+ SystemWallClockMs()\l+ ~SystemWallClockMs()\l+ Start()\l+ End()\l+ GetElapsedReal()\l+ GetElapsedUser()\l+ GetElapsedSystem()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/dd4/classns3_1_1SystemWallClockMs.html",tooltip="Measure elapsed wall clock time in milliseconds. "];
  Node8 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -m_priv" ,arrowhead="odiamond"];
  Node8 [label="{ns3::SystemWallClockMsPrivate\n|- m_startTimes\l- m_startTime\l- m_elapsedReal\l- m_elapsedUser\l- m_elapsedSystem\l|+ Start()\l+ End()\l+ GetElapsedReal()\l+ GetElapsedUser()\l+ GetElapsedSystem()\l+ Start()\l+ End()\l+ GetElapsedReal()\l+ GetElapsedUser()\l+ GetElapsedSystem()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/da6/classns3_1_1SystemWallClockMsPrivate.html",tooltip="System-dependent implementation for SystemWallClockMs. "];
  Node9 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_node" ,arrowhead="odiamond"];
  Node9 [label="{ns3::Ptr\< Node \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node10 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node10 [label="{ns3::Node\n|- m_id\l- m_sid\l- m_devices\l- m_applications\l- m_handlers\l- m_deviceAdditionListeners\l|+ Node()\l+ Node()\l+ ~Node()\l+ GetId()\l+ GetLocalTime()\l+ GetSystemId()\l+ AddDevice()\l+ GetDevice()\l+ GetNDevices()\l+ AddApplication()\land 6 more...\l+ GetTypeId()\l+ ChecksumEnabled()\l# DoDispose()\l# DoInitialize()\l- NotifyDeviceAdded()\l- NonPromiscReceiveFromDevice()\l- PromiscReceiveFromDevice()\l- ReceiveFromDevice()\l- Construct()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/ded/classns3_1_1Node.html",tooltip="A network Node. "];
  Node11 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node11 [label="{ns3::Object\n|- m_disposed\l- m_initialized\l- m_getObjectCount\l|+ Object()\l+ ~Object()\l+ GetInstanceTypeId()\l+ GetObject()\l+ GetObject()\l+ Dispose()\l+ AggregateObject()\l+ GetAggregateIterator()\l+ Initialize()\l+ IsInitialized()\l+ GetTypeId()\l# NotifyNewAggregate()\l# DoInitialize()\l# DoDispose()\l# Object()\l- DoGetObject()\l- Check()\l- CheckLoose()\l- SetTypeId()\l- Construct()\l- UpdateSortedArray()\l- DoDelete()\l* CopyObject\l* CopyObject\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d77/classns3_1_1Object.html",tooltip="A base class which provides memory management and object aggregation. "];
  Node12 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node12 [label="{ns3::SimpleRefCount\l\< Object, ObjectBase,\l ObjectDeleter \>\n|- m_count\l|+ SimpleRefCount()\l+ SimpleRefCount()\l+ operator=()\l+ Ref()\l+ Unref()\l+ GetReferenceCount()\l+ Cleanup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da1/classns3_1_1SimpleRefCount.html"];
  Node13 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node13 [label="{ns3::ObjectBase\n||+ ~ObjectBase()\l+ GetInstanceTypeId()\l+ SetAttribute()\l+ SetAttributeFailSafe()\l+ GetAttribute()\l+ GetAttributeFailSafe()\l+ TraceConnect()\l+ TraceConnectWithoutContext()\l+ TraceDisconnect()\l+ TraceDisconnectWithoutContext()\l+ GetTypeId()\l# NotifyConstructionCompleted()\l# ConstructSelf()\l- DoSet()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/dac/classns3_1_1ObjectBase.html",tooltip="Anchor the ns-3 type and attribute system. "];
  Node14 -> Node11 [color="grey25",fontsize="10",style="solid",label=" -m_tid" ,arrowhead="odiamond"];
  Node14 [label="{ns3::TypeId\n|- m_tid\l|+ TypeId()\l+ GetParent()\l+ HasParent()\l+ IsChildOf()\l+ GetGroupName()\l+ GetName()\l+ GetHash()\l+ GetSize()\l+ HasConstructor()\l+ GetAttributeN()\land 26 more...\l+ LookupByName()\l+ LookupByNameFailSafe()\l+ LookupByHash()\l+ LookupByHashFailSafe()\l+ GetRegisteredN()\l+ GetRegistered()\l- TypeId()\l- DoAddConstructor()\l* operator==\l* operator!=\l* operator\<\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d11/classns3_1_1TypeId.html",tooltip="a unique identifier for an interface. "];
  Node15 -> Node11 [color="grey25",fontsize="10",style="solid",label=" -m_aggregates" ,arrowhead="odiamond"];
  Node15 [label="{ns3::Object::Aggregates\n|+ n\l|}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/de9/structns3_1_1Object_1_1Aggregates.html"];
  Node11 -> Node15 [color="grey25",fontsize="10",style="solid",label=" +buffer" ,arrowhead="odiamond"];
  Node16 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_mob" ,arrowhead="odiamond"];
  Node16 [label="{ns3::Ptr\< WaypointMobility\lModel \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node17 -> Node16 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node17 [label="{ns3::WaypointMobilityModel\n|- m_first\l- m_lazyNotify\l- m_initialPositionIsWaypoint\l- m_waypoints\l- m_velocity\l|+ WaypointMobilityModel()\l+ ~WaypointMobilityModel()\l+ AddWaypoint()\l+ GetNextWaypoint()\l+ WaypointsLeft()\l+ EndMobility()\l+ GetTypeId()\l- Update()\l- DoDispose()\l- DoGetPosition()\l- DoSetPosition()\l- DoGetVelocity()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d0/d89/classns3_1_1WaypointMobilityModel.html",tooltip="Waypoint-based mobility model. "];
  Node18 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node18 [label="{ns3::MobilityModel\n||+ MobilityModel()\l+ ~MobilityModel()\l+ GetPosition()\l+ SetPosition()\l+ GetVelocity()\l+ GetDistanceFrom()\l+ GetRelativeSpeed()\l+ AssignStreams()\l+ GetTypeId()\l# NotifyCourseChange()\l- DoGetPosition()\l- DoSetPosition()\l- DoGetVelocity()\l- DoAssignStreams()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/dc5/classns3_1_1MobilityModel.html",tooltip="Keep track of the current position and velocity of an object. "];
  Node11 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node19 -> Node18 [color="grey25",fontsize="10",style="solid",label=" -m_courseChangeTrace" ,arrowhead="odiamond"];
  Node19 [label="{ns3::TracedCallback\l\< ns3::Ptr\< const ns3\l::MobilityModel \> \>\n|- m_callbackList\l|+ TracedCallback()\l+ ConnectWithoutContext()\l+ Connect()\l+ DisconnectWithoutContext()\l+ Disconnect()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l* Uint32Callback\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/dec/classns3_1_1TracedCallback.html"];
  Node20 -> Node17 [color="grey25",fontsize="10",style="solid",label=" -m_next\n-m_current" ,arrowhead="odiamond"];
  Node20 [label="{ns3::Waypoint\n|+ position\l|+ Waypoint()\l+ Waypoint()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/dad/classns3_1_1Waypoint.html",tooltip="a (time, location) pair. "];
  Node21 -> Node20 [color="grey25",fontsize="10",style="solid",label=" +time" ,arrowhead="odiamond"];
  Node21 [label="{ns3::Time\n|- m_data\l- g_markingTimes\l|+ operator=()\l+ Time()\l+ Time()\l+ Time()\l+ ~Time()\l+ IsZero()\l+ IsNegative()\l+ IsPositive()\l+ IsStrictlyNegative()\l+ IsStrictlyPositive()\l+ Compare()\l+ operator int64x64_t()\l+ As()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ GetYears()\l+ GetDays()\l+ GetHours()\l+ GetMinutes()\l+ GetSeconds()\l+ GetMilliSeconds()\l+ GetMicroSeconds()\l+ GetNanoSeconds()\l+ GetPicoSeconds()\l+ GetFemtoSeconds()\l+ GetTimeStep()\l+ GetDouble()\l+ GetInteger()\l+ ToInteger()\l+ ToDouble()\l+ To()\l+ Min()\l+ Max()\l+ SetResolution()\l+ GetResolution()\l+ From()\l+ StaticInit()\l+ FromInteger()\l+ FromDouble()\l+ From()\l- PeekResolution()\l- PeekInformation()\l- SetDefaultNsResolution()\l- SetResolution()\l- ClearMarkedTimes()\l- Mark()\l- Clear()\l- ConvertTimes()\l* operator==\l* operator!=\l* operator\<=\l* operator\>=\l* operator\<\l* operator\>\l* operator+\l* operator-\l* operator*\l* operator*\l* operator/\l* operator/\l* operator+=\l* operator-=\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* GetYears()\l* GetDays()\l* GetHours()\l* GetMinutes()\l* GetSeconds()\l* GetMilliSeconds()\l* GetMicroSeconds()\l* GetNanoSeconds()\l* GetPicoSeconds()\l* GetFemtoSeconds()\l* GetTimeStep()\l* GetDouble()\l* GetInteger()\l* ToInteger()\l* ToDouble()\l* To()\l* FromInteger()\l* FromDouble()\l* From()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d04/classns3_1_1Time.html",tooltip="Simulation virtual time values and global simulation resolution. "];
}
