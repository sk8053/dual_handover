digraph "AnnexC_TestCase"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{AnnexC_TestCase\n||+ AnnexC_TestCase()\l+ ~AnnexC_TestCase()\l- DoRun()\l- SendPacket()\l- Receive()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{ns3::TestCase\n|- m_children\l- m_dataDir\l- m_name\l- m_duration\l|+ ~TestCase()\l+ GetName()\l# TestCase()\l# AddTestCase()\l# SetDataDir()\l# IsStatusFailure()\l# IsStatusSuccess()\l# GetParent()\l# ReportTestFailure()\l# MustAssertOnFailure()\l# MustContinueOnFailure()\l# CreateDataDirFilename()\l# CreateTempDirFilename()\l- DoSetup()\l- DoRun()\l- DoTeardown()\l- Run()\l- IsFailed()\l* ReportTestFailure()\l* MustAssertOnFailure()\l* MustContinueOnFailure()\l* CreateDataDirFilename()\l* CreateTempDirFilename()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/d88/classns3_1_1TestCase.html",tooltip="encapsulates test code "];
  Node3 -> Node2 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{ns3::NonCopyable\n||# NonCopyable()\l# ~NonCopyable()\l- NonCopyable()\l- operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/dd1/classns3_1_1NonCopyable.html"];
  Node4 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -m_runner" ,arrowhead="odiamond"];
  Node4 [label="{ns3::TestRunnerImpl\n|- m_suites\l- m_tempDir\l- m_verbose\l- m_assertOnFailure\l- m_continueOnFailure\l- m_updateData\l|+ TestRunnerImpl()\l+ AddTestSuite()\l+ MustAssertOnFailure()\l+ MustContinueOnFailure()\l+ MustUpdateData()\l+ GetTopLevelSourceDir()\l+ GetTempDir()\l+ Run()\l- IsTopLevelSourceDir()\l- ReplaceXmlSpecialCharacters()\l- PrintReport()\l- PrintTestNameList()\l- PrintTestTypeList()\l- PrintHelp()\l- FilterTests()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/d71/classns3_1_1TestRunnerImpl.html"];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 [label="{ns3::Singleton\< TestRunner\lImpl \>\n||+ Get()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/d77/classns3_1_1Singleton.html"];
  Node3 -> Node5 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -m_parent" ,arrowhead="odiamond"];
  Node6 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -m_result" ,arrowhead="odiamond"];
  Node6 [label="{ns3::TestCase::Result\n|+ failure\l+ childrenFailed\l|+ Result()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/d25/structns3_1_1TestCase_1_1Result.html"];
  Node7 -> Node6 [color="grey25",fontsize="10",style="solid",label=" +clock" ,arrowhead="odiamond"];
  Node7 [label="{ns3::SystemWallClockMs\n||+ SystemWallClockMs()\l+ ~SystemWallClockMs()\l+ Start()\l+ End()\l+ GetElapsedReal()\l+ GetElapsedUser()\l+ GetElapsedSystem()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/dd4/classns3_1_1SystemWallClockMs.html",tooltip="Measure elapsed wall clock time in milliseconds. "];
  Node8 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -m_priv" ,arrowhead="odiamond"];
  Node8 [label="{ns3::SystemWallClockMsPrivate\n|- m_startTimes\l- m_startTime\l- m_elapsedReal\l- m_elapsedUser\l- m_elapsedSystem\l|+ Start()\l+ End()\l+ GetElapsedReal()\l+ GetElapsedUser()\l+ GetElapsedSystem()\l+ Start()\l+ End()\l+ GetElapsedReal()\l+ GetElapsedUser()\l+ GetElapsedSystem()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/da6/classns3_1_1SystemWallClockMsPrivate.html",tooltip="System-dependent implementation for SystemWallClockMs. "];
  Node9 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_devices" ,arrowhead="odiamond"];
  Node9 [label="{ns3::NetDeviceContainer\n|- m_devices\l|+ NetDeviceContainer()\l+ NetDeviceContainer()\l+ NetDeviceContainer()\l+ NetDeviceContainer()\l+ Begin()\l+ End()\l+ GetN()\l+ Get()\l+ Add()\l+ Add()\l+ Add()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d94/classns3_1_1NetDeviceContainer.html",tooltip="holds a vector of ns3::NetDevice pointers "];
  Node10 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_sender\n-m_receiver" ,arrowhead="odiamond"];
  Node10 [label="{ns3::Ptr\< WaveNetDevice \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node11 -> Node10 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node11 [label="{ns3::WaveNetDevice\n|- m_macEntities\l- m_phyEntities\l- m_ifIndex\l- m_mtu\l- MAX_MSDU_SIZE\l- IPv4_PROT_NUMBER\l- IPv6_PROT_NUMBER\l|+ WaveNetDevice()\l+ ~WaveNetDevice()\l+ AddMac()\l+ GetMac()\l+ GetMacs()\l+ AddPhy()\l+ GetPhy()\l+ GetPhys()\l+ SetChannelScheduler()\l+ GetChannelScheduler()\land 40 more...\l+ GetTypeId()\l- DoDispose()\l- DoInitialize()\l- IsAvailableChannel()\l- ForwardUp()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/d1c/classns3_1_1WaveNetDevice.html"];
  Node12 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node12 [label="{ns3::NetDevice\n|+ isEnbTypeForDc\l|+ ~NetDevice()\l+ SetIfIndex()\l+ GetIfIndex()\l+ GetChannel()\l+ SetAddress()\l+ GetAddress()\l+ SetMtu()\l+ GetMtu()\l+ IsLinkUp()\l+ AddLinkChangeCallback()\land 15 more...\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/dac/classns3_1_1NetDevice.html",tooltip="Network layer to device interface. "];
  Node13 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node13 [label="{ns3::Object\n|- m_disposed\l- m_initialized\l- m_getObjectCount\l|+ Object()\l+ ~Object()\l+ GetInstanceTypeId()\l+ GetObject()\l+ GetObject()\l+ Dispose()\l+ AggregateObject()\l+ GetAggregateIterator()\l+ Initialize()\l+ IsInitialized()\l+ GetTypeId()\l# NotifyNewAggregate()\l# DoInitialize()\l# DoDispose()\l# Object()\l- DoGetObject()\l- Check()\l- CheckLoose()\l- SetTypeId()\l- Construct()\l- UpdateSortedArray()\l- DoDelete()\l* CopyObject\l* CopyObject\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d77/classns3_1_1Object.html",tooltip="A base class which provides memory management and object aggregation. "];
  Node14 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node14 [label="{ns3::SimpleRefCount\l\< Object, ObjectBase,\l ObjectDeleter \>\n|- m_count\l|+ SimpleRefCount()\l+ SimpleRefCount()\l+ operator=()\l+ Ref()\l+ Unref()\l+ GetReferenceCount()\l+ Cleanup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da1/classns3_1_1SimpleRefCount.html"];
  Node15 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node15 [label="{ns3::ObjectBase\n||+ ~ObjectBase()\l+ GetInstanceTypeId()\l+ SetAttribute()\l+ SetAttributeFailSafe()\l+ GetAttribute()\l+ GetAttributeFailSafe()\l+ TraceConnect()\l+ TraceConnectWithoutContext()\l+ TraceDisconnect()\l+ TraceDisconnectWithoutContext()\l+ GetTypeId()\l# NotifyConstructionCompleted()\l# ConstructSelf()\l- DoSet()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/dac/classns3_1_1ObjectBase.html",tooltip="Anchor the ns-3 type and attribute system. "];
  Node16 -> Node13 [color="grey25",fontsize="10",style="solid",label=" -m_tid" ,arrowhead="odiamond"];
  Node16 [label="{ns3::TypeId\n|- m_tid\l|+ TypeId()\l+ GetParent()\l+ HasParent()\l+ IsChildOf()\l+ GetGroupName()\l+ GetName()\l+ GetHash()\l+ GetSize()\l+ HasConstructor()\l+ GetAttributeN()\land 26 more...\l+ LookupByName()\l+ LookupByNameFailSafe()\l+ LookupByHash()\l+ LookupByHashFailSafe()\l+ GetRegisteredN()\l+ GetRegistered()\l- TypeId()\l- DoAddConstructor()\l* operator==\l* operator!=\l* operator\<\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d11/classns3_1_1TypeId.html",tooltip="a unique identifier for an interface. "];
  Node17 -> Node13 [color="grey25",fontsize="10",style="solid",label=" -m_aggregates" ,arrowhead="odiamond"];
  Node17 [label="{ns3::Object::Aggregates\n|+ n\l|}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/de9/structns3_1_1Object_1_1Aggregates.html"];
  Node13 -> Node17 [color="grey25",fontsize="10",style="solid",label=" +buffer" ,arrowhead="odiamond"];
  Node18 -> Node11 [color="grey25",fontsize="10",style="solid",label=" -m_promiscRx" ,arrowhead="odiamond"];
  Node18 [label="{ns3::Callback\< bool,\l Ptr\< NetDevice \>, Ptr\l\< const Packet \>, uint16\l_t, const Address &, const\l Address &, enum PacketType \>\n||+ Callback()\l+ Callback()\l+ Callback()\l+ Callback()\l+ Bind()\l+ TwoBind()\l+ ThreeBind()\l+ IsNull()\l+ Nullify()\l+ IsEqual()\l+ CheckType()\l+ Assign()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l- DoPeekImpl()\l- DoCheckType()\l- DoAssign()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d48/classns3_1_1Callback.html"];
  Node19 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node19 [label="{ns3::CallbackBase\n||+ CallbackBase()\l+ GetImpl()\l# CallbackBase()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/db5/classns3_1_1CallbackBase.html"];
  Node20 -> Node19 [color="grey25",fontsize="10",style="solid",label=" #m_impl" ,arrowhead="odiamond"];
  Node20 [label="{ns3::Ptr\< ns3::CallbackImpl\lBase \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node21 -> Node20 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node21 [label="{ns3::CallbackImplBase\n||+ ~CallbackImplBase()\l+ IsEqual()\l+ GetTypeid()\l# Demangle()\l# GetCppTypeid()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/dfa/classns3_1_1CallbackImplBase.html"];
  Node22 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node22 [label="{ns3::SimpleRefCount\l\< CallbackImplBase \>\n|- m_count\l|+ SimpleRefCount()\l+ SimpleRefCount()\l+ operator=()\l+ Ref()\l+ Unref()\l+ GetReferenceCount()\l+ Cleanup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da1/classns3_1_1SimpleRefCount.html"];
  Node23 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node23 [label="{ns3::empty\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d6a/classns3_1_1empty.html",tooltip="make Callback use a separate empty type "];
  Node24 -> Node11 [color="grey25",fontsize="10",style="solid",label=" -m_node" ,arrowhead="odiamond"];
  Node24 [label="{ns3::Ptr\< ns3::Node \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node25 -> Node24 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node25 [label="{ns3::Node\n|- m_id\l- m_sid\l- m_devices\l- m_applications\l- m_handlers\l- m_deviceAdditionListeners\l|+ Node()\l+ Node()\l+ ~Node()\l+ GetId()\l+ GetLocalTime()\l+ GetSystemId()\l+ AddDevice()\l+ GetDevice()\l+ GetNDevices()\l+ AddApplication()\land 6 more...\l+ GetTypeId()\l+ ChecksumEnabled()\l# DoDispose()\l# DoInitialize()\l- NotifyDeviceAdded()\l- NonPromiscReceiveFromDevice()\l- PromiscReceiveFromDevice()\l- ReceiveFromDevice()\l- Construct()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/ded/classns3_1_1Node.html",tooltip="A network Node. "];
  Node13 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node26 -> Node11 [color="grey25",fontsize="10",style="solid",label=" -m_channelCoordinator" ,arrowhead="odiamond"];
  Node26 [label="{ns3::Ptr\< ns3::ChannelCoordinator \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node27 -> Node26 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node27 [label="{ns3::ChannelCoordinator\n|- m_listeners\l- m_guardCount\l|+ ChannelCoordinator()\l+ ~ChannelCoordinator()\l+ SetCchInterval()\l+ GetCchInterval()\l+ SetSchInterval()\l+ GetSchInterval()\l+ GetSyncInterval()\l+ SetGuardInterval()\l+ GetGuardInterval()\l+ IsValidConfig()\land 11 more...\l+ GetTypeId()\l+ GetDefaultCchInterval()\l+ GetDefaultSchInterval()\l+ GetDefaultSyncInterval()\l+ GetDefaultGuardInterval()\l- DoDispose()\l- DoInitialize()\l- StartChannelCoordination()\l- StopChannelCoordination()\l- NotifySchSlot()\l- NotifyCchSlot()\l- NotifyGuardSlot()\l- GetSchSlot()\l- GetCchSlot()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/dca/classns3_1_1ChannelCoordinator.html",tooltip="ChannelCoordinator deals with channel coordination in data plane (see 1609.4 chapter 5..."];
  Node13 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node28 -> Node27 [color="grey25",fontsize="10",style="solid",label=" -m_coordination" ,arrowhead="odiamond"];
  Node28 [label="{ns3::EventId\n|- m_ts\l- m_context\l- m_uid\l|+ EventId()\l+ EventId()\l+ Cancel()\l+ IsExpired()\l+ IsRunning()\l+ PeekEventImpl()\l+ GetTs()\l+ GetContext()\l+ GetUid()\l* PeekEventImpl()\l* GetTs()\l* GetContext()\l* GetUid()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/df8/classns3_1_1EventId.html",tooltip="An identifier for simulation events. "];
  Node29 -> Node28 [color="grey25",fontsize="10",style="solid",label=" -m_eventImpl" ,arrowhead="odiamond"];
  Node29 [label="{ns3::Ptr\< ns3::EventImpl \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node30 -> Node29 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node30 [label="{ns3::EventImpl\n|- m_cancel\l|+ EventImpl()\l+ ~EventImpl()\l+ Invoke()\l+ Cancel()\l+ IsCancelled()\l# Notify()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/def/classns3_1_1EventImpl.html",tooltip="A simulation event. "];
  Node31 -> Node30 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node31 [label="{ns3::SimpleRefCount\l\< EventImpl \>\n|- m_count\l|+ SimpleRefCount()\l+ SimpleRefCount()\l+ operator=()\l+ Ref()\l+ Unref()\l+ GetReferenceCount()\l+ Cleanup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da1/classns3_1_1SimpleRefCount.html"];
  Node23 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node32 -> Node27 [color="grey25",fontsize="10",style="solid",label=" -m_cchi\n-m_schi\n-m_gi" ,arrowhead="odiamond"];
  Node32 [label="{ns3::Time\n|- m_data\l- g_markingTimes\l|+ operator=()\l+ Time()\l+ Time()\l+ Time()\l+ ~Time()\l+ IsZero()\l+ IsNegative()\l+ IsPositive()\l+ IsStrictlyNegative()\l+ IsStrictlyPositive()\l+ Compare()\l+ operator int64x64_t()\l+ As()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ GetYears()\l+ GetDays()\l+ GetHours()\l+ GetMinutes()\l+ GetSeconds()\l+ GetMilliSeconds()\l+ GetMicroSeconds()\l+ GetNanoSeconds()\l+ GetPicoSeconds()\l+ GetFemtoSeconds()\l+ GetTimeStep()\l+ GetDouble()\l+ GetInteger()\l+ ToInteger()\l+ ToDouble()\l+ To()\l+ Min()\l+ Max()\l+ SetResolution()\l+ GetResolution()\l+ From()\l+ StaticInit()\l+ FromInteger()\l+ FromDouble()\l+ From()\l- PeekResolution()\l- PeekInformation()\l- SetDefaultNsResolution()\l- SetResolution()\l- ClearMarkedTimes()\l- Mark()\l- Clear()\l- ConvertTimes()\l* operator==\l* operator!=\l* operator\<=\l* operator\>=\l* operator\<\l* operator\>\l* operator+\l* operator-\l* operator*\l* operator*\l* operator/\l* operator/\l* operator+=\l* operator-=\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* GetYears()\l* GetDays()\l* GetHours()\l* GetMinutes()\l* GetSeconds()\l* GetMilliSeconds()\l* GetMicroSeconds()\l* GetNanoSeconds()\l* GetPicoSeconds()\l* GetFemtoSeconds()\l* GetTimeStep()\l* GetDouble()\l* GetInteger()\l* ToInteger()\l* ToDouble()\l* To()\l* FromInteger()\l* FromDouble()\l* From()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d04/classns3_1_1Time.html",tooltip="Simulation virtual time values and global simulation resolution. "];
  Node33 -> Node11 [color="grey25",fontsize="10",style="solid",label=" -m_forwardUp" ,arrowhead="odiamond"];
  Node33 [label="{ns3::Callback\< bool,\l Ptr\< NetDevice \>, Ptr\l\< const Packet \>, uint16\l_t, const Address & \>\n||+ Callback()\l+ Callback()\l+ Callback()\l+ Callback()\l+ Bind()\l+ TwoBind()\l+ ThreeBind()\l+ IsNull()\l+ Nullify()\l+ IsEqual()\l+ CheckType()\l+ Assign()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l- DoPeekImpl()\l- DoCheckType()\l- DoAssign()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d48/classns3_1_1Callback.html"];
  Node19 -> Node33 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node34 -> Node11 [color="grey25",fontsize="10",style="solid",label=" -m_channelManager" ,arrowhead="odiamond"];
  Node34 [label="{ns3::Ptr\< ns3::ChannelManager \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node35 -> Node34 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node35 [label="{ns3::ChannelManager\n|- m_channels\l- DEFAULT_OPERATING_CLASS\l|+ ChannelManager()\l+ ~ChannelManager()\l+ GetOperatingClass()\l+ GetManagementAdaptable()\l+ GetManagementDataRate()\l+ GetManagementPreamble()\l+ GetManagementPowerLevel()\l+ GetTypeId()\l+ GetCch()\l+ GetSchs()\l+ GetWaveChannels()\l+ GetNumberOfWaveChannels()\l+ IsCch()\l+ IsSch()\l+ IsWaveChannel()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/d17/classns3_1_1ChannelManager.html",tooltip="manage 7 WaveChannels and the tx information such as data rate and txPowerLevel. for transmitting VSA..."];
  Node13 -> Node35 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node36 -> Node11 [color="grey25",fontsize="10",style="solid",label=" -m_txProfile" ,arrowhead="odiamond"];
  Node36 [label="{ns3::TxProfile\n|+ channelNumber\l+ adaptable\l+ txPowerLevel\l+ preamble\l|+ TxProfile()\l+ TxProfile()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d15/structns3_1_1TxProfile.html"];
  Node37 -> Node36 [color="grey25",fontsize="10",style="solid",label=" +dataRate" ,arrowhead="odiamond"];
  Node37 [label="{ns3::WifiMode\n|- m_uid\l|+ IsAllowed()\l+ GetPhyRate()\l+ GetPhyRate()\l+ GetDataRate()\l+ GetDataRate()\l+ GetDataRate()\l+ GetCodeRate()\l+ GetConstellationSize()\l+ GetMcsValue()\l+ GetUniqueName()\land 8 more...\l- WifiMode()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/d56/classns3_1_1WifiMode.html",tooltip="represent a single transmission modeA WifiMode is implemented by a single integer which is used to lo..."];
  Node38 -> Node11 [color="grey25",fontsize="10",style="solid",label=" -m_vsaManager" ,arrowhead="odiamond"];
  Node38 [label="{ns3::Ptr\< ns3::VsaManager \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node39 -> Node38 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node39 [label="{ns3::VsaManager\n|- m_vsas\l- VSA_REPEAT_PERIOD\l|+ VsaManager()\l+ ~VsaManager()\l+ SetWaveNetDevice()\l+ SetWaveVsaCallback()\l+ SendVsa()\l+ RemoveAll()\l+ RemoveByChannel()\l+ RemoveByOrganizationIdentifier()\l+ GetTypeId()\l- DoDispose()\l- DoInitialize()\l- ReceiveVsc()\l- DoRepeat()\l- DoSendVsa()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/d6e/classns3_1_1VsaManager.html"];
  Node13 -> Node39 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node40 -> Node39 [color="grey25",fontsize="10",style="solid",label=" -m_vsaReceived" ,arrowhead="odiamond"];
  Node40 [label="{ns3::Callback\< bool,\l ns3::Ptr\< const ns3\l::Packet \>, const ns3\l::Address &, uint32_t,\l uint32_t \>\n||+ Callback()\l+ Callback()\l+ Callback()\l+ Callback()\l+ Bind()\l+ TwoBind()\l+ ThreeBind()\l+ IsNull()\l+ Nullify()\l+ IsEqual()\l+ CheckType()\l+ Assign()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l- DoPeekImpl()\l- DoCheckType()\l- DoAssign()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d48/classns3_1_1Callback.html"];
  Node19 -> Node40 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node41 -> Node39 [color="grey25",fontsize="10",style="solid",label=" -m_device" ,arrowhead="odiamond"];
  Node41 [label="{ns3::Ptr\< ns3::WaveNetDevice \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node11 -> Node41 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node42 -> Node11 [color="grey25",fontsize="10",style="solid",label=" -m_addressChange" ,arrowhead="odiamond"];
  Node42 [label="{ns3::TracedCallback\l\< ns3::Address, ns3\l::Address \>\n|- m_callbackList\l|+ TracedCallback()\l+ ConnectWithoutContext()\l+ Connect()\l+ DisconnectWithoutContext()\l+ Disconnect()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l* Uint32Callback\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/dec/classns3_1_1TracedCallback.html"];
  Node43 -> Node11 [color="grey25",fontsize="10",style="solid",label=" -m_channelScheduler" ,arrowhead="odiamond"];
  Node43 [label="{ns3::Ptr\< ns3::ChannelScheduler \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node44 -> Node43 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node44 [label="{ns3::ChannelScheduler\n||+ ChannelScheduler()\l+ ~ChannelScheduler()\l+ SetWaveNetDevice()\l+ IsCchAccessAssigned()\l+ IsSchAccessAssigned()\l+ IsChannelAccessAssigned()\l+ IsContinuousAccessAssigned()\l+ IsAlternatingAccessAssigned()\l+ IsExtendedAccessAssigned()\l+ IsDefaultCchAccessAssigned()\l+ GetAssignedAccessType()\l+ StartSch()\l+ StopSch()\l+ GetTypeId()\l# DoInitialize()\l# AssignAlternatingAccess()\l# AssignContinuousAccess()\l# AssignExtendedAccess()\l# AssignDefaultCchAccess()\l# ReleaseAccess()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/d91/classns3_1_1ChannelScheduler.html",tooltip="This class will assign channel access for requests from higher layers. The channel access options inc..."];
  Node13 -> Node44 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node41 -> Node44 [color="grey25",fontsize="10",style="solid",label=" #m_device" ,arrowhead="odiamond"];
}
