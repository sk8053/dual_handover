digraph "DcaTxopTest"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{DcaTxopTest\n|- m_test\l- m_i\l|+ DcaTxopTest()\l- NotifyAccessGranted()\l- NotifyInternalCollision()\l- NotifyCollision()\l- NotifyChannelSwitching()\l- NotifySleep()\l- NotifyWakeUp()\l- DoDispose()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{ns3::DcaTxop\n|# m_dcf\l# m_manager\l# m_txOkCallback\l# m_txFailedCallback\l# m_txDroppedCallback\l# m_queue\l# m_txMiddle\l# m_low\l# m_stationManager\l# m_rng\l# m_currentPacket\l# m_currentHdr\l# m_currentParams\l# m_fragmentNumber\l|+ DcaTxop()\l+ ~DcaTxop()\l+ IsEdca()\l+ SetLow()\l+ SetManager()\l+ SetWifiRemoteStationManager()\l+ SetTxMiddle()\l+ SetTxOkCallback()\l+ SetTxFailedCallback()\l+ SetTxDroppedCallback()\land 25 more...\l+ GetTypeId()\l# DoDispose()\l# DoInitialize()\l# NeedsAccess()\l# NotifyAccessGranted()\l# NotifyInternalCollision()\l# NotifyCollision()\l# RestartAccessIfNeeded()\l# StartAccessIfNeeded()\l# NeedRtsRetransmission()\l# NeedDataRetransmission()\land 8 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/d74/classns3_1_1DcaTxop.html",tooltip="handle packet fragmentation and retransmissions.This class implements the packet fragmentation and re..."];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{ns3::Object\n|- m_tid\l- m_disposed\l- m_initialized\l- m_aggregates\l- m_getObjectCount\l|+ Object()\l+ ~Object()\l+ GetInstanceTypeId()\l+ GetObject()\l+ GetObject()\l+ Dispose()\l+ AggregateObject()\l+ GetAggregateIterator()\l+ Initialize()\l+ IsInitialized()\l+ GetTypeId()\l# NotifyNewAggregate()\l# DoInitialize()\l# DoDispose()\l# Object()\l- DoGetObject()\l- Check()\l- CheckLoose()\l- SetTypeId()\l- Construct()\l- UpdateSortedArray()\l- DoDelete()\l* CopyObject\l* CopyObject\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d77/classns3_1_1Object.html",tooltip="A base class which provides memory management and object aggregation. "];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{ns3::SimpleRefCount\l\< Object, ObjectBase,\l ObjectDeleter \>\n|- m_count\l|+ SimpleRefCount()\l+ SimpleRefCount()\l+ operator=()\l+ Ref()\l+ Unref()\l+ GetReferenceCount()\l+ Cleanup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da1/classns3_1_1SimpleRefCount.html"];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 [label="{ns3::ObjectBase\n||+ ~ObjectBase()\l+ GetInstanceTypeId()\l+ SetAttribute()\l+ SetAttributeFailSafe()\l+ GetAttribute()\l+ GetAttributeFailSafe()\l+ TraceConnect()\l+ TraceConnectWithoutContext()\l+ TraceDisconnect()\l+ TraceDisconnectWithoutContext()\l+ GetTypeId()\l# NotifyConstructionCompleted()\l# ConstructSelf()\l- DoSet()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/dac/classns3_1_1ObjectBase.html",tooltip="Anchor the ns-3 type and attribute system. "];
}
