digraph "ns3::PositionAllocator"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{ns3::PositionAllocator\n||+ PositionAllocator()\l+ ~PositionAllocator()\l+ GetNext()\l+ AssignStreams()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{ns3::Object\n|- m_tid\l- m_disposed\l- m_initialized\l- m_aggregates\l- m_getObjectCount\l|+ Object()\l+ ~Object()\l+ GetInstanceTypeId()\l+ GetObject()\l+ GetObject()\l+ Dispose()\l+ AggregateObject()\l+ GetAggregateIterator()\l+ Initialize()\l+ IsInitialized()\l+ GetTypeId()\l# NotifyNewAggregate()\l# DoInitialize()\l# DoDispose()\l# Object()\l- DoGetObject()\l- Check()\l- CheckLoose()\l- SetTypeId()\l- Construct()\l- UpdateSortedArray()\l- DoDelete()\l* CopyObject\l* CopyObject\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d77/classns3_1_1Object.html",tooltip="A base class which provides memory management and object aggregation. "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{ns3::SimpleRefCount\l\< Object, ObjectBase,\l ObjectDeleter \>\n|- m_count\l|+ SimpleRefCount()\l+ SimpleRefCount()\l+ operator=()\l+ Ref()\l+ Unref()\l+ GetReferenceCount()\l+ Cleanup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da1/classns3_1_1SimpleRefCount.html"];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{ns3::ObjectBase\n||+ ~ObjectBase()\l+ GetInstanceTypeId()\l+ SetAttribute()\l+ SetAttributeFailSafe()\l+ GetAttribute()\l+ GetAttributeFailSafe()\l+ TraceConnect()\l+ TraceConnectWithoutContext()\l+ TraceDisconnect()\l+ TraceDisconnectWithoutContext()\l+ GetTypeId()\l# NotifyConstructionCompleted()\l# ConstructSelf()\l- DoSet()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/dac/classns3_1_1ObjectBase.html",tooltip="Anchor the ns-3 type and attribute system. "];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 [label="{ns3::FixedRoomPositionAllocator\n|- roomx\l- roomy\l- floor\l- bptr\l- m_rand\l|+ FixedRoomPositionAllocator()\l+ GetNext()\l+ AssignStreams()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/d7b/classns3_1_1FixedRoomPositionAllocator.html"];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node6 [label="{ns3::GridPositionAllocator\n|- m_current\l- m_layoutType\l- m_xMin\l- m_yMin\l- m_n\l- m_deltaX\l- m_deltaY\l|+ GridPositionAllocator()\l+ SetMinX()\l+ SetMinY()\l+ SetDeltaX()\l+ SetDeltaY()\l+ SetN()\l+ SetLayoutType()\l+ GetMinX()\l+ GetMinY()\l+ GetDeltaX()\l+ GetDeltaY()\l+ GetN()\l+ GetLayoutType()\l+ GetNext()\l+ AssignStreams()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/d04/classns3_1_1GridPositionAllocator.html",tooltip="Allocate positions on a rectangular 2d grid. "];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node7 [label="{ns3::ListPositionAllocator\n|- m_positions\l- m_current\l|+ ListPositionAllocator()\l+ Add()\l+ GetSize()\l+ GetNext()\l+ AssignStreams()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/d95/classns3_1_1ListPositionAllocator.html",tooltip="Allocate positions from a deterministic list specified by the user. "];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node8 [label="{ns3::RandomBoxPositionAllocator\n|- m_x\l- m_y\l- m_z\l|+ RandomBoxPositionAllocator()\l+ ~RandomBoxPositionAllocator()\l+ SetX()\l+ SetY()\l+ SetZ()\l+ GetNext()\l+ AssignStreams()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/d49/classns3_1_1RandomBoxPositionAllocator.html",tooltip="Allocate random positions within a 3D box according to a set of three random variables. "];
  Node1 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node9 [label="{ns3::RandomBuildingPosition\lAllocator\n|- m_withReplacement\l- m_buildingListWithoutReplacement\l- m_rand\l|+ RandomBuildingPositionAllocator()\l+ GetNext()\l+ AssignStreams()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/d30/classns3_1_1RandomBuildingPositionAllocator.html"];
  Node1 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node10 [label="{ns3::RandomDiscPositionAllocator\n|- m_theta\l- m_rho\l- m_x\l- m_y\l|+ RandomDiscPositionAllocator()\l+ ~RandomDiscPositionAllocator()\l+ SetTheta()\l+ SetRho()\l+ SetX()\l+ SetY()\l+ GetNext()\l+ AssignStreams()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/dae/classns3_1_1RandomDiscPositionAllocator.html",tooltip="Allocate random positions within a disc according to a given distribution for the polar coordinates o..."];
  Node1 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node11 [label="{ns3::RandomRectanglePosition\lAllocator\n|- m_x\l- m_y\l|+ RandomRectanglePositionAllocator()\l+ ~RandomRectanglePosition\lAllocator()\l+ SetX()\l+ SetY()\l+ GetNext()\l+ AssignStreams()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/d09/classns3_1_1RandomRectanglePositionAllocator.html",tooltip="Allocate random positions within a rectangle according to a pair of random variables. "];
  Node1 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node12 [label="{ns3::RandomRoomPositionAllocator\n|- m_roomListWithoutReplacement\l- m_rand\l|+ RandomRoomPositionAllocator()\l+ GetNext()\l+ AssignStreams()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/d26/classns3_1_1RandomRoomPositionAllocator.html"];
  Node1 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node13 [label="{ns3::SameRoomPositionAllocator\n|- m_nodes\l- m_nodeIt\l- m_rand\l|+ SameRoomPositionAllocator()\l+ SameRoomPositionAllocator()\l+ GetNext()\l+ AssignStreams()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/dd1/classns3_1_1SameRoomPositionAllocator.html"];
  Node1 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node14 [label="{ns3::UniformDiscPosition\lAllocator\n|- m_rv\l- m_rho\l- m_x\l- m_y\l- m_z\l|+ UniformDiscPositionAllocator()\l+ ~UniformDiscPositionAllocator()\l+ SetRho()\l+ SetX()\l+ SetY()\l+ GetNext()\l+ AssignStreams()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/dad/classns3_1_1UniformDiscPositionAllocator.html",tooltip="Allocate the positions uniformely (with constant density) randomly within a disc. ..."];
}
