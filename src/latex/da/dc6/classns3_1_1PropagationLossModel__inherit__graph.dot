digraph "ns3::PropagationLossModel"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{ns3::PropagationLossModel\n|- m_next\l|+ PropagationLossModel()\l+ ~PropagationLossModel()\l+ SetNext()\l+ GetNext()\l+ CalcRxPower()\l+ AssignStreams()\l+ GetTypeId()\l- PropagationLossModel()\l- operator=()\l- DoCalcRxPower()\l- DoAssignStreams()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{ns3::Object\n|- m_tid\l- m_disposed\l- m_initialized\l- m_aggregates\l- m_getObjectCount\l|+ Object()\l+ ~Object()\l+ GetInstanceTypeId()\l+ GetObject()\l+ GetObject()\l+ Dispose()\l+ AggregateObject()\l+ GetAggregateIterator()\l+ Initialize()\l+ IsInitialized()\l+ GetTypeId()\l# NotifyNewAggregate()\l# DoInitialize()\l# DoDispose()\l# Object()\l- DoGetObject()\l- Check()\l- CheckLoose()\l- SetTypeId()\l- Construct()\l- UpdateSortedArray()\l- DoDelete()\l* CopyObject\l* CopyObject\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d77/classns3_1_1Object.html",tooltip="A base class which provides memory management and object aggregation. "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{ns3::SimpleRefCount\l\< Object, ObjectBase,\l ObjectDeleter \>\n|- m_count\l|+ SimpleRefCount()\l+ SimpleRefCount()\l+ operator=()\l+ Ref()\l+ Unref()\l+ GetReferenceCount()\l+ Cleanup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da1/classns3_1_1SimpleRefCount.html"];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{ns3::ObjectBase\n||+ ~ObjectBase()\l+ GetInstanceTypeId()\l+ SetAttribute()\l+ SetAttributeFailSafe()\l+ GetAttribute()\l+ GetAttributeFailSafe()\l+ TraceConnect()\l+ TraceConnectWithoutContext()\l+ TraceDisconnect()\l+ TraceDisconnectWithoutContext()\l+ GetTypeId()\l# NotifyConstructionCompleted()\l# ConstructSelf()\l- DoSet()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/dac/classns3_1_1ObjectBase.html",tooltip="Anchor the ns-3 type and attribute system. "];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 [label="{MmWave3gppPropagationLoss\lModel\n|- m_lambda\l- m_frequency\l- m_minLoss\l- m_channelConditionMap\l- m_channelConditions\l- m_scenario\l- m_optionNlosEnabled\l- m_norVar\l- m_uniformVar\l- m_shadowingEnabled\l- m_inCar\l- m_phyMacConfig\l|+ MmWave3gppPropagationLoss\lModel()\l+ SetConfigurationParameters()\l+ SetMinLoss()\l+ GetMinLoss()\l+ GetFrequency()\l+ GetChannelCondition()\l+ GetScenario()\l+ GetLoss()\l+ GetTypeId()\l- MmWave3gppPropagationLoss\lModel()\l- operator=()\l- DoCalcRxPower()\l- DoAssignStreams()\l- UpdateConditionMap()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d49/classMmWave3gppPropagationLossModel.html"];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node6 [label="{MmWavePropagationLossModel\n|- m_lambda\l- m_frequency\l- m_minLoss\l- m_channelScenarioMap\l- m_channelStates\l- m_lossFixedDb\l- m_fixedLossTst\l- m_phyMacConfig\l|+ MmWavePropagationLossModel()\l+ SetConfigurationParameters()\l+ SetMinLoss()\l+ GetMinLoss()\l+ GetFrequency()\l+ SetLossFixedDb()\l+ GetTypeId()\l- MmWavePropagationLossModel()\l- operator=()\l- DoCalcRxPower()\l- DoAssignStreams()\l- UpDataScenarioMap()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/d6e/classMmWavePropagationLossModel.html"];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node7 [label="{ns3::BuildingsPropagation\lLossModel\n|# m_lossInternalWall\l# m_shadowingLossMap\l# m_shadowingSigmaExtWalls\l# m_shadowingSigmaOutdoor\l# m_shadowingSigmaIndoor\l# m_randVariable\l|+ BuildingsPropagationLoss\lModel()\l+ GetLoss()\l+ DoCalcRxPower()\l+ GetTypeId()\l# ExternalWallLoss()\l# HeightLoss()\l# InternalWallsLoss()\l# GetShadowing()\l# EvaluateSigma()\l# DoAssignStreams()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/db0/classns3_1_1BuildingsPropagationLossModel.html"];
  Node7 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node8 [label="{ns3::BuildingsObstaclePropagation\lLossModel\n|+ additionalPath\l- m_frequency\l- m_lambda\l- m_beamforming\l- m_beamforming_2\l- m_losTracker\l- m_phyMacConfig\l|+ BuildingsObstaclePropagation\lLossModel()\l+ ~BuildingsObstaclePropagation\lLossModel()\l+ GetLoss()\l+ DoCalcRxPower()\l+ SetConfigurationParameters()\l+ SetBeamforming()\l+ SetBeamforming_2()\l+ SetLosTracker()\l+ GetTypeId()\l- mmWaveLosLoss()\l- mmWaveNlosLoss()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/d0d/classns3_1_1BuildingsObstaclePropagationLossModel.html"];
  Node7 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node9 [label="{ns3::HybridBuildingsPropagation\lLossModel\n|- m_okumuraHata\l- m_ituR1411Los\l- m_ituR1411NlosOverRooftop\l- m_ituR1238\l- m_kun2600Mhz\l- m_itu1411NlosThreshold\l- m_rooftopHeight\l- m_frequency\l|+ HybridBuildingsPropagation\lLossModel()\l+ ~HybridBuildingsPropagation\lLossModel()\l+ SetEnvironment()\l+ SetCitySize()\l+ SetFrequency()\l+ SetRooftopHeight()\l+ GetLoss()\l+ GetTypeId()\l- OkumuraHata()\l- ItuR1411()\l- ItuR1238()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/df8/classns3_1_1HybridBuildingsPropagationLossModel.html",tooltip="The HybridBuildingsPropagationModel is a compound of different models able to evaluate the pathloss f..."];
  Node7 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node10 [label="{ns3::MmWave3gppBuildings\lPropagationLossModel\n|- m_frequency\l- m_lambda\l- m_3gppLos\l- m_3gppNlos\l- m_conditionMap\l- m_updateCondition\l- m_prevTime\l- m_phyMacConfig\l- m_enbUeLocTrace\l|+ MmWave3gppBuildingsPropagation\lLossModel()\l+ ~MmWave3gppBuildingsPropagation\lLossModel()\l+ GetLoss()\l+ DoCalcRxPower()\l+ SetConfigurationParameters()\l+ GetScenario()\l+ GetChannelCondition()\l+ GetTypeId()\l- IsLineIntersectBuildings()\l- LocationTrace()\l- mmWaveLosLoss()\l- mmWaveNlosLoss()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d89/classns3_1_1MmWave3gppBuildingsPropagationLossModel.html"];
  Node7 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node11 [label="{ns3::OhBuildingsPropagation\lLossModel\n|- m_okumuraHata\l|+ OhBuildingsPropagationLoss\lModel()\l+ ~OhBuildingsPropagationLoss\lModel()\l+ GetLoss()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/d0d/classns3_1_1OhBuildingsPropagationLossModel.html"];
  Node1 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node12 [label="{ns3::Cost231PropagationLoss\lModel\n|- m_BSAntennaHeight\l- m_SSAntennaHeight\l- m_lambda\l- m_minDistance\l- m_frequency\l- m_shadowing\l|+ Cost231PropagationLossModel()\l+ GetLoss()\l+ SetBSAntennaHeight()\l+ SetSSAntennaHeight()\l+ SetLambda()\l+ SetLambda()\l+ SetMinDistance()\l+ GetBSAntennaHeight()\l+ GetSSAntennaHeight()\l+ GetMinDistance()\l+ GetLambda()\l+ GetShadowing()\l+ SetShadowing()\l+ GetTypeId()\l- Cost231PropagationLossModel()\l- operator=()\l- DoCalcRxPower()\l- DoAssignStreams()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/df2/classns3_1_1Cost231PropagationLossModel.html",tooltip="The COST-Hata-Model is the most often cited of the COST 231 models. "];
  Node1 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node13 [label="{ns3::FixedRssLossModel\n|- m_rss\l|+ FixedRssLossModel()\l+ ~FixedRssLossModel()\l+ SetRss()\l+ GetTypeId()\l- FixedRssLossModel()\l- operator=()\l- DoCalcRxPower()\l- DoAssignStreams()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/dca/classns3_1_1FixedRssLossModel.html",tooltip="Return a constant received power level independent of the transmit power. "];
  Node1 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node14 [label="{ns3::FriisPropagationLoss\lModel\n|- m_lambda\l- m_frequency\l- m_systemLoss\l- m_minLoss\l|+ FriisPropagationLossModel()\l+ SetFrequency()\l+ SetSystemLoss()\l+ SetMinLoss()\l+ GetMinLoss()\l+ GetFrequency()\l+ GetSystemLoss()\l+ GetTypeId()\l- FriisPropagationLossModel()\l- operator=()\l- DoCalcRxPower()\l- DoAssignStreams()\l- DbmToW()\l- DbmFromW()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/d68/classns3_1_1FriisPropagationLossModel.html",tooltip="a Friis propagation loss model "];
  Node1 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node15 [label="{ns3::ItuR1238Propagation\lLossModel\n|- m_frequency\l|+ GetLoss()\l+ GetTypeId()\l- DoCalcRxPower()\l- DoAssignStreams()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/d3f/classns3_1_1ItuR1238PropagationLossModel.html"];
  Node1 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node16 [label="{ns3::ItuR1411LosPropagation\lLossModel\n|- m_lambda\l|+ ItuR1411LosPropagationLoss\lModel()\l+ ~ItuR1411LosPropagationLoss\lModel()\l+ SetFrequency()\l+ GetLoss()\l+ GetTypeId()\l- ItuR1411LosPropagationLoss\lModel()\l- operator=()\l- DoCalcRxPower()\l- DoAssignStreams()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/da8/classns3_1_1ItuR1411LosPropagationLossModel.html",tooltip="the ITU-R 1411 LOS propagation model "];
  Node1 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node17 [label="{ns3::ItuR1411NlosOverRooftop\lPropagationLossModel\n|- m_frequency\l- m_lambda\l- m_environment\l- m_citySize\l- m_rooftopHeight\l- m_streetsOrientation\l- m_streetsWidth\l- m_buildingsExtend\l- m_buildingSeparation\l|+ ItuR1411NlosOverRooftopPropagation\lLossModel()\l+ ~ItuR1411NlosOverRooftop\lPropagationLossModel()\l+ SetFrequency()\l+ GetLoss()\l+ GetTypeId()\l- ItuR1411NlosOverRooftopPropagation\lLossModel()\l- operator=()\l- DoCalcRxPower()\l- DoAssignStreams()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d73/classns3_1_1ItuR1411NlosOverRooftopPropagationLossModel.html",tooltip="the ITU-R 1411 NLOS over rooftop propagation model "];
  Node1 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node18 [label="{ns3::JakesPropagationLoss\lModel\n|- m_uniformVariable\l- m_propagationCache\l|+ JakesPropagationLossModel()\l+ ~JakesPropagationLossModel()\l+ GetTypeId()\l- JakesPropagationLossModel()\l- operator=()\l- DoCalcRxPower()\l- DoAssignStreams()\l- GetUniformRandomVariable()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d0/dd8/classns3_1_1JakesPropagationLossModel.html",tooltip="a Jakes narrowband propagation model. Symmetrical cache for JakesProcess "];
  Node1 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node19 [label="{ns3::Kun2600MhzPropagation\lLossModel\n||+ Kun2600MhzPropagationLoss\lModel()\l+ ~Kun2600MhzPropagationLoss\lModel()\l+ GetLoss()\l+ GetTypeId()\l- Kun2600MhzPropagationLoss\lModel()\l- operator=()\l- DoCalcRxPower()\l- DoAssignStreams()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/d8c/classns3_1_1Kun2600MhzPropagationLossModel.html",tooltip="Empirical propagation model for the 2.6 GHz frequency. "];
  Node1 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node20 [label="{ns3::LogDistancePropagation\lLossModel\n|- m_exponent\l- m_referenceDistance\l- m_referenceLoss\l|+ LogDistancePropagationLoss\lModel()\l+ SetPathLossExponent()\l+ GetPathLossExponent()\l+ SetReference()\l+ GetTypeId()\l- LogDistancePropagationLoss\lModel()\l- operator=()\l- DoCalcRxPower()\l- DoAssignStreams()\l- CreateDefaultReference()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/dab/classns3_1_1LogDistancePropagationLossModel.html",tooltip="a log distance propagation model. "];
  Node1 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node21 [label="{ns3::MatrixPropagationLoss\lModel\n|- m_default\l- m_loss\l|+ MatrixPropagationLossModel()\l+ ~MatrixPropagationLossModel()\l+ SetLoss()\l+ SetDefaultLoss()\l+ GetTypeId()\l- MatrixPropagationLossModel()\l- operator=()\l- DoCalcRxPower()\l- DoAssignStreams()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/dd7/classns3_1_1MatrixPropagationLossModel.html",tooltip="The propagation loss is fixed for each pair of nodes and doesn&#39;t depend on their actual positions..."];
  Node1 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node22 [label="{ns3::NakagamiPropagation\lLossModel\n|- m_distance1\l- m_distance2\l- m_m0\l- m_m1\l- m_m2\l- m_erlangRandomVariable\l- m_gammaRandomVariable\l|+ NakagamiPropagationLossModel()\l+ GetTypeId()\l- NakagamiPropagationLossModel()\l- operator=()\l- DoCalcRxPower()\l- DoAssignStreams()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/d69/classns3_1_1NakagamiPropagationLossModel.html",tooltip="Nakagami-m fast fading propagation loss model. "];
  Node1 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node23 [label="{ns3::OkumuraHataPropagation\lLossModel\n|- m_environment\l- m_citySize\l- m_frequency\l|+ OkumuraHataPropagationLoss\lModel()\l+ ~OkumuraHataPropagationLoss\lModel()\l+ GetLoss()\l+ GetTypeId()\l- OkumuraHataPropagationLoss\lModel()\l- operator=()\l- DoCalcRxPower()\l- DoAssignStreams()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/df9/classns3_1_1OkumuraHataPropagationLossModel.html",tooltip="this class implements the Okumura Hata propagation loss model "];
  Node1 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node24 [label="{ns3::RandomPropagationLoss\lModel\n|- m_variable\l|+ RandomPropagationLossModel()\l+ ~RandomPropagationLossModel()\l+ GetTypeId()\l- RandomPropagationLossModel()\l- operator=()\l- DoCalcRxPower()\l- DoAssignStreams()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/d2f/classns3_1_1RandomPropagationLossModel.html",tooltip="The propagation loss follows a random distribution. "];
  Node1 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node25 [label="{ns3::RangePropagationLoss\lModel\n|- m_range\l|+ RangePropagationLossModel()\l+ GetTypeId()\l- RangePropagationLossModel()\l- operator=()\l- DoCalcRxPower()\l- DoAssignStreams()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d95/classns3_1_1RangePropagationLossModel.html",tooltip="The propagation loss depends only on the distance (range) between transmitter and receiver..."];
  Node1 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node26 [label="{ns3::ThreeLogDistancePropagation\lLossModel\n|- m_distance0\l- m_distance1\l- m_distance2\l- m_exponent0\l- m_exponent1\l- m_exponent2\l- m_referenceLoss\l|+ ThreeLogDistancePropagation\lLossModel()\l+ GetTypeId()\l- ThreeLogDistancePropagation\lLossModel()\l- operator=()\l- DoCalcRxPower()\l- DoAssignStreams()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/d93/classns3_1_1ThreeLogDistancePropagationLossModel.html",tooltip="A log distance path loss propagation model with three distance fields. This model is the same as ns3:..."];
  Node1 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node27 [label="{ns3::TwoRayGroundPropagation\lLossModel\n|- m_lambda\l- m_frequency\l- m_systemLoss\l- m_minDistance\l- m_heightAboveZ\l|+ TwoRayGroundPropagationLoss\lModel()\l+ SetFrequency()\l+ SetSystemLoss()\l+ SetMinDistance()\l+ GetMinDistance()\l+ GetFrequency()\l+ GetSystemLoss()\l+ SetHeightAboveZ()\l+ GetTypeId()\l- TwoRayGroundPropagationLoss\lModel()\l- operator=()\l- DoCalcRxPower()\l- DoAssignStreams()\l- DbmToW()\l- DbmFromW()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/d18/classns3_1_1TwoRayGroundPropagationLossModel.html",tooltip="a Two-Ray Ground propagation loss model ported from NS2 "];
}
