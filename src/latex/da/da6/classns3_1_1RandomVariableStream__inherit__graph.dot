digraph "ns3::RandomVariableStream"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{ns3::RandomVariableStream\n|- m_rng\l- m_isAntithetic\l- m_stream\l|+ RandomVariableStream()\l+ ~RandomVariableStream()\l+ SetStream()\l+ GetStream()\l+ SetAntithetic()\l+ IsAntithetic()\l+ GetValue()\l+ GetInteger()\l+ GetTypeId()\l# Peek()\l- RandomVariableStream()\l- operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{ns3::Object\n|- m_tid\l- m_disposed\l- m_initialized\l- m_aggregates\l- m_getObjectCount\l|+ Object()\l+ ~Object()\l+ GetInstanceTypeId()\l+ GetObject()\l+ GetObject()\l+ Dispose()\l+ AggregateObject()\l+ GetAggregateIterator()\l+ Initialize()\l+ IsInitialized()\l+ GetTypeId()\l# NotifyNewAggregate()\l# DoInitialize()\l# DoDispose()\l# Object()\l- DoGetObject()\l- Check()\l- CheckLoose()\l- SetTypeId()\l- Construct()\l- UpdateSortedArray()\l- DoDelete()\l* CopyObject\l* CopyObject\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d77/classns3_1_1Object.html",tooltip="A base class which provides memory management and object aggregation. "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{ns3::SimpleRefCount\l\< Object, ObjectBase,\l ObjectDeleter \>\n|- m_count\l|+ SimpleRefCount()\l+ SimpleRefCount()\l+ operator=()\l+ Ref()\l+ Unref()\l+ GetReferenceCount()\l+ Cleanup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da1/classns3_1_1SimpleRefCount.html"];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{ns3::ObjectBase\n||+ ~ObjectBase()\l+ GetInstanceTypeId()\l+ SetAttribute()\l+ SetAttributeFailSafe()\l+ GetAttribute()\l+ GetAttributeFailSafe()\l+ TraceConnect()\l+ TraceConnectWithoutContext()\l+ TraceDisconnect()\l+ TraceDisconnectWithoutContext()\l+ GetTypeId()\l# NotifyConstructionCompleted()\l# ConstructSelf()\l- DoSet()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/dac/classns3_1_1ObjectBase.html",tooltip="Anchor the ns-3 type and attribute system. "];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 [label="{ns3::ConstantRandomVariable\n|- m_constant\l|+ ConstantRandomVariable()\l+ GetConstant()\l+ GetValue()\l+ GetInteger()\l+ GetValue()\l+ GetInteger()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/dcc/classns3_1_1ConstantRandomVariable.html",tooltip="The Random Number Generator (RNG) that returns a constant. "];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node6 [label="{ns3::DeterministicRandom\lVariable\n|- m_count\l- m_next\l- m_data\l|+ DeterministicRandomVariable()\l+ ~DeterministicRandomVariable()\l+ SetValueArray()\l+ GetValue()\l+ GetInteger()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/df9/classns3_1_1DeterministicRandomVariable.html",tooltip="The Random Number Generator (RNG) that returns a predetermined sequence. "];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node7 [label="{ns3::EmpiricalRandomVariable\n|- m_validated\l- m_emp\l|+ EmpiricalRandomVariable()\l+ CDF()\l+ GetValue()\l+ GetInteger()\l+ GetTypeId()\l- Validate()\l- Interpolate()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/d94/classns3_1_1EmpiricalRandomVariable.html",tooltip="The Random Number Generator (RNG) that has a specified empirical distribution. "];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node8 [label="{ns3::ErlangRandomVariable\n|- m_k\l- m_lambda\l|+ ErlangRandomVariable()\l+ GetK()\l+ GetLambda()\l+ GetValue()\l+ GetInteger()\l+ GetValue()\l+ GetInteger()\l+ GetTypeId()\l- GetExponentialValue()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/d2e/classns3_1_1ErlangRandomVariable.html",tooltip="The Erlang distribution Random Number Generator (RNG) that allows stream numbers to be set determinis..."];
  Node1 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node9 [label="{ns3::ExponentialRandomVariable\n|- m_mean\l- m_bound\l|+ ExponentialRandomVariable()\l+ GetMean()\l+ GetBound()\l+ GetValue()\l+ GetInteger()\l+ GetValue()\l+ GetInteger()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d98/classns3_1_1ExponentialRandomVariable.html",tooltip="The exponential distribution Random Number Generator (RNG). "];
  Node1 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node10 [label="{ns3::GammaRandomVariable\n|- m_alpha\l- m_beta\l- m_nextValid\l- m_next\l|+ GammaRandomVariable()\l+ GetAlpha()\l+ GetBeta()\l+ GetValue()\l+ GetInteger()\l+ GetValue()\l+ GetInteger()\l+ GetTypeId()\l- GetNormalValue()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d35/classns3_1_1GammaRandomVariable.html",tooltip="The gamma distribution Random Number Generator (RNG) that allows stream numbers to be set determinist..."];
  Node1 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node11 [label="{ns3::LogNormalRandomVariable\n|- m_mu\l- m_sigma\l|+ LogNormalRandomVariable()\l+ GetMu()\l+ GetSigma()\l+ GetValue()\l+ GetInteger()\l+ GetValue()\l+ GetInteger()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d92/classns3_1_1LogNormalRandomVariable.html",tooltip="The log-normal distribution Random Number Generator (RNG) that allows stream numbers to be set determ..."];
  Node1 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node12 [label="{ns3::NormalRandomVariable\n|+ INFINITE_VALUE\l- m_mean\l- m_variance\l- m_bound\l- m_nextValid\l- m_next\l|+ NormalRandomVariable()\l+ GetMean()\l+ GetVariance()\l+ GetBound()\l+ GetValue()\l+ GetInteger()\l+ GetValue()\l+ GetInteger()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/d87/classns3_1_1NormalRandomVariable.html",tooltip="The normal (Gaussian) distribution Random Number Generator (RNG) that allows stream numbers to be set..."];
  Node1 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node13 [label="{ns3::ParetoRandomVariable\n|- m_mean\l- m_scale\l- m_shape\l- m_bound\l|+ ParetoRandomVariable()\l+ GetMean()\l+ GetScale()\l+ GetShape()\l+ GetBound()\l+ GetValue()\l+ GetInteger()\l+ GetValue()\l+ GetInteger()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/d2e/classns3_1_1ParetoRandomVariable.html",tooltip="The Pareto distribution Random Number Generator (RNG). "];
  Node1 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node14 [label="{ns3::SequentialRandomVariable\n|- m_min\l- m_max\l- m_increment\l- m_consecutive\l- m_current\l- m_currentConsecutive\l- m_isCurrentSet\l|+ SequentialRandomVariable()\l+ GetMin()\l+ GetMax()\l+ GetIncrement()\l+ GetConsecutive()\l+ GetValue()\l+ GetInteger()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/df4/classns3_1_1SequentialRandomVariable.html",tooltip="The Random Number Generator (RNG) that returns a pattern of sequential values. "];
  Node1 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node15 [label="{ns3::TriangularRandomVariable\n|- m_mean\l- m_min\l- m_max\l|+ TriangularRandomVariable()\l+ GetMean()\l+ GetMin()\l+ GetMax()\l+ GetValue()\l+ GetInteger()\l+ GetValue()\l+ GetInteger()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d48/classns3_1_1TriangularRandomVariable.html",tooltip="The triangular distribution Random Number Generator (RNG) that allows stream numbers to be set determ..."];
  Node1 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node16 [label="{ns3::UniformRandomVariable\n||+ UniformRandomVariable()\l+ GetMin()\l+ GetMax()\l+ GetValue()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d0/d5b/classns3_1_1UniformRandomVariable.html",tooltip="The uniform distribution Random Number Generator (RNG). "];
  Node1 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node17 [label="{ns3::WeibullRandomVariable\n|- m_scale\l- m_shape\l- m_bound\l|+ WeibullRandomVariable()\l+ GetScale()\l+ GetShape()\l+ GetBound()\l+ GetValue()\l+ GetInteger()\l+ GetValue()\l+ GetInteger()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/daf/classns3_1_1WeibullRandomVariable.html",tooltip="The Weibull distribution Random Number Generator (RNG) that allows stream numbers to be set determini..."];
  Node1 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node18 [label="{ns3::ZetaRandomVariable\n|- m_alpha\l- m_b\l|+ ZetaRandomVariable()\l+ GetAlpha()\l+ GetValue()\l+ GetInteger()\l+ GetValue()\l+ GetInteger()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/dd8/classns3_1_1ZetaRandomVariable.html",tooltip="The zeta distribution Random Number Generator (RNG) that allows stream numbers to be set deterministi..."];
  Node1 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node19 [label="{ns3::ZipfRandomVariable\n|- m_n\l- m_alpha\l- m_c\l|+ ZipfRandomVariable()\l+ GetN()\l+ GetAlpha()\l+ GetValue()\l+ GetInteger()\l+ GetValue()\l+ GetInteger()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/d1c/classns3_1_1ZipfRandomVariable.html",tooltip="The Zipf distribution Random Number Generator (RNG) that allows stream numbers to be set deterministi..."];
}
