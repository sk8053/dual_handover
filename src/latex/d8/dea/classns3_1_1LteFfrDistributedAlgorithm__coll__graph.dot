digraph "ns3::LteFfrDistributedAlgorithm"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{ns3::LteFfrDistributedAlgorithm\n|- m_dlRbgMap\l- m_ulRbgMap\l- m_edgeRbNum\l- m_dlEdgeRbgMap\l- m_ulEdgeRbgMap\l- m_ues\l- m_egdeSubBandRsrqThreshold\l- m_centerPowerOffset\l- m_edgePowerOffset\l- m_centerAreaTpc\land 8 more...\l|+ LteFfrDistributedAlgorithm()\l+ ~LteFfrDistributedAlgorithm()\l+ SetLteFfrSapUser()\l+ GetLteFfrSapProvider()\l+ SetLteFfrRrcSapUser()\l+ GetLteFfrRrcSapProvider()\l+ GetTypeId()\l# DoInitialize()\l# DoDispose()\l# Reconfigure()\l# DoGetAvailableDlRbg()\l# DoIsDlRbgAvailableForUe()\l# DoGetAvailableUlRbg()\l# DoIsUlRbgAvailableForUe()\l# DoReportDlCqiInfo()\l# DoReportUlCqiInfo()\l# DoReportUlCqiInfo()\l# DoGetTpc()\l# DoGetMinContinuousUlBandwidth()\l# DoReportUeMeas()\l# DoRecvLoadInformation()\l- SetDownlinkConfiguration()\l- SetUplinkConfiguration()\l- InitializeDownlinkRbgMaps()\l- InitializeUplinkRbgMaps()\l- UpdateNeighbourMeasurements()\l- Calculate()\l- SendLoadInformation()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{ns3::LteFfrAlgorithm\n|# m_cellId\l# m_dlBandwidth\l# m_ulBandwidth\l# m_frCellTypeId\l# m_enabledInUplink\l# m_needReconfiguration\l|+ LteFfrAlgorithm()\l+ ~LteFfrAlgorithm()\l+ SetLteFfrSapUser()\l+ SetLteFfrRrcSapUser()\l+ GetLteFfrSapProvider()\l+ GetLteFfrRrcSapProvider()\l+ GetUlBandwidth()\l+ SetUlBandwidth()\l+ GetDlBandwidth()\l+ SetDlBandwidth()\l+ SetFrCellTypeId()\l+ GetFrCellTypeId()\l+ GetTypeId()\l# DoDispose()\l# Reconfigure()\l# DoGetAvailableDlRbg()\l# DoIsDlRbgAvailableForUe()\l# DoGetAvailableUlRbg()\l# DoIsUlRbgAvailableForUe()\l# DoReportDlCqiInfo()\l# DoReportUlCqiInfo()\l# DoReportUlCqiInfo()\l# DoGetTpc()\land 6 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/dd1/classns3_1_1LteFfrAlgorithm.html",tooltip="The abstract base class of a Frequency Reuse algorithm. "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{ns3::Object\n|- m_disposed\l- m_initialized\l- m_getObjectCount\l|+ Object()\l+ ~Object()\l+ GetInstanceTypeId()\l+ GetObject()\l+ GetObject()\l+ Dispose()\l+ AggregateObject()\l+ GetAggregateIterator()\l+ Initialize()\l+ IsInitialized()\l+ GetTypeId()\l# NotifyNewAggregate()\l# DoInitialize()\l# DoDispose()\l# Object()\l- DoGetObject()\l- Check()\l- CheckLoose()\l- SetTypeId()\l- Construct()\l- UpdateSortedArray()\l- DoDelete()\l* CopyObject\l* CopyObject\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d77/classns3_1_1Object.html",tooltip="A base class which provides memory management and object aggregation. "];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{ns3::SimpleRefCount\l\< Object, ObjectBase,\l ObjectDeleter \>\n|- m_count\l|+ SimpleRefCount()\l+ SimpleRefCount()\l+ operator=()\l+ Ref()\l+ Unref()\l+ GetReferenceCount()\l+ Cleanup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da1/classns3_1_1SimpleRefCount.html"];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 [label="{ns3::ObjectBase\n||+ ~ObjectBase()\l+ GetInstanceTypeId()\l+ SetAttribute()\l+ SetAttributeFailSafe()\l+ GetAttribute()\l+ GetAttributeFailSafe()\l+ TraceConnect()\l+ TraceConnectWithoutContext()\l+ TraceDisconnect()\l+ TraceDisconnectWithoutContext()\l+ GetTypeId()\l# NotifyConstructionCompleted()\l# ConstructSelf()\l- DoSet()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/dac/classns3_1_1ObjectBase.html",tooltip="Anchor the ns-3 type and attribute system. "];
  Node6 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -m_tid" ,arrowhead="odiamond"];
  Node6 [label="{ns3::TypeId\n|- m_tid\l|+ TypeId()\l+ GetParent()\l+ HasParent()\l+ IsChildOf()\l+ GetGroupName()\l+ GetName()\l+ GetHash()\l+ GetSize()\l+ HasConstructor()\l+ GetAttributeN()\land 26 more...\l+ LookupByName()\l+ LookupByNameFailSafe()\l+ LookupByHash()\l+ LookupByHashFailSafe()\l+ GetRegisteredN()\l+ GetRegistered()\l- TypeId()\l- DoAddConstructor()\l* operator==\l* operator!=\l* operator\<\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d11/classns3_1_1TypeId.html",tooltip="a unique identifier for an interface. "];
  Node7 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -m_aggregates" ,arrowhead="odiamond"];
  Node7 [label="{ns3::Object::Aggregates\n|+ n\l|}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/de9/structns3_1_1Object_1_1Aggregates.html"];
  Node3 -> Node7 [color="grey25",fontsize="10",style="solid",label=" +buffer" ,arrowhead="odiamond"];
  Node8 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_ffrSapUser" ,arrowhead="odiamond"];
  Node8 [label="{ns3::LteFfrSapUser\n||+ ~LteFfrSapUser()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/dce/classns3_1_1LteFfrSapUser.html",tooltip="Service Access Point (SAP) offered by the eNodeB RRC instance to the Frequency Reuse algorithm instan..."];
  Node9 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_calculationEvent" ,arrowhead="odiamond"];
  Node9 [label="{ns3::EventId\n|- m_ts\l- m_context\l- m_uid\l|+ EventId()\l+ EventId()\l+ Cancel()\l+ IsExpired()\l+ IsRunning()\l+ PeekEventImpl()\l+ GetTs()\l+ GetContext()\l+ GetUid()\l* PeekEventImpl()\l* GetTs()\l* GetContext()\l* GetUid()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/df8/classns3_1_1EventId.html",tooltip="An identifier for simulation events. "];
  Node10 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -m_eventImpl" ,arrowhead="odiamond"];
  Node10 [label="{ns3::Ptr\< ns3::EventImpl \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node11 -> Node10 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node11 [label="{ns3::EventImpl\n|- m_cancel\l|+ EventImpl()\l+ ~EventImpl()\l+ Invoke()\l+ Cancel()\l+ IsCancelled()\l# Notify()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/def/classns3_1_1EventImpl.html",tooltip="A simulation event. "];
  Node12 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node12 [label="{ns3::SimpleRefCount\l\< EventImpl \>\n|- m_count\l|+ SimpleRefCount()\l+ SimpleRefCount()\l+ operator=()\l+ Ref()\l+ Unref()\l+ GetReferenceCount()\l+ Cleanup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da1/classns3_1_1SimpleRefCount.html"];
  Node13 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node13 [label="{ns3::empty\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d6a/classns3_1_1empty.html",tooltip="make Callback use a separate empty type "];
  Node14 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_calculationInterval" ,arrowhead="odiamond"];
  Node14 [label="{ns3::Time\n|- m_data\l- g_markingTimes\l|+ operator=()\l+ Time()\l+ Time()\l+ Time()\l+ ~Time()\l+ IsZero()\l+ IsNegative()\l+ IsPositive()\l+ IsStrictlyNegative()\l+ IsStrictlyPositive()\l+ Compare()\l+ operator int64x64_t()\l+ As()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ GetYears()\l+ GetDays()\l+ GetHours()\l+ GetMinutes()\l+ GetSeconds()\l+ GetMilliSeconds()\l+ GetMicroSeconds()\l+ GetNanoSeconds()\l+ GetPicoSeconds()\l+ GetFemtoSeconds()\l+ GetTimeStep()\l+ GetDouble()\l+ GetInteger()\l+ ToInteger()\l+ ToDouble()\l+ To()\l+ Min()\l+ Max()\l+ SetResolution()\l+ GetResolution()\l+ From()\l+ StaticInit()\l+ FromInteger()\l+ FromDouble()\l+ From()\l- PeekResolution()\l- PeekInformation()\l- SetDefaultNsResolution()\l- SetResolution()\l- ClearMarkedTimes()\l- Mark()\l- Clear()\l- ConvertTimes()\l* operator==\l* operator!=\l* operator\<=\l* operator\>=\l* operator\<\l* operator\>\l* operator+\l* operator-\l* operator*\l* operator*\l* operator/\l* operator/\l* operator+=\l* operator-=\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* GetYears()\l* GetDays()\l* GetHours()\l* GetMinutes()\l* GetSeconds()\l* GetMilliSeconds()\l* GetMicroSeconds()\l* GetNanoSeconds()\l* GetPicoSeconds()\l* GetFemtoSeconds()\l* GetTimeStep()\l* GetDouble()\l* GetInteger()\l* ToInteger()\l* ToDouble()\l* To()\l* FromInteger()\l* FromDouble()\l* From()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d04/classns3_1_1Time.html",tooltip="Simulation virtual time values and global simulation resolution. "];
  Node15 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_ffrSapProvider" ,arrowhead="odiamond"];
  Node15 [label="{ns3::LteFfrSapProvider\n||+ ~LteFfrSapProvider()\l+ GetAvailableDlRbg()\l+ IsDlRbgAvailableForUe()\l+ GetAvailableUlRbg()\l+ IsUlRbgAvailableForUe()\l+ ReportDlCqiInfo()\l+ ReportUlCqiInfo()\l+ ReportUlCqiInfo()\l+ GetTpc()\l+ GetMinContinuousUlBandwidth()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/dab/classns3_1_1LteFfrSapProvider.html",tooltip="Service Access Point (SAP) offered by the Frequency Reuse algorithm instance to the MAC Scheduler ins..."];
  Node16 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_ffrRrcSapProvider" ,arrowhead="odiamond"];
  Node16 [label="{ns3::LteFfrRrcSapProvider\n||+ ~LteFfrRrcSapProvider()\l+ SetCellId()\l+ SetBandwidth()\l+ ReportUeMeas()\l+ RecvLoadInformation()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/d57/classns3_1_1LteFfrRrcSapProvider.html",tooltip="Service Access Point (SAP) offered by the Frequency Reuse algorithm instance to the eNodeB RRC instan..."];
  Node17 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_ffrRrcSapUser" ,arrowhead="odiamond"];
  Node17 [label="{ns3::LteFfrRrcSapUser\n||+ ~LteFfrRrcSapUser()\l+ AddUeMeasReportConfigForFfr()\l+ SetPdschConfigDedicated()\l+ SendLoadInformation()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/d7f/classns3_1_1LteFfrRrcSapUser.html",tooltip="Service Access Point (SAP) offered by the eNodeB RRC instance to the Frequency Reuse algorithm instan..."];
}
