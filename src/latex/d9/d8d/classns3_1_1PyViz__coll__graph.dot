digraph "ns3::PyViz"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{ns3::PyViz\n|- m_packetCaptureOptions\l- m_pauseMessages\l- m_txRecords\l- m_transmissionSamples\l- m_packetDrops\l- m_nodesOfInterest\l- m_packetsOfInterest\l- m_lastPackets\l- m_nodesStatistics\l- m_stop\l|+ PyViz()\l+ ~PyViz()\l+ RegisterDropTracePath()\l+ RegisterCsmaLikeDevice()\l+ RegisterWifiLikeDevice()\l+ RegisterPointToPointLike\lDevice()\l+ SimulatorRunUntil()\l+ GetPauseMessages()\l+ GetTransmissionSamples()\l+ GetPacketDropSamples()\l+ GetLastPackets()\l+ SetNodesOfInterest()\l+ GetNodesStatistics()\l+ SetPacketCaptureOptions()\l+ Pause()\l+ LineClipping()\l- GetPacketCaptureOptions()\l- TraceNetDevTxCommon()\l- TraceNetDevRxCommon()\l- TraceNetDevTxWifi()\l- TraceNetDevRxWifi()\l- TraceDevQueueDrop()\l- TraceIpv4Drop()\l- TraceNetDevTxCsma()\l- TraceNetDevRxCsma()\l- TraceNetDevPromiscRxCsma()\land 9 more...\l- FilterPacket()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_runUntil" ,arrowhead="odiamond"];
  Node2 [label="{ns3::Time\n|- m_data\l- g_markingTimes\l|+ operator=()\l+ Time()\l+ Time()\l+ Time()\l+ ~Time()\l+ IsZero()\l+ IsNegative()\l+ IsPositive()\l+ IsStrictlyNegative()\l+ IsStrictlyPositive()\l+ Compare()\l+ operator int64x64_t()\l+ As()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ GetYears()\l+ GetDays()\l+ GetHours()\l+ GetMinutes()\l+ GetSeconds()\l+ GetMilliSeconds()\l+ GetMicroSeconds()\l+ GetNanoSeconds()\l+ GetPicoSeconds()\l+ GetFemtoSeconds()\l+ GetTimeStep()\l+ GetDouble()\l+ GetInteger()\l+ ToInteger()\l+ ToDouble()\l+ To()\l+ Min()\l+ Max()\l+ SetResolution()\l+ GetResolution()\l+ From()\l+ StaticInit()\l+ FromInteger()\l+ FromDouble()\l+ From()\l- PeekResolution()\l- PeekInformation()\l- SetDefaultNsResolution()\l- SetResolution()\l- ClearMarkedTimes()\l- Mark()\l- Clear()\l- ConvertTimes()\l* operator==\l* operator!=\l* operator\<=\l* operator\>=\l* operator\<\l* operator\>\l* operator+\l* operator-\l* operator*\l* operator*\l* operator/\l* operator/\l* operator+=\l* operator-=\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* GetYears()\l* GetDays()\l* GetHours()\l* GetMinutes()\l* GetSeconds()\l* GetMilliSeconds()\l* GetMicroSeconds()\l* GetNanoSeconds()\l* GetPicoSeconds()\l* GetFemtoSeconds()\l* GetTimeStep()\l* GetDouble()\l* GetInteger()\l* ToInteger()\l* ToDouble()\l* To()\l* FromInteger()\l* FromDouble()\l* From()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d04/classns3_1_1Time.html",tooltip="Simulation virtual time values and global simulation resolution. "];
}
