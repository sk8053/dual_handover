digraph "ns3::Channel"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{ns3::Channel\n|- m_id\l|+ Channel()\l+ ~Channel()\l+ GetId()\l+ GetNDevices()\l+ GetDevice()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{ns3::Object\n|- m_tid\l- m_disposed\l- m_initialized\l- m_aggregates\l- m_getObjectCount\l|+ Object()\l+ ~Object()\l+ GetInstanceTypeId()\l+ GetObject()\l+ GetObject()\l+ Dispose()\l+ AggregateObject()\l+ GetAggregateIterator()\l+ Initialize()\l+ IsInitialized()\l+ GetTypeId()\l# NotifyNewAggregate()\l# DoInitialize()\l# DoDispose()\l# Object()\l- DoGetObject()\l- Check()\l- CheckLoose()\l- SetTypeId()\l- Construct()\l- UpdateSortedArray()\l- DoDelete()\l* CopyObject\l* CopyObject\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d77/classns3_1_1Object.html",tooltip="A base class which provides memory management and object aggregation. "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{ns3::SimpleRefCount\l\< Object, ObjectBase,\l ObjectDeleter \>\n|- m_count\l|+ SimpleRefCount()\l+ SimpleRefCount()\l+ operator=()\l+ Ref()\l+ Unref()\l+ GetReferenceCount()\l+ Cleanup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da1/classns3_1_1SimpleRefCount.html"];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{ns3::ObjectBase\n||+ ~ObjectBase()\l+ GetInstanceTypeId()\l+ SetAttribute()\l+ SetAttributeFailSafe()\l+ GetAttribute()\l+ GetAttributeFailSafe()\l+ TraceConnect()\l+ TraceConnectWithoutContext()\l+ TraceDisconnect()\l+ TraceDisconnectWithoutContext()\l+ GetTypeId()\l# NotifyConstructionCompleted()\l# ConstructSelf()\l- DoSet()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/dac/classns3_1_1ObjectBase.html",tooltip="Anchor the ns-3 type and attribute system. "];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 [label="{ns3::BridgeChannel\n|- m_bridgedChannels\l|+ BridgeChannel()\l+ ~BridgeChannel()\l+ AddChannel()\l+ GetNDevices()\l+ GetDevice()\l+ GetTypeId()\l- BridgeChannel()\l- operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d0/d12/classns3_1_1BridgeChannel.html",tooltip="Virtual channel implementation for bridges (BridgeNetDevice). "];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node6 [label="{ns3::CsmaChannel\n|- m_bps\l- m_delay\l- m_deviceList\l- m_currentPkt\l- m_currentSrc\l- m_state\l|+ CsmaChannel()\l+ ~CsmaChannel()\l+ Attach()\l+ Detach()\l+ Detach()\l+ Reattach()\l+ Reattach()\l+ TransmitStart()\l+ TransmitEnd()\l+ PropagationCompleteEvent()\land 10 more...\l+ GetTypeId()\l- CsmaChannel()\l- operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/d86/classns3_1_1CsmaChannel.html",tooltip="Csma Channel. "];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node7 [label="{ns3::PointToPointChannel\n|- m_delay\l- m_nDevices\l- m_txrxPointToPoint\l- m_link\l- N_DEVICES\l|+ PointToPointChannel()\l+ Attach()\l+ TransmitStart()\l+ GetNDevices()\l+ GetPointToPointDevice()\l+ GetDevice()\l+ GetTypeId()\l# GetDelay()\l# IsInitialized()\l# GetSource()\l# GetDestination()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/da8/classns3_1_1PointToPointChannel.html",tooltip="Simple Point To Point Channel. "];
  Node7 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node8 [label="{ns3::PointToPointRemoteChannel\n||+ PointToPointRemoteChannel()\l+ ~PointToPointRemoteChannel()\l+ TransmitStart()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/de4/classns3_1_1PointToPointRemoteChannel.html",tooltip="A Remote Point-To-Point Channel. "];
  Node1 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node9 [label="{ns3::SimpleChannel\n|- m_delay\l- m_devices\l- m_blackListedDevices\l|+ SimpleChannel()\l+ Send()\l+ Add()\l+ BlackList()\l+ UnBlackList()\l+ GetNDevices()\l+ GetDevice()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/db9/classns3_1_1SimpleChannel.html",tooltip="A simple channel, for simple things and testing. "];
  Node9 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node10 [label="{ns3::ErrorChannel\n|- m_devices\l- m_jumpingTime\l- m_jumpingState\l- m_jumping\l- m_duplicateTime\l- m_duplicate\l- m_duplicateState\l|+ ErrorChannel()\l+ Send()\l+ Add()\l+ GetNDevices()\l+ GetDevice()\l+ SetJumpingTime()\l+ SetJumpingMode()\l+ SetDuplicateTime()\l+ SetDuplicateMode()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d88/classns3_1_1ErrorChannel.html",tooltip="A Error channel, introducing deterministic delays on even/odd packets. Used for testing. "];
  Node1 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node11 [label="{ns3::SpectrumChannel\n||+ ~SpectrumChannel()\l+ AddPropagationLossModel()\l+ AddSpectrumPropagationLoss\lModel()\l+ SetPropagationDelayModel()\l+ StartTx()\l+ AddRx()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d59/classns3_1_1SpectrumChannel.html"];
  Node11 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node12 [label="{ns3::MultiModelSpectrumChannel\n|- m_propagationDelay\l- m_propagationLoss\l- m_spectrumPropagationLoss\l- m_txSpectrumModelInfoMap\l- m_rxSpectrumModelInfoMap\l- m_numDevices\l- m_maxLossDb\l- m_pathLossTrace\l|+ MultiModelSpectrumChannel()\l+ AddPropagationLossModel()\l+ AddSpectrumPropagationLoss\lModel()\l+ SetPropagationDelayModel()\l+ AddRx()\l+ StartTx()\l+ GetNDevices()\l+ GetDevice()\l+ GetSpectrumPropagationLoss\lModel()\l+ GetTypeId()\l# DoDispose()\l- FindAndEventuallyAddTxSpectrum\lModel()\l- StartRx()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/d89/classns3_1_1MultiModelSpectrumChannel.html"];
  Node11 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node13 [label="{ns3::SingleModelSpectrum\lChannel\n|- m_phyList\l- m_spectrumModel\l- m_propagationDelay\l- m_propagationLoss\l- m_spectrumPropagationLoss\l- m_maxLossDb\l- m_pathLossTrace\l|+ SingleModelSpectrumChannel()\l+ AddPropagationLossModel()\l+ AddSpectrumPropagationLoss\lModel()\l+ SetPropagationDelayModel()\l+ AddRx()\l+ StartTx()\l+ GetNDevices()\l+ GetDevice()\l+ GetSpectrumPropagationLoss\lModel()\l+ GetTypeId()\l- DoDispose()\l- StartRx()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d90/classns3_1_1SingleModelSpectrumChannel.html",tooltip="SpectrumChannel implementation which handles a single spectrum model. "];
  Node1 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node14 [label="{ns3::UanChannel\n|- m_devList\l- m_prop\l- m_noise\l- m_cleared\l|+ UanChannel()\l+ ~UanChannel()\l+ GetNDevices()\l+ GetDevice()\l+ TxPacket()\l+ AddDevice()\l+ SetPropagationModel()\l+ SetNoiseModel()\l+ GetNoiseDbHz()\l+ Clear()\l+ GetTypeId()\l# DoDispose()\l- SendUp()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/dec/classns3_1_1UanChannel.html"];
  Node1 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node15 [label="{ns3::WimaxChannel\n||+ WimaxChannel()\l+ ~WimaxChannel()\l+ Attach()\l+ GetNDevices()\l+ GetDevice()\l+ AssignStreams()\l+ GetTypeId()\l- DoAttach()\l- DoGetNDevices()\l- DoGetDevice()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/d3a/classns3_1_1WimaxChannel.html"];
  Node15 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node16 [label="{ns3::SimpleOfdmWimaxChannel\n|- m_phyList\l- m_loss\l|+ SimpleOfdmWimaxChannel()\l+ ~SimpleOfdmWimaxChannel()\l+ SimpleOfdmWimaxChannel()\l+ Send()\l+ SetPropagationModel()\l+ AssignStreams()\l+ GetTypeId()\l- DoAttach()\l- DoGetNDevices()\l- EndSendDummyBlock()\l- DoGetDevice()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/dde/classns3_1_1SimpleOfdmWimaxChannel.html",tooltip="SimpleOfdmWimaxChannel class. "];
  Node1 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node17 [label="{ns3::YansWifiChannel\n|- m_phyList\l- m_loss\l- m_delay\l|+ YansWifiChannel()\l+ ~YansWifiChannel()\l+ GetNDevices()\l+ GetDevice()\l+ Add()\l+ SetPropagationLossModel()\l+ SetPropagationDelayModel()\l+ Send()\l+ AssignStreams()\l+ GetTypeId()\l- Receive()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/df5/classns3_1_1YansWifiChannel.html",tooltip="a channel to interconnect ns3::YansWifiPhy objects.This class is expected to be used in tandem with t..."];
}
