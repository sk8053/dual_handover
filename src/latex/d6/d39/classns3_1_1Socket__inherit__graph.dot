digraph "ns3::Socket"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{ns3::Socket\n|# m_boundnetdevice\l# m_recvPktInfo\l# m_ipv6MulticastGroupAddress\l- m_connectionSucceeded\l- m_connectionFailed\l- m_normalClose\l- m_errorClose\l- m_connectionRequest\l- m_newConnectionCreated\l- m_dataSent\l- m_sendCb\l- m_receivedData\l- m_priority\land 11 more...\l|+ Socket()\l+ ~Socket()\l+ GetErrno()\l+ GetSocketType()\l+ GetNode()\l+ SetConnectCallback()\l+ SetCloseCallbacks()\l+ SetAcceptCallback()\l+ SetDataSentCallback()\l+ SetSendCallback()\land 51 more...\l+ GetTypeId()\l+ CreateSocket()\l+ IpTos2Priority()\l# NotifyConnectionSucceeded()\l# NotifyConnectionFailed()\l# NotifyNormalClose()\l# NotifyErrorClose()\l# NotifyConnectionRequest()\l# NotifyNewConnectionCreated()\l# NotifyDataSent()\l# NotifySend()\l# NotifyDataRecv()\l# DoDispose()\l# IsManualIpv6Tclass()\l# IsManualIpTtl()\l# IsManualIpv6HopLimit()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{ns3::Object\n|- m_tid\l- m_disposed\l- m_initialized\l- m_aggregates\l- m_getObjectCount\l|+ Object()\l+ ~Object()\l+ GetInstanceTypeId()\l+ GetObject()\l+ GetObject()\l+ Dispose()\l+ AggregateObject()\l+ GetAggregateIterator()\l+ Initialize()\l+ IsInitialized()\l+ GetTypeId()\l# NotifyNewAggregate()\l# DoInitialize()\l# DoDispose()\l# Object()\l- DoGetObject()\l- Check()\l- CheckLoose()\l- SetTypeId()\l- Construct()\l- UpdateSortedArray()\l- DoDelete()\l* CopyObject\l* CopyObject\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d77/classns3_1_1Object.html",tooltip="A base class which provides memory management and object aggregation. "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{ns3::SimpleRefCount\l\< Object, ObjectBase,\l ObjectDeleter \>\n|- m_count\l|+ SimpleRefCount()\l+ SimpleRefCount()\l+ operator=()\l+ Ref()\l+ Unref()\l+ GetReferenceCount()\l+ Cleanup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da1/classns3_1_1SimpleRefCount.html"];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{ns3::ObjectBase\n||+ ~ObjectBase()\l+ GetInstanceTypeId()\l+ SetAttribute()\l+ SetAttributeFailSafe()\l+ GetAttribute()\l+ GetAttributeFailSafe()\l+ TraceConnect()\l+ TraceConnectWithoutContext()\l+ TraceDisconnect()\l+ TraceDisconnectWithoutContext()\l+ GetTypeId()\l# NotifyConstructionCompleted()\l# ConstructSelf()\l- DoSet()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/dac/classns3_1_1ObjectBase.html",tooltip="Anchor the ns-3 type and attribute system. "];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 [label="{ns3::Ipv4RawSocketImpl\n|- m_err\l- m_node\l- m_src\l- m_dst\l- m_protocol\l- m_recv\l- m_shutdownSend\l- m_shutdownRecv\l- m_icmpFilter\l- m_iphdrincl\l|+ Ipv4RawSocketImpl()\l+ SetNode()\l+ GetErrno()\l+ GetSocketType()\l+ GetNode()\l+ Bind()\l+ Bind()\l+ Bind6()\l+ GetSockName()\l+ GetPeerName()\land 15 more...\l+ GetTypeId()\l- DoDispose()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/d84/classns3_1_1Ipv4RawSocketImpl.html",tooltip="IPv4 raw socket. "];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node6 [label="{ns3::Ipv6RawSocketImpl\n|- m_err\l- m_node\l- m_src\l- m_dst\l- m_protocol\l- m_data\l- m_shutdownSend\l- m_shutdownRecv\l- m_icmpFilter\l|+ Ipv6RawSocketImpl()\l+ ~Ipv6RawSocketImpl()\l+ SetNode()\l+ GetErrno()\l+ GetSocketType()\l+ GetNode()\l+ Bind()\l+ Bind()\l+ Bind6()\l+ GetSockName()\land 23 more...\l+ GetTypeId()\l- DoDispose()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/d7f/classns3_1_1Ipv6RawSocketImpl.html",tooltip="IPv6 raw socket. "];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node7 [label="{ns3::PacketSocket\n|- m_node\l- m_errno\l- m_shutdownSend\l- m_shutdownRecv\l- m_state\l- m_protocol\l- m_isSingleDevice\l- m_device\l- m_destAddr\l- m_deliveryQueue\l- m_rxAvailable\l- m_dropTrace\l- m_rcvBufSize\l|+ PacketSocket()\l+ ~PacketSocket()\l+ SetNode()\l+ GetErrno()\l+ GetSocketType()\l+ GetNode()\l+ Bind()\l+ Bind6()\l+ Bind()\l+ Close()\land 14 more...\l+ GetTypeId()\l- ForwardUp()\l- DoBind()\l- GetMinMtu()\l- DoDispose()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/d5c/classns3_1_1PacketSocket.html",tooltip="A PacketSocket is a link between an application and a net device. "];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node8 [label="{ns3::TcpSocket\n|+ TcpStateName\l|+ TcpSocket()\l+ ~TcpSocket()\l+ GetTypeId()\l- SetSndBufSize()\l- GetSndBufSize()\l- SetRcvBufSize()\l- GetRcvBufSize()\l- SetSegSize()\l- GetSegSize()\l- SetInitialSSThresh()\l- GetInitialSSThresh()\l- SetInitialCwnd()\l- GetInitialCwnd()\land 14 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/dc5/classns3_1_1TcpSocket.html",tooltip="(abstract) base class of all TcpSockets "];
  Node8 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node9 [label="{ns3::NscTcpSocketImpl\n|- m_delAckMaxCount\l- m_delAckTimeout\l- m_noDelay\l- m_endPoint\l- m_node\l- m_tcp\l- m_remoteAddress\l- m_remotePort\l- m_localAddress\l- m_localPort\land 26 more...\l|+ NscTcpSocketImpl()\l+ NscTcpSocketImpl()\l+ ~NscTcpSocketImpl()\l+ SetNode()\l+ SetTcp()\l+ GetErrno()\l+ GetSocketType()\l+ GetPeerName()\l+ GetNode()\l+ Bind()\land 16 more...\l+ GetTypeId()\l- NSCWakeup()\l- FinishBind()\l- ForwardUp()\l- Destroy()\l- SendPendingData()\l- ReadPendingData()\l- Accept()\l- CompleteFork()\l- ConnectionSucceeded()\l- Copy()\land 27 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/d8e/classns3_1_1NscTcpSocketImpl.html",tooltip="Socket logic for the NSC TCP sockets. "];
  Node8 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node10 [label="{ns3::TcpSocketBase\n|+ m_cWndTrace\l+ m_ssThTrace\l+ m_congStateTrace\l+ m_highTxMarkTrace\l+ m_nextTxSequenceTrace\l# m_retxEvent\l# m_lastAckEvent\l# m_delAckEvent\l# m_persistEvent\l# m_timewaitEvent\l# m_dupAckCount\l# m_delAckCount\l# m_delAckMaxCount\l# m_noDelay\l# m_synCount\land 51 more...\l|+ GetInstanceTypeId()\l+ TcpSocketBase()\l+ TcpSocketBase()\l+ ~TcpSocketBase()\l+ SetNode()\l+ SetTcp()\l+ SetRtt()\l+ SetMinRto()\l+ GetMinRto()\l+ SetClockGranularity()\land 29 more...\l+ GetTypeId()\l# SetSndBufSize()\l# GetSndBufSize()\l# SetRcvBufSize()\l# GetRcvBufSize()\l# SetSegSize()\l# GetSegSize()\l# SetInitialSSThresh()\l# GetInitialSSThresh()\l# SetInitialCwnd()\l# GetInitialCwnd()\land 81 more...\l# SafeSubtraction()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d45/classns3_1_1TcpSocketBase.html",tooltip="A base class for implementation of a stream socket using TCP. "];
  Node10 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node11 [label="{ns3::TcpSocketMsgBase\n|- m_rcvAckCb\l- m_processedAckCb\l- m_beforeRetrCallback\l- m_afterRetrCallback\l- m_forkCb\l- m_updateRttCb\l|+ TcpSocketMsgBase()\l+ TcpSocketMsgBase()\l+ SetRcvAckCb()\l+ SetProcessedAckCb()\l+ SetAfterRetransmitCb()\l+ SetBeforeRetransmitCb()\l+ SetForkCb()\l+ SetUpdateRttHistoryCb()\l+ GetTypeId()\l# ReceivedAck()\l# ReTxTimeout()\l# Fork()\l# CompleteFork()\l# UpdateRttHistory()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/d88/classns3_1_1TcpSocketMsgBase.html",tooltip="Class for inserting callbacks special points of the flow of TCP sockets. "];
  Node11 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node12 [label="{ns3::TcpSocketSmallAcks\n|# m_bytesToAck\l# m_bytesLeftToBeAcked\l# m_lastAckedSeq\l|+ TcpSocketSmallAcks()\l+ TcpSocketSmallAcks()\l+ SetBytesToAck()\l+ GetTypeId()\l# SendEmptyPacket()\l# Fork()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/dc6/classns3_1_1TcpSocketSmallAcks.html",tooltip="A TCP socket which sends ACKs smaller than the segment received. "];
  Node11 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node13 [label="{TcpSocketAdvertisedWindow\lProxy\n|- m_inwalidAwndCb\l- m_segmentSize\l|+ TcpSocketAdvertisedWindow\lProxy()\l+ TcpSocketAdvertisedWindow\lProxy()\l+ SetInvalidAwndCb()\l+ SetExpectedSegmentSize()\l+ GetTypeId()\l# Fork()\l# AdvertisedWindowSize()\l- OldAdvertisedWindowSize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d20/classTcpSocketAdvertisedWindowProxy.html",tooltip="Socket that wraps every call to AdvertisedWindowSize (). "];
  Node11 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node14 [label="{TcpSocketHalfAck\n||+ TcpSocketHalfAck()\l+ GetTypeId()\l# Fork()\l# ReceivedData()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/d56/classTcpSocketHalfAck.html",tooltip="Socket that the 50% of the times saves the entire packet in the buffer, while in the other 50% saves ..."];
  Node1 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node15 [label="{ns3::UdpSocket\n||+ UdpSocket()\l+ ~UdpSocket()\l+ MulticastJoinGroup()\l+ MulticastLeaveGroup()\l+ GetTypeId()\l- SetRcvBufSize()\l- GetRcvBufSize()\l- SetIpMulticastTtl()\l- GetIpMulticastTtl()\l- SetIpMulticastIf()\l- GetIpMulticastIf()\l- SetIpMulticastLoop()\l- GetIpMulticastLoop()\l- SetMtuDiscover()\l- GetMtuDiscover()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/ddc/classns3_1_1UdpSocket.html",tooltip="(abstract) base class of all UdpSockets "];
  Node15 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node16 [label="{ns3::UdpSocketImpl\n|- m_endPoint\l- m_endPoint6\l- m_node\l- m_udp\l- m_icmpCallback\l- m_icmpCallback6\l- m_defaultAddress\l- m_defaultPort\l- m_dropTrace\l- m_errno\land 11 more...\l|+ UdpSocketImpl()\l+ ~UdpSocketImpl()\l+ SetNode()\l+ SetUdp()\l+ GetErrno()\l+ GetSocketType()\l+ GetNode()\l+ Bind()\l+ Bind6()\l+ Bind()\land 19 more...\l+ GetTypeId()\l- SetRcvBufSize()\l- GetRcvBufSize()\l- SetIpMulticastTtl()\l- GetIpMulticastTtl()\l- SetIpMulticastIf()\l- GetIpMulticastIf()\l- SetIpMulticastLoop()\l- GetIpMulticastLoop()\l- SetMtuDiscover()\l- GetMtuDiscover()\land 11 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/df7/classns3_1_1UdpSocketImpl.html",tooltip="A sockets interface to UDP. "];
}
