digraph "ns3::CoordinationListener"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{ns3::CoordinationListener\n||+ CoordinationListener()\l+ ~CoordinationListener()\l+ NotifyCchSlotStart()\l+ NotifySchSlotStart()\l+ NotifyGuardSlotStart()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{ns3::ChannelCoordination\lListener\n||+ ~ChannelCoordinationListener()\l+ NotifyCchSlotStart()\l+ NotifySchSlotStart()\l+ NotifyGuardSlotStart()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/d37/classns3_1_1ChannelCoordinationListener.html",tooltip="receive notifications about channel coordination events. "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{ns3::SimpleRefCount\l\< ChannelCoordinationListener \>\n|- m_count\l|+ SimpleRefCount()\l+ SimpleRefCount()\l+ operator=()\l+ Ref()\l+ Unref()\l+ GetReferenceCount()\l+ Cleanup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da1/classns3_1_1SimpleRefCount.html"];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{ns3::empty\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d6a/classns3_1_1empty.html",tooltip="make Callback use a separate empty type "];
  Node5 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_scheduler" ,arrowhead="odiamond"];
  Node5 [label="{ns3::DefaultChannelScheduler\n|- m_channelNumber\l- m_extend\l- m_channelAccess\l- m_waitChannelNumber\l- m_waitExtend\l|+ DefaultChannelScheduler()\l+ ~DefaultChannelScheduler()\l+ SetWaveNetDevice()\l+ GetAssignedAccessType()\l+ NotifyCchSlotStart()\l+ NotifySchSlotStart()\l+ NotifyGuardSlotStart()\l+ GetTypeId()\l- DoInitialize()\l- DoDispose()\l- AssignAlternatingAccess()\l- AssignContinuousAccess()\l- AssignExtendedAccess()\l- AssignDefaultCchAccess()\l- ReleaseAccess()\l- SwitchToNextChannel()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/dbb/classns3_1_1DefaultChannelScheduler.html",tooltip="This class uses a simple mechanism to assign channel access with following features: (1) only in the ..."];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node6 [label="{ns3::ChannelScheduler\n||+ ChannelScheduler()\l+ ~ChannelScheduler()\l+ SetWaveNetDevice()\l+ IsCchAccessAssigned()\l+ IsSchAccessAssigned()\l+ IsChannelAccessAssigned()\l+ IsContinuousAccessAssigned()\l+ IsAlternatingAccessAssigned()\l+ IsExtendedAccessAssigned()\l+ IsDefaultCchAccessAssigned()\l+ GetAssignedAccessType()\l+ StartSch()\l+ StopSch()\l+ GetTypeId()\l# DoInitialize()\l# AssignAlternatingAccess()\l# AssignContinuousAccess()\l# AssignExtendedAccess()\l# AssignDefaultCchAccess()\l# ReleaseAccess()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/d91/classns3_1_1ChannelScheduler.html",tooltip="This class will assign channel access for requests from higher layers. The channel access options inc..."];
  Node7 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node7 [label="{ns3::Object\n|- m_disposed\l- m_initialized\l- m_getObjectCount\l|+ Object()\l+ ~Object()\l+ GetInstanceTypeId()\l+ GetObject()\l+ GetObject()\l+ Dispose()\l+ AggregateObject()\l+ GetAggregateIterator()\l+ Initialize()\l+ IsInitialized()\l+ GetTypeId()\l# NotifyNewAggregate()\l# DoInitialize()\l# DoDispose()\l# Object()\l- DoGetObject()\l- Check()\l- CheckLoose()\l- SetTypeId()\l- Construct()\l- UpdateSortedArray()\l- DoDelete()\l* CopyObject\l* CopyObject\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d77/classns3_1_1Object.html",tooltip="A base class which provides memory management and object aggregation. "];
  Node8 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node8 [label="{ns3::SimpleRefCount\l\< Object, ObjectBase,\l ObjectDeleter \>\n|- m_count\l|+ SimpleRefCount()\l+ SimpleRefCount()\l+ operator=()\l+ Ref()\l+ Unref()\l+ GetReferenceCount()\l+ Cleanup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da1/classns3_1_1SimpleRefCount.html"];
  Node9 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node9 [label="{ns3::ObjectBase\n||+ ~ObjectBase()\l+ GetInstanceTypeId()\l+ SetAttribute()\l+ SetAttributeFailSafe()\l+ GetAttribute()\l+ GetAttributeFailSafe()\l+ TraceConnect()\l+ TraceConnectWithoutContext()\l+ TraceDisconnect()\l+ TraceDisconnectWithoutContext()\l+ GetTypeId()\l# NotifyConstructionCompleted()\l# ConstructSelf()\l- DoSet()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/dac/classns3_1_1ObjectBase.html",tooltip="Anchor the ns-3 type and attribute system. "];
  Node10 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -m_tid" ,arrowhead="odiamond"];
  Node10 [label="{ns3::TypeId\n|- m_tid\l|+ TypeId()\l+ GetParent()\l+ HasParent()\l+ IsChildOf()\l+ GetGroupName()\l+ GetName()\l+ GetHash()\l+ GetSize()\l+ HasConstructor()\l+ GetAttributeN()\land 26 more...\l+ LookupByName()\l+ LookupByNameFailSafe()\l+ LookupByHash()\l+ LookupByHashFailSafe()\l+ GetRegisteredN()\l+ GetRegistered()\l- TypeId()\l- DoAddConstructor()\l* operator==\l* operator!=\l* operator\<\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d11/classns3_1_1TypeId.html",tooltip="a unique identifier for an interface. "];
  Node11 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -m_aggregates" ,arrowhead="odiamond"];
  Node11 [label="{ns3::Object::Aggregates\n|+ n\l|}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/de9/structns3_1_1Object_1_1Aggregates.html"];
  Node7 -> Node11 [color="grey25",fontsize="10",style="solid",label=" +buffer" ,arrowhead="odiamond"];
  Node12 -> Node6 [color="grey25",fontsize="10",style="solid",label=" #m_device" ,arrowhead="odiamond"];
  Node12 [label="{ns3::Ptr\< ns3::WaveNetDevice \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node13 -> Node12 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node13 [label="{ns3::WaveNetDevice\n|- m_macEntities\l- m_phyEntities\l- m_ifIndex\l- m_mtu\l- MAX_MSDU_SIZE\l- IPv4_PROT_NUMBER\l- IPv6_PROT_NUMBER\l|+ WaveNetDevice()\l+ ~WaveNetDevice()\l+ AddMac()\l+ GetMac()\l+ GetMacs()\l+ AddPhy()\l+ GetPhy()\l+ GetPhys()\l+ SetChannelScheduler()\l+ GetChannelScheduler()\land 40 more...\l+ GetTypeId()\l- DoDispose()\l- DoInitialize()\l- IsAvailableChannel()\l- ForwardUp()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/d1c/classns3_1_1WaveNetDevice.html"];
  Node14 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node14 [label="{ns3::NetDevice\n|+ isEnbTypeForDc\l|+ ~NetDevice()\l+ SetIfIndex()\l+ GetIfIndex()\l+ GetChannel()\l+ SetAddress()\l+ GetAddress()\l+ SetMtu()\l+ GetMtu()\l+ IsLinkUp()\l+ AddLinkChangeCallback()\land 15 more...\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/dac/classns3_1_1NetDevice.html",tooltip="Network layer to device interface. "];
  Node7 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node15 -> Node13 [color="grey25",fontsize="10",style="solid",label=" -m_promiscRx" ,arrowhead="odiamond"];
  Node15 [label="{ns3::Callback\< bool,\l Ptr\< NetDevice \>, Ptr\l\< const Packet \>, uint16\l_t, const Address &, const\l Address &, enum PacketType \>\n||+ Callback()\l+ Callback()\l+ Callback()\l+ Callback()\l+ Bind()\l+ TwoBind()\l+ ThreeBind()\l+ IsNull()\l+ Nullify()\l+ IsEqual()\l+ CheckType()\l+ Assign()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l- DoPeekImpl()\l- DoCheckType()\l- DoAssign()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d48/classns3_1_1Callback.html"];
  Node16 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node16 [label="{ns3::CallbackBase\n||+ CallbackBase()\l+ GetImpl()\l# CallbackBase()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/db5/classns3_1_1CallbackBase.html"];
  Node17 -> Node16 [color="grey25",fontsize="10",style="solid",label=" #m_impl" ,arrowhead="odiamond"];
  Node17 [label="{ns3::Ptr\< ns3::CallbackImpl\lBase \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node18 -> Node17 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node18 [label="{ns3::CallbackImplBase\n||+ ~CallbackImplBase()\l+ IsEqual()\l+ GetTypeid()\l# Demangle()\l# GetCppTypeid()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/dfa/classns3_1_1CallbackImplBase.html"];
  Node19 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node19 [label="{ns3::SimpleRefCount\l\< CallbackImplBase \>\n|- m_count\l|+ SimpleRefCount()\l+ SimpleRefCount()\l+ operator=()\l+ Ref()\l+ Unref()\l+ GetReferenceCount()\l+ Cleanup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da1/classns3_1_1SimpleRefCount.html"];
  Node4 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node20 -> Node13 [color="grey25",fontsize="10",style="solid",label=" -m_node" ,arrowhead="odiamond"];
  Node20 [label="{ns3::Ptr\< ns3::Node \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node21 -> Node20 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node21 [label="{ns3::Node\n|- m_id\l- m_sid\l- m_devices\l- m_applications\l- m_handlers\l- m_deviceAdditionListeners\l|+ Node()\l+ Node()\l+ ~Node()\l+ GetId()\l+ GetLocalTime()\l+ GetSystemId()\l+ AddDevice()\l+ GetDevice()\l+ GetNDevices()\l+ AddApplication()\land 6 more...\l+ GetTypeId()\l+ ChecksumEnabled()\l# DoDispose()\l# DoInitialize()\l- NotifyDeviceAdded()\l- NonPromiscReceiveFromDevice()\l- PromiscReceiveFromDevice()\l- ReceiveFromDevice()\l- Construct()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/ded/classns3_1_1Node.html",tooltip="A network Node. "];
  Node7 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node22 -> Node13 [color="grey25",fontsize="10",style="solid",label=" -m_channelCoordinator" ,arrowhead="odiamond"];
  Node22 [label="{ns3::Ptr\< ns3::ChannelCoordinator \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node23 -> Node22 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node23 [label="{ns3::ChannelCoordinator\n|- m_listeners\l- m_guardCount\l|+ ChannelCoordinator()\l+ ~ChannelCoordinator()\l+ SetCchInterval()\l+ GetCchInterval()\l+ SetSchInterval()\l+ GetSchInterval()\l+ GetSyncInterval()\l+ SetGuardInterval()\l+ GetGuardInterval()\l+ IsValidConfig()\land 11 more...\l+ GetTypeId()\l+ GetDefaultCchInterval()\l+ GetDefaultSchInterval()\l+ GetDefaultSyncInterval()\l+ GetDefaultGuardInterval()\l- DoDispose()\l- DoInitialize()\l- StartChannelCoordination()\l- StopChannelCoordination()\l- NotifySchSlot()\l- NotifyCchSlot()\l- NotifyGuardSlot()\l- GetSchSlot()\l- GetCchSlot()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/dca/classns3_1_1ChannelCoordinator.html",tooltip="ChannelCoordinator deals with channel coordination in data plane (see 1609.4 chapter 5..."];
  Node7 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node24 -> Node23 [color="grey25",fontsize="10",style="solid",label=" -m_coordination" ,arrowhead="odiamond"];
  Node24 [label="{ns3::EventId\n|- m_ts\l- m_context\l- m_uid\l|+ EventId()\l+ EventId()\l+ Cancel()\l+ IsExpired()\l+ IsRunning()\l+ PeekEventImpl()\l+ GetTs()\l+ GetContext()\l+ GetUid()\l* PeekEventImpl()\l* GetTs()\l* GetContext()\l* GetUid()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/df8/classns3_1_1EventId.html",tooltip="An identifier for simulation events. "];
  Node25 -> Node24 [color="grey25",fontsize="10",style="solid",label=" -m_eventImpl" ,arrowhead="odiamond"];
  Node25 [label="{ns3::Ptr\< ns3::EventImpl \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node26 -> Node25 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node26 [label="{ns3::EventImpl\n|- m_cancel\l|+ EventImpl()\l+ ~EventImpl()\l+ Invoke()\l+ Cancel()\l+ IsCancelled()\l# Notify()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/def/classns3_1_1EventImpl.html",tooltip="A simulation event. "];
  Node27 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node27 [label="{ns3::SimpleRefCount\l\< EventImpl \>\n|- m_count\l|+ SimpleRefCount()\l+ SimpleRefCount()\l+ operator=()\l+ Ref()\l+ Unref()\l+ GetReferenceCount()\l+ Cleanup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da1/classns3_1_1SimpleRefCount.html"];
  Node4 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node28 -> Node23 [color="grey25",fontsize="10",style="solid",label=" -m_cchi\n-m_schi\n-m_gi" ,arrowhead="odiamond"];
  Node28 [label="{ns3::Time\n|- m_data\l- g_markingTimes\l|+ operator=()\l+ Time()\l+ Time()\l+ Time()\l+ ~Time()\l+ IsZero()\l+ IsNegative()\l+ IsPositive()\l+ IsStrictlyNegative()\l+ IsStrictlyPositive()\l+ Compare()\l+ operator int64x64_t()\l+ As()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ GetYears()\l+ GetDays()\l+ GetHours()\l+ GetMinutes()\l+ GetSeconds()\l+ GetMilliSeconds()\l+ GetMicroSeconds()\l+ GetNanoSeconds()\l+ GetPicoSeconds()\l+ GetFemtoSeconds()\l+ GetTimeStep()\l+ GetDouble()\l+ GetInteger()\l+ ToInteger()\l+ ToDouble()\l+ To()\l+ Min()\l+ Max()\l+ SetResolution()\l+ GetResolution()\l+ From()\l+ StaticInit()\l+ FromInteger()\l+ FromDouble()\l+ From()\l- PeekResolution()\l- PeekInformation()\l- SetDefaultNsResolution()\l- SetResolution()\l- ClearMarkedTimes()\l- Mark()\l- Clear()\l- ConvertTimes()\l* operator==\l* operator!=\l* operator\<=\l* operator\>=\l* operator\<\l* operator\>\l* operator+\l* operator-\l* operator*\l* operator*\l* operator/\l* operator/\l* operator+=\l* operator-=\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* GetYears()\l* GetDays()\l* GetHours()\l* GetMinutes()\l* GetSeconds()\l* GetMilliSeconds()\l* GetMicroSeconds()\l* GetNanoSeconds()\l* GetPicoSeconds()\l* GetFemtoSeconds()\l* GetTimeStep()\l* GetDouble()\l* GetInteger()\l* ToInteger()\l* ToDouble()\l* To()\l* FromInteger()\l* FromDouble()\l* From()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d04/classns3_1_1Time.html",tooltip="Simulation virtual time values and global simulation resolution. "];
  Node29 -> Node13 [color="grey25",fontsize="10",style="solid",label=" -m_forwardUp" ,arrowhead="odiamond"];
  Node29 [label="{ns3::Callback\< bool,\l Ptr\< NetDevice \>, Ptr\l\< const Packet \>, uint16\l_t, const Address & \>\n||+ Callback()\l+ Callback()\l+ Callback()\l+ Callback()\l+ Bind()\l+ TwoBind()\l+ ThreeBind()\l+ IsNull()\l+ Nullify()\l+ IsEqual()\l+ CheckType()\l+ Assign()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l- DoPeekImpl()\l- DoCheckType()\l- DoAssign()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d48/classns3_1_1Callback.html"];
  Node16 -> Node29 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node30 -> Node13 [color="grey25",fontsize="10",style="solid",label=" -m_channelManager" ,arrowhead="odiamond"];
  Node30 [label="{ns3::Ptr\< ns3::ChannelManager \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node31 -> Node30 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node31 [label="{ns3::ChannelManager\n|- m_channels\l- DEFAULT_OPERATING_CLASS\l|+ ChannelManager()\l+ ~ChannelManager()\l+ GetOperatingClass()\l+ GetManagementAdaptable()\l+ GetManagementDataRate()\l+ GetManagementPreamble()\l+ GetManagementPowerLevel()\l+ GetTypeId()\l+ GetCch()\l+ GetSchs()\l+ GetWaveChannels()\l+ GetNumberOfWaveChannels()\l+ IsCch()\l+ IsSch()\l+ IsWaveChannel()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/d17/classns3_1_1ChannelManager.html",tooltip="manage 7 WaveChannels and the tx information such as data rate and txPowerLevel. for transmitting VSA..."];
  Node7 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node32 -> Node13 [color="grey25",fontsize="10",style="solid",label=" -m_txProfile" ,arrowhead="odiamond"];
  Node32 [label="{ns3::TxProfile\n|+ channelNumber\l+ adaptable\l+ txPowerLevel\l+ preamble\l|+ TxProfile()\l+ TxProfile()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d15/structns3_1_1TxProfile.html"];
  Node33 -> Node32 [color="grey25",fontsize="10",style="solid",label=" +dataRate" ,arrowhead="odiamond"];
  Node33 [label="{ns3::WifiMode\n|- m_uid\l|+ IsAllowed()\l+ GetPhyRate()\l+ GetPhyRate()\l+ GetDataRate()\l+ GetDataRate()\l+ GetDataRate()\l+ GetCodeRate()\l+ GetConstellationSize()\l+ GetMcsValue()\l+ GetUniqueName()\land 8 more...\l- WifiMode()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/d56/classns3_1_1WifiMode.html",tooltip="represent a single transmission modeA WifiMode is implemented by a single integer which is used to lo..."];
  Node34 -> Node13 [color="grey25",fontsize="10",style="solid",label=" -m_vsaManager" ,arrowhead="odiamond"];
  Node34 [label="{ns3::Ptr\< ns3::VsaManager \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node35 -> Node34 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node35 [label="{ns3::VsaManager\n|- m_vsas\l- VSA_REPEAT_PERIOD\l|+ VsaManager()\l+ ~VsaManager()\l+ SetWaveNetDevice()\l+ SetWaveVsaCallback()\l+ SendVsa()\l+ RemoveAll()\l+ RemoveByChannel()\l+ RemoveByOrganizationIdentifier()\l+ GetTypeId()\l- DoDispose()\l- DoInitialize()\l- ReceiveVsc()\l- DoRepeat()\l- DoSendVsa()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/d6e/classns3_1_1VsaManager.html"];
  Node7 -> Node35 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node36 -> Node35 [color="grey25",fontsize="10",style="solid",label=" -m_vsaReceived" ,arrowhead="odiamond"];
  Node36 [label="{ns3::Callback\< bool,\l ns3::Ptr\< const ns3\l::Packet \>, const ns3\l::Address &, uint32_t,\l uint32_t \>\n||+ Callback()\l+ Callback()\l+ Callback()\l+ Callback()\l+ Bind()\l+ TwoBind()\l+ ThreeBind()\l+ IsNull()\l+ Nullify()\l+ IsEqual()\l+ CheckType()\l+ Assign()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l- DoPeekImpl()\l- DoCheckType()\l- DoAssign()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d48/classns3_1_1Callback.html"];
  Node16 -> Node36 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node12 -> Node35 [color="grey25",fontsize="10",style="solid",label=" -m_device" ,arrowhead="odiamond"];
  Node37 -> Node13 [color="grey25",fontsize="10",style="solid",label=" -m_addressChange" ,arrowhead="odiamond"];
  Node37 [label="{ns3::TracedCallback\l\< ns3::Address, ns3\l::Address \>\n|- m_callbackList\l|+ TracedCallback()\l+ ConnectWithoutContext()\l+ Connect()\l+ DisconnectWithoutContext()\l+ Disconnect()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l* Uint32Callback\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/dec/classns3_1_1TracedCallback.html"];
  Node38 -> Node13 [color="grey25",fontsize="10",style="solid",label=" -m_channelScheduler" ,arrowhead="odiamond"];
  Node38 [label="{ns3::Ptr\< ns3::ChannelScheduler \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node6 -> Node38 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node24 -> Node5 [color="grey25",fontsize="10",style="solid",label=" -m_extendEvent\n-m_waitEvent" ,arrowhead="odiamond"];
  Node22 -> Node5 [color="grey25",fontsize="10",style="solid",label=" -m_coordinator" ,arrowhead="odiamond"];
  Node30 -> Node5 [color="grey25",fontsize="10",style="solid",label=" -m_manager" ,arrowhead="odiamond"];
  Node39 -> Node5 [color="grey25",fontsize="10",style="solid",label=" -m_coordinationListener" ,arrowhead="odiamond"];
  Node39 [label="{ns3::Ptr\< ns3::ChannelCoordination\lListener \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node2 -> Node39 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node40 -> Node5 [color="grey25",fontsize="10",style="solid",label=" -m_phy" ,arrowhead="odiamond"];
  Node40 [label="{ns3::Ptr\< ns3::WifiPhy \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node41 -> Node40 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node41 [label="{ns3::WifiPhy\n|# m_mpdusNum\l# m_plcpSuccess\l# m_txMpduReferenceNumber\l# m_rxMpduReferenceNumber\l- m_deviceRateSet\l- m_deviceMcsSet\l- m_bssMembershipSelectorSet\l- m_standard\l- m_isConstructed\l- m_channelCenterFrequency\l- m_initialFrequency\l- m_frequencyChannelNumber\lInitialized\l- m_channelWidth\l- m_edThresholdW\land 21 more...\l- m_channelToFrequencyWidth\l|+ WifiPhy()\l+ ~WifiPhy()\l+ SetReceiveOkCallback()\l+ SetReceiveErrorCallback()\l+ RegisterListener()\l+ UnregisterListener()\l+ StartReceivePreambleAndHeader()\l+ StartReceivePacket()\l+ EndReceive()\l+ SendPacket()\land 94 more...\l+ GetTypeId()\l+ GetPlcpTrainingSymbolDuration()\l+ GetHtPlcpHeaderMode()\l+ GetVhtPlcpHeaderMode()\l+ GetHePlcpHeaderMode()\l+ GetPlcpHtSigHeaderDuration()\l+ GetPlcpSigA1Duration()\l+ GetPlcpSigA2Duration()\l+ GetPlcpSigBDuration()\l+ GetPlcpHeaderMode()\land 93 more...\l# DoInitialize()\l# DoDispose()\l# DoChannelSwitch()\l# DoFrequencySwitch()\l# SwitchMaybeToCcaBusy()\l- InitializeFrequencyChannel\lNumber()\l- Configure80211a()\l- Configure80211b()\l- Configure80211g()\l- Configure80211_10Mhz()\l- Configure80211_5Mhz()\l- ConfigureHolland()\l- Configure80211n()\l- Configure80211ac()\l- Configure80211ax()\l- ConfigureHtDeviceMcsSet()\l- ConfigureDefaultsForStandard()\l- ConfigureChannelForStandard()\l- FindChannelNumberForFrequency\lWidth()\l- GetFrequencyWidthForChannel\lNumberStandard()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d5a/classns3_1_1WifiPhy.html",tooltip="802.11 PHY layer model "];
  Node7 -> Node41 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node42 -> Node41 [color="grey25",fontsize="10",style="solid",label=" -m_mobility" ,arrowhead="odiamond"];
  Node42 [label="{ns3::Ptr\< ns3::MobilityModel \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node43 -> Node42 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node43 [label="{ns3::MobilityModel\n||+ MobilityModel()\l+ ~MobilityModel()\l+ GetPosition()\l+ SetPosition()\l+ GetVelocity()\l+ GetDistanceFrom()\l+ GetRelativeSpeed()\l+ AssignStreams()\l+ GetTypeId()\l# NotifyCourseChange()\l- DoGetPosition()\l- DoSetPosition()\l- DoGetVelocity()\l- DoAssignStreams()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/dc5/classns3_1_1MobilityModel.html",tooltip="Keep track of the current position and velocity of an object. "];
  Node7 -> Node43 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node44 -> Node43 [color="grey25",fontsize="10",style="solid",label=" -m_courseChangeTrace" ,arrowhead="odiamond"];
  Node44 [label="{ns3::TracedCallback\l\< ns3::Ptr\< const ns3\l::MobilityModel \> \>\n|- m_callbackList\l|+ TracedCallback()\l+ ConnectWithoutContext()\l+ Connect()\l+ DisconnectWithoutContext()\l+ Disconnect()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l* Uint32Callback\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/dec/classns3_1_1TracedCallback.html"];
  Node45 -> Node41 [color="grey25",fontsize="10",style="solid",label=" -m_phyMonitorSniffTxTrace" ,arrowhead="odiamond"];
  Node45 [label="{ns3::TracedCallback\l\< ns3::Ptr\< const ns3\l::Packet \>, uint16_t,\l ns3::WifiTxVector, ns3\l::MpduInfo \>\n|- m_callbackList\l|+ TracedCallback()\l+ ConnectWithoutContext()\l+ Connect()\l+ DisconnectWithoutContext()\l+ Disconnect()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l* Uint32Callback\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/dec/classns3_1_1TracedCallback.html"];
  Node46 -> Node41 [color="grey25",fontsize="10",style="solid",label=" -m_phyTxEndTrace\n-m_phyRxEndTrace\n-m_phyTxDropTrace\n-m_phyRxBeginTrace\n-m_phyRxDropTrace\n-m_phyTxBeginTrace" ,arrowhead="odiamond"];
  Node46 [label="{ns3::TracedCallback\l\< ns3::Ptr\< const ns3\l::Packet \> \>\n|- m_callbackList\l|+ TracedCallback()\l+ ConnectWithoutContext()\l+ Connect()\l+ DisconnectWithoutContext()\l+ Disconnect()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l* Uint32Callback\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/dec/classns3_1_1TracedCallback.html"];
  Node47 -> Node41 [color="grey25",fontsize="10",style="solid",label=" #m_interference" ,arrowhead="odiamond"];
  Node47 [label="{ns3::InterferenceHelper\n|- m_noiseFigure\l- m_numRxAntennas\l- m_niChanges\l- m_firstPower\l- m_rxing\l|+ InterferenceHelper()\l+ ~InterferenceHelper()\l+ SetNoiseFigure()\l+ SetErrorRateModel()\l+ GetNoiseFigure()\l+ GetErrorRateModel()\l+ SetNumberOfReceiveAntennas()\l+ GetEnergyDuration()\l+ Add()\l+ AddForeignSignal()\l+ CalculatePlcpPayloadSnrPer()\l+ CalculatePlcpHeaderSnrPer()\l+ NotifyRxStart()\l+ NotifyRxEnd()\l+ EraseEvents()\l- AppendEvent()\l- CalculateNoiseInterferenceW()\l- CalculateSnr()\l- CalculateChunkSuccessRate()\l- CalculatePlcpPayloadPer()\l- CalculatePlcpHeaderPer()\l- GetPosition()\l- AddNiChangeEvent()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d0f/classns3_1_1InterferenceHelper.html",tooltip="handles interference calculations "];
  Node48 -> Node47 [color="grey25",fontsize="10",style="solid",label=" -m_errorRateModel" ,arrowhead="odiamond"];
  Node48 [label="{ns3::Ptr\< ns3::ErrorRate\lModel \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node49 -> Node48 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node49 [label="{ns3::ErrorRateModel\n||+ CalculateSnr()\l+ GetChunkSuccessRate()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/dec/classns3_1_1ErrorRateModel.html",tooltip="the interface for Wifi&#39;s error models "];
  Node7 -> Node49 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node24 -> Node41 [color="grey25",fontsize="10",style="solid",label=" #m_endRxEvent\n#m_endPlcpRxEvent" ,arrowhead="odiamond"];
  Node50 -> Node41 [color="grey25",fontsize="10",style="solid",label=" -m_device" ,arrowhead="odiamond"];
  Node50 [label="{ns3::Ptr\< ns3::NetDevice \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node14 -> Node50 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node28 -> Node41 [color="grey25",fontsize="10",style="solid",label=" -m_guardInterval\n-m_channelSwitchDelay" ,arrowhead="odiamond"];
  Node51 -> Node41 [color="grey25",fontsize="10",style="solid",label=" #m_state" ,arrowhead="odiamond"];
  Node51 [label="{ns3::Ptr\< ns3::WifiPhyState\lHelper \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node52 -> Node51 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node52 [label="{ns3::WifiPhyStateHelper\n|- m_rxing\l- m_sleeping\l- m_listeners\l|+ WifiPhyStateHelper()\l+ SetReceiveOkCallback()\l+ SetReceiveErrorCallback()\l+ RegisterListener()\l+ UnregisterListener()\l+ GetState()\l+ IsStateCcaBusy()\l+ IsStateIdle()\l+ IsStateBusy()\l+ IsStateRx()\land 14 more...\l+ GetTypeId()\l- LogPreviousIdleAndCcaBusy\lStates()\l- NotifyTxStart()\l- NotifyRxStart()\l- NotifyRxEndOk()\l- NotifyRxEndError()\l- NotifyMaybeCcaBusyStart()\l- NotifySwitchingStart()\l- NotifySleep()\l- NotifyWakeup()\l- DoSwitchFromRx()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d0/d9a/classns3_1_1WifiPhyStateHelper.html"];
  Node7 -> Node52 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node53 -> Node52 [color="grey25",fontsize="10",style="solid",label=" -m_rxOkTrace" ,arrowhead="odiamond"];
  Node53 [label="{ns3::TracedCallback\l\< ns3::Ptr\< const ns3\l::Packet \>, double, ns3\l::WifiMode, WifiPreamble \>\n|- m_callbackList\l|+ TracedCallback()\l+ ConnectWithoutContext()\l+ Connect()\l+ DisconnectWithoutContext()\l+ Disconnect()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l* Uint32Callback\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/dec/classns3_1_1TracedCallback.html"];
  Node28 -> Node52 [color="grey25",fontsize="10",style="solid",label=" -m_startCcaBusy\n-m_startRx\n-m_startTx\n-m_previousStateChange\lTime\n-m_startSleep\n-m_endSwitching\n-m_startSwitching\n-m_endTx\n-m_endRx\n-m_endCcaBusy\n..." ,arrowhead="odiamond"];
  Node54 -> Node52 [color="grey25",fontsize="10",style="solid",label=" -m_rxOkCallback" ,arrowhead="odiamond"];
  Node54 [label="{ns3::Callback\< void,\l Ptr\< Packet \>, double,\l WifiTxVector \>\n||+ Callback()\l+ Callback()\l+ Callback()\l+ Callback()\l+ Bind()\l+ TwoBind()\l+ ThreeBind()\l+ IsNull()\l+ Nullify()\l+ IsEqual()\l+ CheckType()\l+ Assign()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l- DoPeekImpl()\l- DoCheckType()\l- DoAssign()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d48/classns3_1_1Callback.html"];
  Node16 -> Node54 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node55 -> Node52 [color="grey25",fontsize="10",style="solid",label=" -m_txTrace" ,arrowhead="odiamond"];
  Node55 [label="{ns3::TracedCallback\l\< ns3::Ptr\< const ns3\l::Packet \>, ns3::WifiMode,\l WifiPreamble, uint8_t \>\n|- m_callbackList\l|+ TracedCallback()\l+ ConnectWithoutContext()\l+ Connect()\l+ DisconnectWithoutContext()\l+ Disconnect()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l* Uint32Callback\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/dec/classns3_1_1TracedCallback.html"];
  Node56 -> Node52 [color="grey25",fontsize="10",style="solid",label=" -m_rxErrorTrace" ,arrowhead="odiamond"];
  Node56 [label="{ns3::TracedCallback\l\< ns3::Ptr\< const ns3\l::Packet \>, double \>\n|- m_callbackList\l|+ TracedCallback()\l+ ConnectWithoutContext()\l+ Connect()\l+ DisconnectWithoutContext()\l+ Disconnect()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l* Uint32Callback\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/dec/classns3_1_1TracedCallback.html"];
  Node57 -> Node52 [color="grey25",fontsize="10",style="solid",label=" -m_rxErrorCallback" ,arrowhead="odiamond"];
  Node57 [label="{ns3::Callback\< void,\l Ptr\< Packet \>, double \>\n||+ Callback()\l+ Callback()\l+ Callback()\l+ Callback()\l+ Bind()\l+ TwoBind()\l+ ThreeBind()\l+ IsNull()\l+ Nullify()\l+ IsEqual()\l+ CheckType()\l+ Assign()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l- DoPeekImpl()\l- DoCheckType()\l- DoAssign()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d48/classns3_1_1Callback.html"];
  Node16 -> Node57 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node58 -> Node52 [color="grey25",fontsize="10",style="solid",label=" -m_stateLogger" ,arrowhead="odiamond"];
  Node58 [label="{ns3::TracedCallback\l\< ns3::Time, ns3::Time,\l ns3::WifiPhy::State \>\n|- m_callbackList\l|+ TracedCallback()\l+ ConnectWithoutContext()\l+ Connect()\l+ DisconnectWithoutContext()\l+ Disconnect()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l* Uint32Callback\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/dec/classns3_1_1TracedCallback.html"];
  Node59 -> Node41 [color="grey25",fontsize="10",style="solid",label=" -m_phyMonitorSniffRxTrace" ,arrowhead="odiamond"];
  Node59 [label="{ns3::TracedCallback\l\< ns3::Ptr\< const ns3\l::Packet \>, uint16_t,\l ns3::WifiTxVector, ns3\l::MpduInfo, ns3::SignalNoiseDbm \>\n|- m_callbackList\l|+ TracedCallback()\l+ ConnectWithoutContext()\l+ Connect()\l+ DisconnectWithoutContext()\l+ Disconnect()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l+ operator()()\l* Uint32Callback\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l* operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/dec/classns3_1_1TracedCallback.html"];
  Node60 -> Node41 [color="grey25",fontsize="10",style="solid",label=" #m_random" ,arrowhead="odiamond"];
  Node60 [label="{ns3::Ptr\< ns3::UniformRandom\lVariable \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node61 -> Node60 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node61 [label="{ns3::UniformRandomVariable\n||+ UniformRandomVariable()\l+ GetMin()\l+ GetMax()\l+ GetValue()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d0/d5b/classns3_1_1UniformRandomVariable.html",tooltip="The uniform distribution Random Number Generator (RNG). "];
  Node62 -> Node61 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node62 [label="{ns3::RandomVariableStream\n|- m_isAntithetic\l- m_stream\l|+ RandomVariableStream()\l+ ~RandomVariableStream()\l+ SetStream()\l+ GetStream()\l+ SetAntithetic()\l+ IsAntithetic()\l+ GetValue()\l+ GetInteger()\l+ GetTypeId()\l# Peek()\l- RandomVariableStream()\l- operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/daa/classns3_1_1RandomVariableStream.html",tooltip="The basic uniform Random Number Generator (RNG). "];
  Node7 -> Node62 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node63 -> Node62 [color="grey25",fontsize="10",style="solid",label=" -m_rng" ,arrowhead="odiamond"];
  Node63 [label="{ns3::RngStream\n|- m_currentState\l|+ RngStream()\l+ RngStream()\l+ RandU01()\l- AdvanceNthBy()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/d35/classns3_1_1RngStream.html",tooltip="Combined Multiple-Recursive Generator MRG32k3a. "];
}
