digraph "ns3::ErrorModel"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{ns3::ErrorModel\n|- m_enable\l|+ ErrorModel()\l+ ~ErrorModel()\l+ IsCorrupt()\l+ Reset()\l+ Enable()\l+ Disable()\l+ IsEnabled()\l+ GetTypeId()\l- DoCorrupt()\l- DoReset()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{ns3::Object\n|- m_tid\l- m_disposed\l- m_initialized\l- m_aggregates\l- m_getObjectCount\l|+ Object()\l+ ~Object()\l+ GetInstanceTypeId()\l+ GetObject()\l+ GetObject()\l+ Dispose()\l+ AggregateObject()\l+ GetAggregateIterator()\l+ Initialize()\l+ IsInitialized()\l+ GetTypeId()\l# NotifyNewAggregate()\l# DoInitialize()\l# DoDispose()\l# Object()\l- DoGetObject()\l- Check()\l- CheckLoose()\l- SetTypeId()\l- Construct()\l- UpdateSortedArray()\l- DoDelete()\l* CopyObject\l* CopyObject\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d77/classns3_1_1Object.html",tooltip="A base class which provides memory management and object aggregation. "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{ns3::SimpleRefCount\l\< Object, ObjectBase,\l ObjectDeleter \>\n|- m_count\l|+ SimpleRefCount()\l+ SimpleRefCount()\l+ operator=()\l+ Ref()\l+ Unref()\l+ GetReferenceCount()\l+ Cleanup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da1/classns3_1_1SimpleRefCount.html"];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{ns3::ObjectBase\n||+ ~ObjectBase()\l+ GetInstanceTypeId()\l+ SetAttribute()\l+ SetAttributeFailSafe()\l+ GetAttribute()\l+ GetAttributeFailSafe()\l+ TraceConnect()\l+ TraceConnectWithoutContext()\l+ TraceDisconnect()\l+ TraceDisconnectWithoutContext()\l+ GetTypeId()\l# NotifyConstructionCompleted()\l# ConstructSelf()\l- DoSet()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/dac/classns3_1_1ObjectBase.html",tooltip="Anchor the ns-3 type and attribute system. "];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 [label="{ns3::BinaryErrorModel\n|- m_counter\l|+ BinaryErrorModel()\l+ ~BinaryErrorModel()\l+ GetTypeId()\l- DoCorrupt()\l- DoReset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/df4/classns3_1_1BinaryErrorModel.html",tooltip="The simplest error model, corrupts even packets and does not corrupt odd ones. "];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node6 [label="{ns3::BurstErrorModel\n|- m_burstRate\l- m_burstStart\l- m_burstSize\l- m_counter\l- m_currentBurstSz\l|+ BurstErrorModel()\l+ ~BurstErrorModel()\l+ GetBurstRate()\l+ SetBurstRate()\l+ SetRandomVariable()\l+ SetRandomBurstSize()\l+ AssignStreams()\l+ GetTypeId()\l- DoCorrupt()\l- DoReset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/de1/classns3_1_1BurstErrorModel.html",tooltip="Determine which bursts of packets are errored corresponding to an underlying distribution, burst rate, and burst size. "];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node7 [label="{ns3::ListErrorModel\n|- m_packetList\l|+ ListErrorModel()\l+ ~ListErrorModel()\l+ GetList()\l+ SetList()\l+ GetTypeId()\l- DoCorrupt()\l- DoReset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/df8/classns3_1_1ListErrorModel.html",tooltip="Provide a list of Packet uids to corrupt. "];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node8 [label="{ns3::RateErrorModel\n|- m_unit\l- m_rate\l- m_ranvar\l|+ RateErrorModel()\l+ ~RateErrorModel()\l+ GetUnit()\l+ SetUnit()\l+ GetRate()\l+ SetRate()\l+ SetRandomVariable()\l+ AssignStreams()\l+ GetTypeId()\l- DoCorrupt()\l- DoCorruptPkt()\l- DoCorruptByte()\l- DoCorruptBit()\l- DoReset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d25/classns3_1_1RateErrorModel.html",tooltip="Determine which packets are errored corresponding to an underlying distribution, rate, and unit. "];
  Node1 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node9 [label="{ns3::ReceiveListErrorModel\n|- m_packetList\l- m_timesInvoked\l|+ ReceiveListErrorModel()\l+ ~ReceiveListErrorModel()\l+ GetList()\l+ SetList()\l+ GetTypeId()\l- DoCorrupt()\l- DoReset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/d92/classns3_1_1ReceiveListErrorModel.html",tooltip="Provide a list of Packets to corrupt. "];
  Node1 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node10 [label="{ns3::TcpGeneralErrorModel\n|- m_dropCallback\l|+ TcpGeneralErrorModel()\l+ SetDropCallback()\l+ GetTypeId()\l# ShouldDrop()\l- DoCorrupt()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d5a/classns3_1_1TcpGeneralErrorModel.html",tooltip="A general (TCP-aware) error model. "];
  Node10 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node11 [label="{ns3::TcpFlagErrorModel\n|# m_flagsToKill\l# m_killNumber\l|+ TcpFlagErrorModel()\l+ SetFlagToKill()\l+ SetKillRepeat()\l+ GetTypeId()\l# ShouldDrop()\l- DoReset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/daf/classns3_1_1TcpFlagErrorModel.html",tooltip="Error model which drop packets with specified TCP flags. "];
  Node10 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node12 [label="{ns3::TcpSeqErrorModel\n|# m_seqToKill\l|+ TcpSeqErrorModel()\l+ AddSeqToKill()\l+ GetTypeId()\l# ShouldDrop()\l- DoReset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/d33/classns3_1_1TcpSeqErrorModel.html",tooltip="An error model TCP aware: it drops the sequence number declared. "];
  Node10 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node13 [label="{TcpDropRatioErrorModel\n|- m_dropRatio\l- m_prng\l|+ TcpDropRatioErrorModel()\l+ GetTypeId()\l# ShouldDrop()\l- DoReset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/d96/classTcpDropRatioErrorModel.html",tooltip="An error model that randomly drops a given r√°tio of TCP segments. "];
}
