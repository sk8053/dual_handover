digraph "ns3::QueueBase"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{ns3::QueueBase\n|- m_nBytes\l- m_nTotalReceivedBytes\l- m_nPackets\l- m_nTotalReceivedPackets\l- m_nTotalDroppedBytes\l- m_nTotalDroppedBytesBefore\lEnqueue\l- m_nTotalDroppedBytesAfter\lDequeue\l- m_nTotalDroppedPackets\l- m_nTotalDroppedPacketsBefore\lEnqueue\l- m_nTotalDroppedPacketsAfter\lDequeue\l- m_maxPackets\l- m_maxBytes\l- m_mode\l|+ QueueBase()\l+ ~QueueBase()\l+ IsEmpty()\l+ GetNPackets()\l+ GetNBytes()\l+ GetTotalReceivedBytes()\l+ GetTotalReceivedPackets()\l+ GetTotalDroppedBytes()\l+ GetTotalDroppedBytesBefore\lEnqueue()\l+ GetTotalDroppedBytesAfter\lDequeue()\land 10 more...\l+ GetTypeId()\l+ AppendItemTypeIfNotPresent()\l# DoNsLog()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{ns3::Object\n|- m_tid\l- m_disposed\l- m_initialized\l- m_aggregates\l- m_getObjectCount\l|+ Object()\l+ ~Object()\l+ GetInstanceTypeId()\l+ GetObject()\l+ GetObject()\l+ Dispose()\l+ AggregateObject()\l+ GetAggregateIterator()\l+ Initialize()\l+ IsInitialized()\l+ GetTypeId()\l# NotifyNewAggregate()\l# DoInitialize()\l# DoDispose()\l# Object()\l- DoGetObject()\l- Check()\l- CheckLoose()\l- SetTypeId()\l- Construct()\l- UpdateSortedArray()\l- DoDelete()\l* CopyObject\l* CopyObject\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d77/classns3_1_1Object.html",tooltip="A base class which provides memory management and object aggregation. "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{ns3::SimpleRefCount\l\< Object, ObjectBase,\l ObjectDeleter \>\n|- m_count\l|+ SimpleRefCount()\l+ SimpleRefCount()\l+ operator=()\l+ Ref()\l+ Unref()\l+ GetReferenceCount()\l+ Cleanup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da1/classns3_1_1SimpleRefCount.html"];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{ns3::ObjectBase\n||+ ~ObjectBase()\l+ GetInstanceTypeId()\l+ SetAttribute()\l+ SetAttributeFailSafe()\l+ GetAttribute()\l+ GetAttributeFailSafe()\l+ TraceConnect()\l+ TraceConnectWithoutContext()\l+ TraceDisconnect()\l+ TraceDisconnectWithoutContext()\l+ GetTypeId()\l# NotifyConstructionCompleted()\l# ConstructSelf()\l- DoSet()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/dac/classns3_1_1ObjectBase.html",tooltip="Anchor the ns-3 type and attribute system. "];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 [label="{ns3::Queue\< Item \>\n|- m_packets\l- m_traceEnqueue\l- m_traceDequeue\l- m_traceDrop\l- m_traceDropBeforeEnqueue\l- m_traceDropAfterDequeue\l|+ Queue()\l+ ~Queue()\l+ Enqueue()\l+ Dequeue()\l+ Remove()\l+ Peek()\l+ Flush()\l+ GetTypeId()\l# Head()\l# Tail()\l# DoEnqueue()\l# DoDequeue()\l# DoRemove()\l# DoPeek()\l# DropBeforeEnqueue()\l# DropAfterDequeue()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/d8f/classns3_1_1Queue.html",tooltip="Template class for packet Queues. "];
  Node5 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node6 [label="{ns3::DropTailQueue\l\< Item \>\n||+ DropTailQueue()\l+ ~DropTailQueue()\l+ Enqueue()\l+ Dequeue()\l+ Remove()\l+ Peek()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/dc9/classns3_1_1DropTailQueue.html",tooltip="A FIFO packet queue that drops tail-end packets on overflow. "];
  Node5 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node7 [label="{ns3::WifiQueue\< Item \>\n|- m_maxDelay\l- m_dropPolicy\l|+ WifiQueue()\l+ ~WifiQueue()\l+ SetMaxDelay()\l+ GetMaxDelay()\l+ Enqueue()\l+ PushFront()\l+ Dequeue()\l+ DequeueByTidAndAddress()\l+ DequeueFirstAvailable()\l+ Peek()\land 6 more...\l+ GetTypeId()\l- TtlExceeded()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/d0a/classns3_1_1WifiQueue.html"];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node8 [label="{ns3::Queue\< ns3::Packet \>\n|- m_packets\l- m_traceEnqueue\l- m_traceDequeue\l- m_traceDrop\l- m_traceDropBeforeEnqueue\l- m_traceDropAfterDequeue\l|+ Queue()\l+ ~Queue()\l+ Enqueue()\l+ Dequeue()\l+ Remove()\l+ Peek()\l+ Flush()\l+ GetTypeId()\l# Head()\l# Tail()\l# DoEnqueue()\l# DoDequeue()\l# DoRemove()\l# DoPeek()\l# DropBeforeEnqueue()\l# DropAfterDequeue()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/d8f/classns3_1_1Queue.html"];
}
