digraph "WScalingTestCase"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{WScalingTestCase\n|# m_configuration\l# m_maxRcvBufferSize\l# m_maxSndBufferSize\l|+ WScalingTestCase()\l# CreateReceiverSocket()\l# CreateSenderSocket()\l# Tx()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{ns3::TcpGeneralTest\n|# m_congControlTypeId\l- m_propagationDelay\l- m_startTime\l- m_mtu\l- m_pktSize\l- m_pktCount\l- m_interPacketInterval\l- m_senderSocket\l- m_receiverSocket\l- m_remoteAddr\l|+ TcpGeneralTest()\l+ ~TcpGeneralTest()\l# CreateChannel()\l# CreateSenderErrorModel()\l# CreateReceiverErrorModel()\l# CreateReceiverSocket()\l# CreateSenderSocket()\l# CreateSocket()\l# GetSenderSocket()\l# GetReceiverSocket()\l# DoRun()\l# ConfigureEnvironment()\land 59 more...\l- NormalCloseCb()\l- ErrorCloseCb()\l- QueueDropCb()\l- PhyDropCb()\l- RcvAckCb()\l- ProcessedAckCb()\l- TxPacketCb()\l- RxPacketCb()\l- RtoExpiredCb()\l- UpdateRttHistoryCb()\l- AfterRetransmitCb()\l- BeforeRetransmitCb()\l- DataSentCb()\l- ForkCb()\l- HandleAccept()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/dfd/classns3_1_1TcpGeneralTest.html",tooltip="General infrastructure for TCP testing. "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{ns3::TestCase\n|- m_parent\l- m_children\l- m_dataDir\l- m_runner\l- m_result\l- m_name\l- m_duration\l|+ ~TestCase()\l+ GetName()\l# TestCase()\l# AddTestCase()\l# SetDataDir()\l# IsStatusFailure()\l# IsStatusSuccess()\l# GetParent()\l# ReportTestFailure()\l# MustAssertOnFailure()\l# MustContinueOnFailure()\l# CreateDataDirFilename()\l# CreateTempDirFilename()\l- DoSetup()\l- DoRun()\l- DoTeardown()\l- Run()\l- IsFailed()\l* ReportTestFailure()\l* MustAssertOnFailure()\l* MustContinueOnFailure()\l* CreateDataDirFilename()\l* CreateTempDirFilename()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/d88/classns3_1_1TestCase.html",tooltip="encapsulates test code "];
  Node4 -> Node3 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{ns3::NonCopyable\n||# NonCopyable()\l# ~NonCopyable()\l- NonCopyable()\l- operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/dd1/classns3_1_1NonCopyable.html"];
}
