digraph "ns3::Ipv6L3Protocol"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{ns3::Ipv6L3Protocol\n|+ PROT_NUMBER\l- m_txTrace\l- m_rxTrace\l- m_dropTrace\l- m_sendOutgoingTrace\l- m_unicastForwardTrace\l- m_localDeliverTrace\l- m_node\l- m_ipForward\l- m_mtuDiscover\l- m_pmtuCache\land 13 more...\l|+ Ipv6L3Protocol()\l+ ~Ipv6L3Protocol()\l+ SetNode()\l+ Insert()\l+ Insert()\l+ Remove()\l+ Remove()\l+ GetProtocol()\l+ GetProtocol()\l+ CreateRawSocket()\land 41 more...\l+ GetTypeId()\l# DoDispose()\l# NotifyNewAggregate()\l- CallTxTrace()\l- Ipv6L3Protocol()\l- operator=()\l- BuildHeader()\l- SendRealOut()\l- IpForward()\l- IpMulticastForward()\l- LocalDeliver()\l- RouteInputError()\l- AddIpv6Interface()\land 7 more...\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{ns3::Ipv6\n|+ IF_ANY\l|+ Ipv6()\l+ ~Ipv6()\l+ SetRoutingProtocol()\l+ GetRoutingProtocol()\l+ AddInterface()\l+ GetNInterfaces()\l+ GetInterfaceForAddress()\l+ GetInterfaceForPrefix()\l+ GetNetDevice()\l+ GetInterfaceForDevice()\land 24 more...\l+ GetTypeId()\l- SetIpForward()\l- GetIpForward()\l- SetMtuDiscover()\l- GetMtuDiscover()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/d5d/classns3_1_1Ipv6.html",tooltip="Access to the IPv6 forwarding table, interfaces, and configuration. "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{ns3::Object\n|- m_tid\l- m_disposed\l- m_initialized\l- m_aggregates\l- m_getObjectCount\l|+ Object()\l+ ~Object()\l+ GetInstanceTypeId()\l+ GetObject()\l+ GetObject()\l+ Dispose()\l+ AggregateObject()\l+ GetAggregateIterator()\l+ Initialize()\l+ IsInitialized()\l+ GetTypeId()\l# NotifyNewAggregate()\l# DoInitialize()\l# DoDispose()\l# Object()\l- DoGetObject()\l- Check()\l- CheckLoose()\l- SetTypeId()\l- Construct()\l- UpdateSortedArray()\l- DoDelete()\l* CopyObject\l* CopyObject\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d77/classns3_1_1Object.html",tooltip="A base class which provides memory management and object aggregation. "];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{ns3::SimpleRefCount\l\< Object, ObjectBase,\l ObjectDeleter \>\n|- m_count\l|+ SimpleRefCount()\l+ SimpleRefCount()\l+ operator=()\l+ Ref()\l+ Unref()\l+ GetReferenceCount()\l+ Cleanup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da1/classns3_1_1SimpleRefCount.html"];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 [label="{ns3::ObjectBase\n||+ ~ObjectBase()\l+ GetInstanceTypeId()\l+ SetAttribute()\l+ SetAttributeFailSafe()\l+ GetAttribute()\l+ GetAttributeFailSafe()\l+ TraceConnect()\l+ TraceConnectWithoutContext()\l+ TraceDisconnect()\l+ TraceDisconnectWithoutContext()\l+ GetTypeId()\l# NotifyConstructionCompleted()\l# ConstructSelf()\l- DoSet()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/dac/classns3_1_1ObjectBase.html",tooltip="Anchor the ns-3 type and attribute system. "];
}
