digraph "ns3::MmWave3gppBuildingsPropagationLossModel"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{ns3::MmWave3gppBuildings\lPropagationLossModel\n|- m_frequency\l- m_lambda\l- m_conditionMap\l- m_updateCondition\l- m_enbUeLocTrace\l|+ MmWave3gppBuildingsPropagation\lLossModel()\l+ ~MmWave3gppBuildingsPropagation\lLossModel()\l+ GetLoss()\l+ DoCalcRxPower()\l+ SetConfigurationParameters()\l+ GetScenario()\l+ GetChannelCondition()\l+ GetTypeId()\l- IsLineIntersectBuildings()\l- LocationTrace()\l- mmWaveLosLoss()\l- mmWaveNlosLoss()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{ns3::BuildingsPropagation\lLossModel\n|# m_lossInternalWall\l# m_shadowingLossMap\l# m_shadowingSigmaExtWalls\l# m_shadowingSigmaOutdoor\l# m_shadowingSigmaIndoor\l|+ BuildingsPropagationLoss\lModel()\l+ GetLoss()\l+ DoCalcRxPower()\l+ GetTypeId()\l# ExternalWallLoss()\l# HeightLoss()\l# InternalWallsLoss()\l# GetShadowing()\l# EvaluateSigma()\l# DoAssignStreams()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/db0/classns3_1_1BuildingsPropagationLossModel.html"];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{ns3::PropagationLossModel\n||+ PropagationLossModel()\l+ ~PropagationLossModel()\l+ SetNext()\l+ GetNext()\l+ CalcRxPower()\l+ AssignStreams()\l+ GetTypeId()\l- PropagationLossModel()\l- operator=()\l- DoCalcRxPower()\l- DoAssignStreams()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/df9/classns3_1_1PropagationLossModel.html",tooltip="Models the propagation loss through a transmission medium. "];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{ns3::Object\n|- m_disposed\l- m_initialized\l- m_getObjectCount\l|+ Object()\l+ ~Object()\l+ GetInstanceTypeId()\l+ GetObject()\l+ GetObject()\l+ Dispose()\l+ AggregateObject()\l+ GetAggregateIterator()\l+ Initialize()\l+ IsInitialized()\l+ GetTypeId()\l# NotifyNewAggregate()\l# DoInitialize()\l# DoDispose()\l# Object()\l- DoGetObject()\l- Check()\l- CheckLoose()\l- SetTypeId()\l- Construct()\l- UpdateSortedArray()\l- DoDelete()\l* CopyObject\l* CopyObject\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d77/classns3_1_1Object.html",tooltip="A base class which provides memory management and object aggregation. "];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 [label="{ns3::SimpleRefCount\l\< Object, ObjectBase,\l ObjectDeleter \>\n|- m_count\l|+ SimpleRefCount()\l+ SimpleRefCount()\l+ operator=()\l+ Ref()\l+ Unref()\l+ GetReferenceCount()\l+ Cleanup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da1/classns3_1_1SimpleRefCount.html"];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node6 [label="{ns3::ObjectBase\n||+ ~ObjectBase()\l+ GetInstanceTypeId()\l+ SetAttribute()\l+ SetAttributeFailSafe()\l+ GetAttribute()\l+ GetAttributeFailSafe()\l+ TraceConnect()\l+ TraceConnectWithoutContext()\l+ TraceDisconnect()\l+ TraceDisconnectWithoutContext()\l+ GetTypeId()\l# NotifyConstructionCompleted()\l# ConstructSelf()\l- DoSet()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/dac/classns3_1_1ObjectBase.html",tooltip="Anchor the ns-3 type and attribute system. "];
  Node7 -> Node4 [color="grey25",fontsize="10",style="solid",label=" -m_tid" ,arrowhead="odiamond"];
  Node7 [label="{ns3::TypeId\n|- m_tid\l|+ TypeId()\l+ GetParent()\l+ HasParent()\l+ IsChildOf()\l+ GetGroupName()\l+ GetName()\l+ GetHash()\l+ GetSize()\l+ HasConstructor()\l+ GetAttributeN()\land 26 more...\l+ LookupByName()\l+ LookupByNameFailSafe()\l+ LookupByHash()\l+ LookupByHashFailSafe()\l+ GetRegisteredN()\l+ GetRegistered()\l- TypeId()\l- DoAddConstructor()\l* operator==\l* operator!=\l* operator\<\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d11/classns3_1_1TypeId.html",tooltip="a unique identifier for an interface. "];
  Node8 -> Node4 [color="grey25",fontsize="10",style="solid",label=" -m_aggregates" ,arrowhead="odiamond"];
  Node8 [label="{ns3::Object::Aggregates\n|+ n\l|}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/de9/structns3_1_1Object_1_1Aggregates.html"];
  Node4 -> Node8 [color="grey25",fontsize="10",style="solid",label=" +buffer" ,arrowhead="odiamond"];
  Node9 -> Node3 [color="grey25",fontsize="10",style="solid",label=" -m_next" ,arrowhead="odiamond"];
  Node9 [label="{ns3::Ptr\< ns3::Propagation\lLossModel \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node3 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node10 -> Node2 [color="grey25",fontsize="10",style="solid",label=" #m_randVariable" ,arrowhead="odiamond"];
  Node10 [label="{ns3::Ptr\< ns3::NormalRandom\lVariable \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node11 -> Node10 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node11 [label="{ns3::NormalRandomVariable\n|+ INFINITE_VALUE\l- m_mean\l- m_variance\l- m_bound\l- m_nextValid\l- m_next\l|+ NormalRandomVariable()\l+ GetMean()\l+ GetVariance()\l+ GetBound()\l+ GetValue()\l+ GetInteger()\l+ GetValue()\l+ GetInteger()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/d87/classns3_1_1NormalRandomVariable.html",tooltip="The normal (Gaussian) distribution Random Number Generator (RNG) that allows stream numbers to be set..."];
  Node12 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node12 [label="{ns3::RandomVariableStream\n|- m_isAntithetic\l- m_stream\l|+ RandomVariableStream()\l+ ~RandomVariableStream()\l+ SetStream()\l+ GetStream()\l+ SetAntithetic()\l+ IsAntithetic()\l+ GetValue()\l+ GetInteger()\l+ GetTypeId()\l# Peek()\l- RandomVariableStream()\l- operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/daa/classns3_1_1RandomVariableStream.html",tooltip="The basic uniform Random Number Generator (RNG). "];
  Node4 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node13 -> Node12 [color="grey25",fontsize="10",style="solid",label=" -m_rng" ,arrowhead="odiamond"];
  Node13 [label="{ns3::RngStream\n|- m_currentState\l|+ RngStream()\l+ RngStream()\l+ RandU01()\l- AdvanceNthBy()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/d35/classns3_1_1RngStream.html",tooltip="Combined Multiple-Recursive Generator MRG32k3a. "];
  Node14 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_prevTime" ,arrowhead="odiamond"];
  Node14 [label="{ns3::Time\n|- m_data\l- g_markingTimes\l|+ operator=()\l+ Time()\l+ Time()\l+ Time()\l+ ~Time()\l+ IsZero()\l+ IsNegative()\l+ IsPositive()\l+ IsStrictlyNegative()\l+ IsStrictlyPositive()\l+ Compare()\l+ operator int64x64_t()\l+ As()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ GetYears()\l+ GetDays()\l+ GetHours()\l+ GetMinutes()\l+ GetSeconds()\l+ GetMilliSeconds()\l+ GetMicroSeconds()\l+ GetNanoSeconds()\l+ GetPicoSeconds()\l+ GetFemtoSeconds()\l+ GetTimeStep()\l+ GetDouble()\l+ GetInteger()\l+ ToInteger()\l+ ToDouble()\l+ To()\l+ Min()\l+ Max()\l+ SetResolution()\l+ GetResolution()\l+ From()\l+ StaticInit()\l+ FromInteger()\l+ FromDouble()\l+ From()\l- PeekResolution()\l- PeekInformation()\l- SetDefaultNsResolution()\l- SetResolution()\l- ClearMarkedTimes()\l- Mark()\l- Clear()\l- ConvertTimes()\l* operator==\l* operator!=\l* operator\<=\l* operator\>=\l* operator\<\l* operator\>\l* operator+\l* operator-\l* operator*\l* operator*\l* operator/\l* operator/\l* operator+=\l* operator-=\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* GetYears()\l* GetDays()\l* GetHours()\l* GetMinutes()\l* GetSeconds()\l* GetMilliSeconds()\l* GetMicroSeconds()\l* GetNanoSeconds()\l* GetPicoSeconds()\l* GetFemtoSeconds()\l* GetTimeStep()\l* GetDouble()\l* GetInteger()\l* ToInteger()\l* ToDouble()\l* To()\l* FromInteger()\l* FromDouble()\l* From()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d04/classns3_1_1Time.html",tooltip="Simulation virtual time values and global simulation resolution. "];
  Node15 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_phyMacConfig" ,arrowhead="odiamond"];
  Node15 [label="{ns3::Ptr\< ns3::MmWavePhy\lMacCommon \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node16 -> Node15 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node16 [label="{ns3::MmWavePhyMacCommon\n|- m_symbolsPerSlot\l- m_symbolPeriod\l- m_symbolsPerSubframe\l- m_subframePeriod\l- m_ctrlSymbols\l- m_dlCtrlSymbols\l- m_ulCtrlSymbols\l- m_slotsPerSubframe\l- m_subframesPerFrame\l- m_numRefSymbols\land 18 more...\l|+ MmWavePhyMacCommon()\l+ ~MmWavePhyMacCommon()\l+ GetSymbPerSlot()\l+ GetSymbolPeriod()\l+ GetCtrlSymbols()\l+ GetDlCtrlSymbols()\l+ GetUlCtrlSymbols()\l+ GetSymbolsPerSubframe()\l+ GetSubframePeriod()\l+ GetTti()\land 52 more...\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/df4/classns3_1_1MmWavePhyMacCommon.html"];
  Node4 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node17 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_3gppNlos\n-m_3gppLos" ,arrowhead="odiamond"];
  Node17 [label="{ns3::Ptr\< MmWave3gppPropagation\lLossModel \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node18 -> Node17 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node18 [label="{MmWave3gppPropagationLoss\lModel\n|- m_lambda\l- m_frequency\l- m_minLoss\l- m_channelConditionMap\l- m_channelConditions\l- m_scenario\l- m_optionNlosEnabled\l- m_shadowingEnabled\l- m_inCar\l|+ MmWave3gppPropagationLoss\lModel()\l+ SetConfigurationParameters()\l+ SetMinLoss()\l+ GetMinLoss()\l+ GetFrequency()\l+ GetChannelCondition()\l+ GetScenario()\l+ GetLoss()\l+ GetTypeId()\l- MmWave3gppPropagationLoss\lModel()\l- operator=()\l- DoCalcRxPower()\l- DoAssignStreams()\l- UpdateConditionMap()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d49/classMmWave3gppPropagationLossModel.html"];
  Node3 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node19 -> Node18 [color="grey25",fontsize="10",style="solid",label=" -m_uniformVar" ,arrowhead="odiamond"];
  Node19 [label="{ns3::Ptr\< UniformRandomVariable \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node20 -> Node19 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node20 [label="{ns3::UniformRandomVariable\n||+ UniformRandomVariable()\l+ GetMin()\l+ GetMax()\l+ GetValue()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d0/d5b/classns3_1_1UniformRandomVariable.html",tooltip="The uniform distribution Random Number Generator (RNG). "];
  Node12 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node21 -> Node18 [color="grey25",fontsize="10",style="solid",label=" -m_phyMacConfig" ,arrowhead="odiamond"];
  Node21 [label="{ns3::Ptr\< MmWavePhyMacCommon \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node16 -> Node21 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
  Node22 -> Node18 [color="grey25",fontsize="10",style="solid",label=" -m_norVar" ,arrowhead="odiamond"];
  Node22 [label="{ns3::Ptr\< NormalRandomVariable \>\n||+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ Ptr()\l+ ~Ptr()\l+ operator=()\l+ operator-\>()\l+ operator-\>()\l+ operator*()\l+ operator*()\l+ operator!()\l+ operator Tester *()\l- Acquire()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d90/classns3_1_1Ptr.html"];
  Node11 -> Node22 [color="grey25",fontsize="10",style="solid",label=" -m_ptr" ,arrowhead="odiamond"];
}
