digraph "ns3::NetDevice"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{ns3::NetDevice\n|+ isEnbTypeForDc\l|+ ~NetDevice()\l+ SetIfIndex()\l+ GetIfIndex()\l+ GetChannel()\l+ SetAddress()\l+ GetAddress()\l+ SetMtu()\l+ GetMtu()\l+ IsLinkUp()\l+ AddLinkChangeCallback()\land 15 more...\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{ns3::Object\n|- m_tid\l- m_disposed\l- m_initialized\l- m_aggregates\l- m_getObjectCount\l|+ Object()\l+ ~Object()\l+ GetInstanceTypeId()\l+ GetObject()\l+ GetObject()\l+ Dispose()\l+ AggregateObject()\l+ GetAggregateIterator()\l+ Initialize()\l+ IsInitialized()\l+ GetTypeId()\l# NotifyNewAggregate()\l# DoInitialize()\l# DoDispose()\l# Object()\l- DoGetObject()\l- Check()\l- CheckLoose()\l- SetTypeId()\l- Construct()\l- UpdateSortedArray()\l- DoDelete()\l* CopyObject\l* CopyObject\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d77/classns3_1_1Object.html",tooltip="A base class which provides memory management and object aggregation. "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{ns3::SimpleRefCount\l\< Object, ObjectBase,\l ObjectDeleter \>\n|- m_count\l|+ SimpleRefCount()\l+ SimpleRefCount()\l+ operator=()\l+ Ref()\l+ Unref()\l+ GetReferenceCount()\l+ Cleanup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da1/classns3_1_1SimpleRefCount.html"];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{ns3::ObjectBase\n||+ ~ObjectBase()\l+ GetInstanceTypeId()\l+ SetAttribute()\l+ SetAttributeFailSafe()\l+ GetAttribute()\l+ GetAttributeFailSafe()\l+ TraceConnect()\l+ TraceConnectWithoutContext()\l+ TraceDisconnect()\l+ TraceDisconnectWithoutContext()\l+ GetTypeId()\l# NotifyConstructionCompleted()\l# ConstructSelf()\l- DoSet()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/dac/classns3_1_1ObjectBase.html",tooltip="Anchor the ns-3 type and attribute system. "];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 [label="{ns3::AlohaNoackNetDevice\n|- m_queue\l- m_macTxTrace\l- m_macTxDropTrace\l- m_macPromiscRxTrace\l- m_macRxTrace\l- m_node\l- m_channel\l- m_address\l- m_rxCallback\l- m_promiscRxCallback\land 8 more...\l|+ AlohaNoackNetDevice()\l+ ~AlohaNoackNetDevice()\l+ SetQueue()\l+ NotifyTransmissionEnd()\l+ NotifyReceptionStart()\l+ NotifyReceptionEndError()\l+ NotifyReceptionEndOk()\l+ SetChannel()\l+ SetGenericPhyTxStartCallback()\l+ SetPhy()\land 25 more...\l+ GetTypeId()\l- NotifyGuardIntervalEnd()\l- DoDispose()\l- StartTransmission()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/dd6/classns3_1_1AlohaNoackNetDevice.html"];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node6 [label="{ns3::BridgeNetDevice\n|- m_rxCallback\l- m_promiscRxCallback\l- m_address\l- m_expirationTime\l- m_learnState\l- m_node\l- m_channel\l- m_ports\l- m_ifIndex\l- m_mtu\l- m_enableLearning\l|+ BridgeNetDevice()\l+ ~BridgeNetDevice()\l+ AddBridgePort()\l+ GetNBridgePorts()\l+ GetBridgePort()\l+ SetIfIndex()\l+ GetIfIndex()\l+ GetChannel()\l+ SetAddress()\l+ GetAddress()\land 19 more...\l+ GetTypeId()\l# DoDispose()\l# ReceiveFromDevice()\l# ForwardUnicast()\l# ForwardBroadcast()\l# Learn()\l# GetLearnedState()\l- BridgeNetDevice()\l- operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d8d/classns3_1_1BridgeNetDevice.html",tooltip="a virtual net device that bridges multiple LAN segments "];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node7 [label="{ns3::CsmaNetDevice\n|- m_deviceId\l- m_sendEnable\l- m_receiveEnable\l- m_txMachineState\l- m_encapMode\l- m_bps\l- m_tInterframeGap\l- m_backoff\l- m_currentPkt\l- m_channel\land 25 more...\l- DEFAULT_MTU\l|+ CsmaNetDevice()\l+ ~CsmaNetDevice()\l+ SetInterframeGap()\l+ SetBackoffParams()\l+ Attach()\l+ SetQueue()\l+ GetQueue()\l+ SetReceiveErrorModel()\l+ Receive()\l+ IsSendEnabled()\land 30 more...\l+ GetTypeId()\l# DoDispose()\l# AddHeader()\l# DoInitialize()\l# NotifyNewAggregate()\l- operator=()\l- CsmaNetDevice()\l- Init()\l- TransmitStart()\l- TransmitCompleteEvent()\l- TransmitReadyEvent()\l- TransmitAbort()\l- NotifyLinkUp()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/df2/classns3_1_1CsmaNetDevice.html",tooltip="A Device for a Csma Network Link. "];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node8 [label="{ns3::FdNetDevice\n|- m_node\l- m_nodeId\l- m_ifIndex\l- m_mtu\l- m_fd\l- m_fdReader\l- m_address\l- m_encapMode\l- m_linkUp\l- m_linkChangeCallbacks\land 20 more...\l|+ FdNetDevice()\l+ ~FdNetDevice()\l+ SetEncapsulationMode()\l+ GetEncapsulationMode()\l+ SetFileDescriptor()\l+ Start()\l+ Stop()\l+ SetIfIndex()\l+ GetIfIndex()\l+ GetChannel()\land 23 more...\l+ GetTypeId()\l# DoDispose()\l- FdNetDevice()\l- StartDevice()\l- StopDevice()\l- ReceiveCallback()\l- ForwardUp()\l- TransmitStart()\l- NotifyLinkUp()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d50/classns3_1_1FdNetDevice.html",tooltip="a NetDevice to read/write network traffic from/into a file descriptor. "];
  Node1 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node9 [label="{ns3::LoopbackNetDevice\n|- m_rxCallback\l- m_promiscCallback\l- m_node\l- m_mtu\l- m_ifIndex\l- m_address\l|+ LoopbackNetDevice()\l+ SetIfIndex()\l+ GetIfIndex()\l+ GetChannel()\l+ SetAddress()\l+ GetAddress()\l+ SetMtu()\l+ GetMtu()\l+ IsLinkUp()\l+ AddLinkChangeCallback()\land 15 more...\l+ GetTypeId()\l# DoDispose()\l- Receive()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/dd4/classns3_1_1LoopbackNetDevice.html",tooltip="Virtual network interface that loops back any data sent to it to be immediately received on the same ..."];
  Node1 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node10 [label="{ns3::LrWpanNetDevice\n|- m_mac\l- m_phy\l- m_csmaca\l- m_node\l- m_configComplete\l- m_useAcks\l- m_linkUp\l- m_ifIndex\l- m_linkChanges\l- m_receiveCallback\l|+ LrWpanNetDevice()\l+ ~LrWpanNetDevice()\l+ SetMac()\l+ SetPhy()\l+ SetCsmaCa()\l+ SetChannel()\l+ GetMac()\l+ GetPhy()\l+ GetCsmaCa()\l+ SetIfIndex()\land 25 more...\l+ GetTypeId()\l- DoDispose()\l- DoInitialize()\l- LinkUp()\l- LinkDown()\l- DoGetChannel()\l- CompleteConfig()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/d73/classns3_1_1LrWpanNetDevice.html",tooltip="Network layer to device interface. "];
  Node1 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node11 [label="{ns3::LteNetDevice\n|# m_rxCallback\l- m_node\l- m_linkChangeCallbacks\l- m_ifIndex\l- m_linkUp\l- m_mtu\l- m_address\l|+ LteNetDevice()\l+ ~LteNetDevice()\l+ DoDispose()\l+ SetIfIndex()\l+ GetIfIndex()\l+ GetChannel()\l+ SetMtu()\l+ GetMtu()\l+ SetAddress()\l+ GetAddress()\land 17 more...\l+ GetTypeId()\l- LteNetDevice()\l- operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/dc4/classns3_1_1LteNetDevice.html"];
  Node11 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node12 [label="{ns3::LteEnbNetDevice\n|- m_isConstructed\l- m_isConfigured\l- m_mac\l- m_phy\l- m_rrc\l- m_scheduler\l- m_handoverAlgorithm\l- m_anr\l- m_ffrAlgorithm\l- m_cellId\land 6 more...\l|+ LteEnbNetDevice()\l+ ~LteEnbNetDevice()\l+ DoDispose()\l+ Send()\l+ GetMac()\l+ GetPhy()\l+ GetRrc()\l+ GetCellId()\l+ GetUlBandwidth()\l+ SetUlBandwidth()\land 10 more...\l+ GetTypeId()\l# DoInitialize()\l- UpdateConfig()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/de9/classns3_1_1LteEnbNetDevice.html"];
  Node11 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node13 [label="{ns3::LteUeNetDevice\n|- m_isConstructed\l- m_targetEnb\l- m_mac\l- m_phy\l- m_rrc\l- m_nas\l- m_imsi\l- m_dlEarfcn\l- m_csgId\l|+ LteUeNetDevice()\l+ ~LteUeNetDevice()\l+ DoDispose()\l+ Send()\l+ GetMac()\l+ GetRrc()\l+ GetPhy()\l+ GetNas()\l+ GetImsi()\l+ GetDlEarfcn()\l+ SetDlEarfcn()\l+ GetCsgId()\l+ SetCsgId()\l+ SetTargetEnb()\l+ GetTargetEnb()\l+ GetTypeId()\l# DoInitialize()\l- UpdateConfig()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/d93/classns3_1_1LteUeNetDevice.html"];
  Node1 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node14 [label="{ns3::McUeNetDevice\n|# m_rxCallback\l- m_macaddress\l- m_node\l- m_mtu\l- m_linkUp\l- m_ifIndex\l- m_isConstructed\l- m_linkChangeCallbacks\l- m_lteTargetEnb\l- m_lteMac\l- m_ltePhy\land 16 more...\l|+ McUeNetDevice()\l+ ~McUeNetDevice()\l+ DoDispose()\l+ SetIfIndex()\l+ GetIfIndex()\l+ GetChannel()\l+ SetAddress()\l+ GetAddress()\l+ SetMtu()\l+ GetMtu()\land 44 more...\l+ GetTypeId()\l# DoInitialize()\l- UpdateConfig()\l- DoSend()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/df3/classns3_1_1McUeNetDevice.html"];
  Node1 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node15 [label="{ns3::MeshPointDevice\n|- m_rxCallback\l- m_promiscRxCallback\l- m_address\l- m_node\l- m_ifaces\l- m_ifIndex\l- m_mtu\l- m_channel\l- m_routingProtocol\l- m_rxStats\l- m_txStats\l- m_fwdStats\l|+ MeshPointDevice()\l+ ~MeshPointDevice()\l+ SetIfIndex()\l+ GetIfIndex()\l+ GetChannel()\l+ GetAddress()\l+ SetAddress()\l+ SetMtu()\l+ GetMtu()\l+ IsLinkUp()\land 17 more...\l+ AddInterface()\l+ GetNInterfaces()\l+ GetInterface()\l+ GetInterfaces()\l+ SetRoutingProtocol()\l+ GetRoutingProtocol()\l+ Report()\l+ ResetStats()\l+ GetTypeId()\l- ReceiveFromDevice()\l- Forward()\l- DoSend()\l* AddInterface()\l* GetNInterfaces()\l* GetInterface()\l* GetInterfaces()\l* SetRoutingProtocol()\l* GetRoutingProtocol()\l* Report()\l* ResetStats()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/da9/classns3_1_1MeshPointDevice.html",tooltip="Virtual net device modeling mesh point. "];
  Node1 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node16 [label="{ns3::MmWaveNetDevice\n|# m_rxCallback\l- m_macaddress\l- m_node\l- m_mtu\l- m_linkUp\l- m_ifIndex\l|+ MmWaveNetDevice()\l+ ~MmWaveNetDevice()\l+ DoDispose()\l+ SetIfIndex()\l+ GetIfIndex()\l+ GetChannel()\l+ SetAddress()\l+ GetAddress()\l+ SetMtu()\l+ GetMtu()\land 20 more...\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/d87/classns3_1_1MmWaveNetDevice.html"];
  Node16 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node17 [label="{ns3::MmWaveEnbNetDevice\n|+ isAdditionalEnb\l- m_phy\l- m_mac\l- m_scheduler\l- m_rrc\l- m_cellId\l- m_Bandwidth\l- m_Earfcn\l- m_isConstructed\l- m_isConfigured\l- m_antennaNum\l|+ MmWaveEnbNetDevice()\l+ ~MmWaveEnbNetDevice()\l+ DoDispose()\l+ DoSend()\l+ GetPhy()\l+ GetCellId()\l+ GetBandwidth()\l+ SetBandwidth()\l+ SetEarfcn()\l+ GetEarfcn()\land 6 more...\l+ GetTypeId()\l# DoInitialize()\l# UpdateConfig()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/d13/classns3_1_1MmWaveEnbNetDevice.html"];
  Node16 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node18 [label="{ns3::MmWaveUeNetDevice\n|- m_targetEnb\l- m_phy\l- m_mac\l- m_rrc\l- m_nas\l- m_imsi\l- m_earfcn\l- m_csgId\l- m_isConstructed\l- m_antennaNum\l|+ MmWaveUeNetDevice()\l+ ~MmWaveUeNetDevice()\l+ DoDispose()\l+ GetCsgId()\l+ SetCsgId()\l+ UpdateConfig()\l+ DoSend()\l+ GetPhy()\l+ GetMac()\l+ GetImsi()\land 8 more...\l+ GetTypeId()\l# DoInitialize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/dff/classns3_1_1MmWaveUeNetDevice.html"];
  Node1 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node19 [label="{ns3::NonCommunicatingNet\lDevice\n|- m_node\l- m_channel\l- m_ifIndex\l- m_phy\l|+ NonCommunicatingNetDevice()\l+ ~NonCommunicatingNetDevice()\l+ SetChannel()\l+ SetPhy()\l+ GetPhy()\l+ SetIfIndex()\l+ GetIfIndex()\l+ GetChannel()\l+ SetMtu()\l+ GetMtu()\land 19 more...\l+ GetTypeId()\l- DoDispose()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/ded/classns3_1_1NonCommunicatingNetDevice.html"];
  Node1 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node20 [label="{ns3::OpenFlowSwitchNetDevice\n|- m_rxCallback\l- m_promiscRxCallback\l- m_address\l- m_node\l- m_channel\l- m_ifIndex\l- m_mtu\l- m_packetData\l- m_ports\l- m_controller\land 7 more...\l|+ OpenFlowSwitchNetDevice()\l+ ~OpenFlowSwitchNetDevice()\l+ SetController()\l+ AddSwitchPort()\l+ AddVPort()\l+ StatsDump()\l+ StatsDone()\l+ DoOutput()\l+ ForwardControlInput()\l+ GetChain()\land 28 more...\l+ GetTypeId()\l+ GetManufacturerDescription()\l+ GetHardwareDescription()\l+ GetSoftwareDescription()\l+ GetSerialNumber()\l# DoDispose()\l# ReceiveFromDevice()\l# BufferFromPacket()\l- AddFlow()\l- ModFlow()\l- OutputAll()\l- OutputPacket()\l- OutputPort()\l- OutputControl()\l- SendErrorMsg()\l- SendFeaturesReply()\l- SendFlowExpired()\l- SendPortStatus()\land 8 more...\l- ReceiveFeaturesRequest()\l- ReceiveGetConfigRequest()\l- ReceiveSetConfig()\l- ReceivePacketOut()\l- ReceiveFlow()\l- ReceivePortMod()\l- ReceiveStatsRequest()\l- ReceiveEchoRequest()\l- ReceiveEchoReply()\l- ReceiveVPortMod()\l- ReceiveVPortTableFeatures\lRequest()\l* GetManufacturerDescription()\l* GetHardwareDescription()\l* GetSoftwareDescription()\l* GetSerialNumber()\l* ReceiveFeaturesRequest()\l* ReceiveGetConfigRequest()\l* ReceiveSetConfig()\l* ReceivePacketOut()\l* ReceiveFlow()\l* ReceivePortMod()\l* ReceiveStatsRequest()\l* ReceiveEchoRequest()\l* ReceiveEchoReply()\l* ReceiveVPortMod()\l* ReceiveVPortTableFeatures\lRequest()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/da1/classns3_1_1OpenFlowSwitchNetDevice.html",tooltip="A net device that switches multiple LAN segments via an OpenFlow-compatible flow table. "];
  Node1 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node21 [label="{ns3::PointToPointNetDevice\n|- m_txMachineState\l- m_bps\l- m_tInterframeGap\l- m_channel\l- m_queue\l- m_receiveErrorModel\l- m_macTxTrace\l- m_macTxDropTrace\l- m_macPromiscRxTrace\l- m_macRxTrace\land 19 more...\l- DEFAULT_MTU\l|+ PointToPointNetDevice()\l+ ~PointToPointNetDevice()\l+ SetDataRate()\l+ SetInterframeGap()\l+ Attach()\l+ SetQueue()\l+ GetQueue()\l+ SetReceiveErrorModel()\l+ Receive()\l+ SetIfIndex()\land 23 more...\l+ GetTypeId()\l# DoMpiReceive()\l# DoInitialize()\l# NotifyNewAggregate()\l- operator=()\l- PointToPointNetDevice()\l- DoDispose()\l- GetRemote()\l- AddHeader()\l- ProcessHeader()\l- TransmitStart()\l- TransmitComplete()\l- NotifyLinkUp()\l- PppToEther()\l- EtherToPpp()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/d2f/classns3_1_1PointToPointNetDevice.html",tooltip="A Device for a Point to Point Network Link. "];
  Node1 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node22 [label="{ns3::SimpleNetDevice\n|- m_channel\l- m_rxCallback\l- m_promiscCallback\l- m_node\l- m_queueInterface\l- m_mtu\l- m_ifIndex\l- m_address\l- m_receiveErrorModel\l- m_phyRxDropTrace\land 6 more...\l|+ SimpleNetDevice()\l+ Receive()\l+ SetChannel()\l+ SetQueue()\l+ GetQueue()\l+ SetReceiveErrorModel()\l+ SetIfIndex()\l+ GetIfIndex()\l+ GetChannel()\l+ SetAddress()\land 20 more...\l+ GetTypeId()\l# DoDispose()\l# DoInitialize()\l# NotifyNewAggregate()\l- TransmitComplete()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/d8f/classns3_1_1SimpleNetDevice.html",tooltip="simple net device for simple things and testing "];
  Node22 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node23 [label="{ns3::LteSimpleNetDevice\n||+ LteSimpleNetDevice()\l+ LteSimpleNetDevice()\l+ ~LteSimpleNetDevice()\l+ DoDispose()\l+ Send()\l+ GetTypeId()\l# DoInitialize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/d9d/classns3_1_1LteSimpleNetDevice.html"];
  Node1 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node24 [label="{ns3::SixLowPanNetDevice\n|- m_rxCallback\l- m_promiscRxCallback\l- m_txTrace\l- m_rxTrace\l- m_dropTrace\l- m_fragments\l- m_fragmentsTimers\l- m_fragmentExpirationTimeout\l- m_fragmentReassemblyListSize\l- m_useIphc\land 8 more...\l|+ SixLowPanNetDevice()\l+ SetIfIndex()\l+ GetIfIndex()\l+ GetChannel()\l+ SetAddress()\l+ GetAddress()\l+ SetMtu()\l+ GetMtu()\l+ IsLinkUp()\l+ AddLinkChangeCallback()\land 18 more...\l+ GetTypeId()\l# DoDispose()\l- SixLowPanNetDevice()\l- operator=()\l- ReceiveFromDevice()\l- DoSend()\l- MakeLinkLocalAddressFromMac()\l- MakeGlobalAddressFromMac()\l- CompressLowPanHc1()\l- DecompressLowPanHc1()\l- CompressLowPanIphc()\l- CanCompressLowPanNhc()\land 9 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d2b/classns3_1_1SixLowPanNetDevice.html",tooltip="Shim performing 6LoWPAN compression, decompression and fragmentation. "];
  Node1 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node25 [label="{ns3::TapBridge\n|- m_rxCallback\l- m_promiscRxCallback\l- m_node\l- m_ifIndex\l- m_mtu\l- m_sock\l- m_startEvent\l- m_stopEvent\l- m_fdReader\l- m_mode\land 14 more...\l|+ TapBridge()\l+ ~TapBridge()\l+ GetBridgedNetDevice()\l+ SetBridgedNetDevice()\l+ Start()\l+ Stop()\l+ SetMode()\l+ GetMode()\l+ SetIfIndex()\l+ GetIfIndex()\land 22 more...\l+ GetTypeId()\l# DoDispose()\l# ReceiveFromBridgedDevice()\l# DiscardFromBridgedDevice()\l- CreateTap()\l- StartTapDevice()\l- StopTapDevice()\l- ReadCallback()\l- ForwardToBridgedDevice()\l- Filter()\l- NotifyLinkUp()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/d97/classns3_1_1TapBridge.html",tooltip="A bridge to make it appear that a real host process is connected to an ns-3 net device. "];
  Node1 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node26 [label="{ns3::UanNetDevice\n|- m_trans\l- m_node\l- m_channel\l- m_mac\l- m_phy\l- m_ifIndex\l- m_mtu\l- m_linkup\l- m_linkChanges\l- m_forwardUp\l- m_rxLogger\l- m_txLogger\l- m_cleared\l|+ UanNetDevice()\l+ ~UanNetDevice()\l+ SetMac()\l+ SetPhy()\l+ SetChannel()\l+ GetMac()\l+ GetPhy()\l+ GetTransducer()\l+ SetTransducer()\l+ Clear()\land 25 more...\l+ GetTypeId()\l# DoDispose()\l- ForwardUp()\l- DoGetChannel()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/d57/classns3_1_1UanNetDevice.html"];
  Node1 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node27 [label="{ns3::VirtualNetDevice\n|- m_myAddress\l- m_sendCb\l- m_macRxTrace\l- m_macTxTrace\l- m_macPromiscRxTrace\l- m_snifferTrace\l- m_promiscSnifferTrace\l- m_node\l- m_rxCallback\l- m_promiscRxCallback\land 6 more...\l|+ VirtualNetDevice()\l+ ~VirtualNetDevice()\l+ SetSendCallback()\l+ SetNeedsArp()\l+ SetIsPointToPoint()\l+ SetSupportsSendFrom()\l+ SetMtu()\l+ Receive()\l+ SetIfIndex()\l+ GetIfIndex()\land 21 more...\l+ GetTypeId()\l# DoDispose()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/d03/classns3_1_1VirtualNetDevice.html",tooltip="A virtual device, similar to Linux TUN/TAP interfaces. "];
  Node1 -> Node28 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node28 [label="{ns3::WaveNetDevice\n|- m_macEntities\l- m_phyEntities\l- m_channelManager\l- m_channelScheduler\l- m_channelCoordinator\l- m_vsaManager\l- m_txProfile\l- m_addressChange\l- m_node\l- m_forwardUp\l- m_promiscRx\l- m_ifIndex\l- m_mtu\l- MAX_MSDU_SIZE\l- IPv4_PROT_NUMBER\l- IPv6_PROT_NUMBER\l|+ WaveNetDevice()\l+ ~WaveNetDevice()\l+ AddMac()\l+ GetMac()\l+ GetMacs()\l+ AddPhy()\l+ GetPhy()\l+ GetPhys()\l+ SetChannelScheduler()\l+ GetChannelScheduler()\land 40 more...\l+ GetTypeId()\l- DoDispose()\l- DoInitialize()\l- IsAvailableChannel()\l- ForwardUp()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/d1c/classns3_1_1WaveNetDevice.html"];
  Node1 -> Node29 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node29 [label="{ns3::WifiNetDevice\n|- m_node\l- m_phy\l- m_mac\l- m_stationManager\l- m_queueInterface\l- m_forwardUp\l- m_promiscRx\l- m_rxLogger\l- m_txLogger\l- m_ifIndex\l- m_linkUp\l- m_linkChanges\l- m_mtu\l- m_configComplete\l- MAX_MSDU_SIZE\l|+ WifiNetDevice()\l+ ~WifiNetDevice()\l+ SetMac()\l+ SetPhy()\l+ SetRemoteStationManager()\l+ GetMac()\l+ GetPhy()\l+ GetRemoteStationManager()\l+ SetIfIndex()\l+ GetIfIndex()\land 22 more...\l+ GetTypeId()\l# DoDispose()\l# DoInitialize()\l# NotifyNewAggregate()\l# ForwardUp()\l- WifiNetDevice()\l- operator=()\l- LinkUp()\l- LinkDown()\l- DoGetChannel()\l- CompleteConfig()\l- FlowControlConfig()\l- SelectQueue()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/d58/classns3_1_1WifiNetDevice.html",tooltip="Hold together all Wifi-related objects.This class holds together ns3::Channel, ns3::WifiPhy, ns3::WifiMac, and, ns3::WifiRemoteStationManager. "];
  Node1 -> Node30 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node30 [label="{ns3::WimaxNetDevice\n|+ m_traceRx\l+ m_traceTx\l+ m_direction\l+ m_frameStartTime\l- m_node\l- m_phy\l- m_forwardUp\l- m_promiscRx\l- m_ifIndex\l- m_name\l- m_linkUp\l- m_linkChange\l- m_mtu\l- m_dlChannels\land 13 more...\l- MAX_MSDU_SIZE\l- DEFAULT_MSDU_SIZE\l- m_nrFrames\l|+ WimaxNetDevice()\l+ ~WimaxNetDevice()\l+ SetTtg()\l+ GetTtg()\l+ SetRtg()\l+ GetRtg()\l+ Attach()\l+ SetPhy()\l+ GetPhy()\l+ SetChannel()\land 60 more...\l+ GetTypeId()\l- WimaxNetDevice()\l- operator=()\l- DoSend()\l- DoReceive()\l- DoGetChannel()\l- Receive()\l- InitializeChannels()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d52/classns3_1_1WimaxNetDevice.html",tooltip="Hold together all WiMAX-related objects in a NetDevice.This class holds together ns3::WimaxPhy, ns3::WimaxConnection, ns3::ConectionManager, ns3::BurstProfileManager, and ns3::BandwidthManager. "];
  Node30 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node31 [label="{ns3::BaseStationNetDevice\n|- m_initialRangInterval\l- m_dcdInterval\l- m_ucdInterval\l- m_intervalT8\l- m_maxRangCorrectionRetries\l- m_maxInvitedRangRetries\l- m_rangReqOppSize\l- m_bwReqOppSize\l- m_nrDlSymbols\l- m_nrUlSymbols\land 33 more...\l|+ BaseStationNetDevice()\l+ BaseStationNetDevice()\l+ BaseStationNetDevice()\l+ ~BaseStationNetDevice()\l+ SetInitialRangingInterval()\l+ InitBaseStationNetDevice()\l+ GetInitialRangingInterval()\l+ SetDcdInterval()\l+ GetDcdInterval()\l+ SetUcdInterval()\land 40 more...\l+ GetTypeId()\l- DoDispose()\l- StartFrame()\l- StartDlSubFrame()\l- EndDlSubFrame()\l- StartUlSubFrame()\l- EndUlSubFrame()\l- EndFrame()\l- DoSend()\l- DoReceive()\l- CreateMapMessages()\land 13 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/d73/classns3_1_1BaseStationNetDevice.html"];
  Node30 -> Node32 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node32 [label="{ns3::SubscriberStationNet\lDevice\n|+ m_linkManager\l- m_lostDlMapInterval\l- m_lostUlMapInterval\l- m_maxDcdInterval\l- m_maxUcdInterval\l- m_intervalT1\l- m_intervalT2\l- m_intervalT3\l- m_intervalT7\l- m_intervalT12\l- m_intervalT20\land 33 more...\l|+ SubscriberStationNetDevice()\l+ SubscriberStationNetDevice()\l+ ~SubscriberStationNetDevice()\l+ InitSubscriberStationNet\lDevice()\l+ SetLostDlMapInterval()\l+ GetLostDlMapInterval()\l+ SetLostUlMapInterval()\l+ GetLostUlMapInterval()\l+ SetMaxDcdInterval()\l+ GetMaxDcdInterval()\land 48 more...\l+ GetTypeId()\l- DoDispose()\l- DoSend()\l- DoReceive()\l- ProcessDlMap()\l- ProcessUlMap()\l- ProcessDcd()\l- ProcessUcd()\l- GetDefaultLostDlMapInterval()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/de5/classns3_1_1SubscriberStationNetDevice.html"];
}
