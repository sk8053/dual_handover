digraph "ns3::WifiRemoteStationManager"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{ns3::WifiRemoteStationManager\n|- m_wifiPhy\l- m_wifiMac\l- m_bssBasicRateSet\l- m_bssBasicMcsSet\l- m_states\l- m_stations\l- m_defaultTxMode\l- m_defaultTxMcs\l- m_qosSupported\l- m_htSupported\land 21 more...\l|+ WifiRemoteStationManager()\l+ ~WifiRemoteStationManager()\l+ SetupPhy()\l+ SetupMac()\l+ GetMaxSsrc()\l+ GetMaxSlrc()\l+ GetRtsCtsThreshold()\l+ GetFragmentationThreshold()\l+ SetMaxSsrc()\l+ SetMaxSlrc()\land 93 more...\l+ GetTypeId()\l# DoDispose()\l# GetSupported()\l# GetNSupported()\l# GetQosSupported()\l# GetHtSupported()\l# GetVhtSupported()\l# GetHeSupported()\l# GetMcsSupported()\l# GetNMcsSupported()\l# GetNonErpSupported()\land 15 more...\l- DoNeedRts()\l- DoNeedRtsRetransmission()\l- DoNeedDataRetransmission()\l- DoNeedFragmentation()\l- IsLowLatency()\l- DoCreateStation()\l- DoGetDataTxVector()\l- DoGetRtsTxVector()\l- DoGetCtsTxPowerLevel()\l- DoGetAckTxPowerLevel()\land 32 more...\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{ns3::Object\n|- m_tid\l- m_disposed\l- m_initialized\l- m_aggregates\l- m_getObjectCount\l|+ Object()\l+ ~Object()\l+ GetInstanceTypeId()\l+ GetObject()\l+ GetObject()\l+ Dispose()\l+ AggregateObject()\l+ GetAggregateIterator()\l+ Initialize()\l+ IsInitialized()\l+ GetTypeId()\l# NotifyNewAggregate()\l# DoInitialize()\l# DoDispose()\l# Object()\l- DoGetObject()\l- Check()\l- CheckLoose()\l- SetTypeId()\l- Construct()\l- UpdateSortedArray()\l- DoDelete()\l* CopyObject\l* CopyObject\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d77/classns3_1_1Object.html",tooltip="A base class which provides memory management and object aggregation. "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{ns3::SimpleRefCount\l\< Object, ObjectBase,\l ObjectDeleter \>\n|- m_count\l|+ SimpleRefCount()\l+ SimpleRefCount()\l+ operator=()\l+ Ref()\l+ Unref()\l+ GetReferenceCount()\l+ Cleanup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da1/classns3_1_1SimpleRefCount.html"];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{ns3::ObjectBase\n||+ ~ObjectBase()\l+ GetInstanceTypeId()\l+ SetAttribute()\l+ SetAttributeFailSafe()\l+ GetAttribute()\l+ GetAttributeFailSafe()\l+ TraceConnect()\l+ TraceConnectWithoutContext()\l+ TraceDisconnect()\l+ TraceDisconnectWithoutContext()\l+ GetTypeId()\l# NotifyConstructionCompleted()\l# ConstructSelf()\l- DoSet()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/dac/classns3_1_1ObjectBase.html",tooltip="Anchor the ns-3 type and attribute system. "];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 [label="{ns3::AarfcdWifiManager\n|- m_minTimerThreshold\l- m_minSuccessThreshold\l- m_successK\l- m_maxSuccessThreshold\l- m_timerK\l- m_minRtsWnd\l- m_maxRtsWnd\l- m_turnOffRtsAfterRateDecrease\l- m_turnOnRtsAfterRateIncrease\l- m_currentRate\l|+ AarfcdWifiManager()\l+ ~AarfcdWifiManager()\l+ SetHtSupported()\l+ SetVhtSupported()\l+ SetHeSupported()\l+ GetTypeId()\l- DoCreateStation()\l- DoReportRxOk()\l- DoReportRtsFailed()\l- DoReportDataFailed()\l- DoReportRtsOk()\l- DoReportDataOk()\l- DoReportFinalRtsFailed()\l- DoReportFinalDataFailed()\l- DoGetDataTxVector()\l- DoGetRtsTxVector()\land 7 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/d61/classns3_1_1AarfcdWifiManager.html",tooltip="an implementation of the AARF-CD algorithmThis algorithm was first described in \"Efficient Collision ..."];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node6 [label="{ns3::AarfWifiManager\n|- m_minTimerThreshold\l- m_minSuccessThreshold\l- m_successK\l- m_maxSuccessThreshold\l- m_timerK\l- m_currentRate\l|+ AarfWifiManager()\l+ ~AarfWifiManager()\l+ SetHtSupported()\l+ SetVhtSupported()\l+ SetHeSupported()\l+ GetTypeId()\l- DoCreateStation()\l- DoReportRxOk()\l- DoReportRtsFailed()\l- DoReportDataFailed()\l- DoReportRtsOk()\l- DoReportDataOk()\l- DoReportFinalRtsFailed()\l- DoReportFinalDataFailed()\l- DoGetDataTxVector()\l- DoGetRtsTxVector()\l- IsLowLatency()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/d63/classns3_1_1AarfWifiManager.html",tooltip="AARF Rate control algorithmThis class implements the AARF rate control algorithm which was initially ..."];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node7 [label="{ns3::AmrrWifiManager\n|- m_updatePeriod\l- m_failureRatio\l- m_successRatio\l- m_maxSuccessThreshold\l- m_minSuccessThreshold\l- m_currentRate\l|+ AmrrWifiManager()\l+ ~AmrrWifiManager()\l+ SetHtSupported()\l+ SetVhtSupported()\l+ SetHeSupported()\l+ GetTypeId()\l- DoCreateStation()\l- DoReportRxOk()\l- DoReportRtsFailed()\l- DoReportDataFailed()\l- DoReportRtsOk()\l- DoReportDataOk()\l- DoReportFinalRtsFailed()\l- DoReportFinalDataFailed()\l- DoGetDataTxVector()\l- DoGetRtsTxVector()\land 10 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d45/classns3_1_1AmrrWifiManager.html",tooltip="AMRR Rate control algorithmThis class implements the AMRR rate control algorithm which was initially ..."];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node8 [label="{ns3::AparfWifiManager\n|- m_succesMax1\l- m_succesMax2\l- m_failMax\l- m_powerMax\l- m_powerInc\l- m_powerDec\l- m_rateInc\l- m_rateDec\l- m_minPower\l- m_maxPower\l- m_powerChange\l- m_rateChange\l|+ AparfWifiManager()\l+ ~AparfWifiManager()\l+ SetupPhy()\l+ SetHtSupported()\l+ SetVhtSupported()\l+ SetHeSupported()\l+ GetTypeId()\l- DoCreateStation()\l- DoReportRxOk()\l- DoReportRtsFailed()\l- DoReportDataFailed()\l- DoReportRtsOk()\l- DoReportDataOk()\l- DoReportFinalRtsFailed()\l- DoReportFinalDataFailed()\l- DoGetDataTxVector()\l- DoGetRtsTxVector()\l- IsLowLatency()\l- CheckInit()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d5c/classns3_1_1AparfWifiManager.html"];
  Node1 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node9 [label="{ns3::ArfWifiManager\n|- m_timerThreshold\l- m_successThreshold\l- m_currentRate\l|+ ArfWifiManager()\l+ ~ArfWifiManager()\l+ SetHtSupported()\l+ SetVhtSupported()\l+ SetHeSupported()\l+ GetTypeId()\l- DoCreateStation()\l- DoReportRxOk()\l- DoReportRtsFailed()\l- DoReportDataFailed()\l- DoReportRtsOk()\l- DoReportDataOk()\l- DoReportFinalRtsFailed()\l- DoReportFinalDataFailed()\l- DoGetDataTxVector()\l- DoGetRtsTxVector()\l- IsLowLatency()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/d72/classns3_1_1ArfWifiManager.html",tooltip="ARF Rate control algorithm. "];
  Node1 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node10 [label="{ns3::CaraWifiManager\n|- m_timerTimeout\l- m_successThreshold\l- m_failureThreshold\l- m_probeThreshold\l- m_currentRate\l|+ CaraWifiManager()\l+ ~CaraWifiManager()\l+ SetHtSupported()\l+ SetVhtSupported()\l+ SetHeSupported()\l+ GetTypeId()\l- DoCreateStation()\l- DoReportRxOk()\l- DoReportRtsFailed()\l- DoReportDataFailed()\l- DoReportRtsOk()\l- DoReportDataOk()\l- DoReportFinalRtsFailed()\l- DoReportFinalDataFailed()\l- DoGetDataTxVector()\l- DoGetRtsTxVector()\l- DoNeedRts()\l- IsLowLatency()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/d78/classns3_1_1CaraWifiManager.html",tooltip="implement the CARA rate control algorithmImplement the CARA algorithm from: J. Kim, S. Kim, S. Choi, and D. Qiao. \"CARA: Collision-Aware Rate Adaptation for IEEE 802.11 WLANs.\" "];
  Node1 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node11 [label="{ns3::ConstantRateWifiManager\n|- m_dataMode\l- m_ctlMode\l|+ ConstantRateWifiManager()\l+ ~ConstantRateWifiManager()\l+ GetTypeId()\l- DoCreateStation()\l- DoReportRxOk()\l- DoReportRtsFailed()\l- DoReportDataFailed()\l- DoReportRtsOk()\l- DoReportDataOk()\l- DoReportFinalRtsFailed()\l- DoReportFinalDataFailed()\l- DoGetDataTxVector()\l- DoGetRtsTxVector()\l- IsLowLatency()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/d00/classns3_1_1ConstantRateWifiManager.html",tooltip="use constant rates for data and RTS transmissions "];
  Node1 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node12 [label="{ns3::IdealWifiManager\n|- m_ber\l- m_thresholds\l- m_currentRate\l|+ IdealWifiManager()\l+ ~IdealWifiManager()\l+ SetupPhy()\l+ SetHeSupported()\l+ GetTypeId()\l- DoInitialize()\l- DoCreateStation()\l- DoReportRxOk()\l- DoReportRtsFailed()\l- DoReportDataFailed()\l- DoReportRtsOk()\l- DoReportDataOk()\l- DoReportAmpduTxStatus()\l- DoReportFinalRtsFailed()\l- DoReportFinalDataFailed()\land 6 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/d5e/classns3_1_1IdealWifiManager.html",tooltip="Ideal rate control algorithmThis class implements an &#39;ideal&#39; rate control algorithm similar to RBAR i..."];
  Node1 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node13 [label="{ns3::MinstrelHtWifiManager\n|- m_updateStats\l- m_lookAroundRate\l- m_ewmaLevel\l- m_nSampleCol\l- m_frameLength\l- m_numGroups\l- m_numRates\l- m_useVhtOnly\l- m_printStats\l- m_minstrelGroups\l- m_legacyManager\l- m_uniformRandomVariable\l- m_rateChange\l|+ MinstrelHtWifiManager()\l+ ~MinstrelHtWifiManager()\l+ AssignStreams()\l+ SetupPhy()\l+ SetupMac()\l+ SetHeSupported()\l+ GetTypeId()\l- DoInitialize()\l- DoCreateStation()\l- DoReportRxOk()\l- DoReportRtsFailed()\l- DoReportDataFailed()\l- DoReportRtsOk()\l- DoReportDataOk()\l- DoReportFinalRtsFailed()\l- DoReportFinalDataFailed()\l- DoGetDataTxVector()\land 42 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/d09/classns3_1_1MinstrelHtWifiManager.html",tooltip="Implementation of Minstrel HT Rate Control AlgorithmMinstrel-HT is a rate adaptation mechanism for th..."];
  Node1 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node14 [label="{ns3::MinstrelWifiManager\n|- m_calcTxTime\l- m_updateStats\l- m_lookAroundRate\l- m_ewmaLevel\l- m_sampleCol\l- m_pktLen\l- m_printStats\l- m_uniformRandomVariable\l- m_currentRate\l|+ MinstrelWifiManager()\l+ ~MinstrelWifiManager()\l+ SetupPhy()\l+ SetupMac()\l+ SetHtSupported()\l+ SetVhtSupported()\l+ SetHeSupported()\l+ AssignStreams()\l+ UpdateRate()\l+ UpdateStats()\land 8 more...\l+ GetTypeId()\l- DoCreateStation()\l- DoReportRxOk()\l- DoReportRtsFailed()\l- DoReportDataFailed()\l- DoReportRtsOk()\l- DoReportDataOk()\l- DoReportFinalRtsFailed()\l- DoReportFinalDataFailed()\l- DoGetDataTxVector()\l- DoGetRtsTxVector()\land 9 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/d45/classns3_1_1MinstrelWifiManager.html",tooltip="Implementation of Minstrel Rate Control AlgorithmMinstrel is a rate control algorithm implemented in ..."];
  Node1 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node15 [label="{ns3::OnoeWifiManager\n|- m_updatePeriod\l- m_addCreditThreshold\l- m_raiseThreshold\l- m_currentRate\l|+ OnoeWifiManager()\l+ ~OnoeWifiManager()\l+ SetHtSupported()\l+ SetVhtSupported()\l+ SetHeSupported()\l+ GetTypeId()\l- DoCreateStation()\l- DoReportRxOk()\l- DoReportRtsFailed()\l- DoReportDataFailed()\l- DoReportRtsOk()\l- DoReportDataOk()\l- DoReportFinalRtsFailed()\l- DoReportFinalDataFailed()\l- DoGetDataTxVector()\l- DoGetRtsTxVector()\l- IsLowLatency()\l- UpdateRetry()\l- UpdateMode()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d36/classns3_1_1OnoeWifiManager.html",tooltip="an implementation of the rate control algorithm developed by Atsushi Onoe "];
  Node1 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node16 [label="{ns3::ParfWifiManager\n|- m_attemptThreshold\l- m_successThreshold\l- m_minPower\l- m_maxPower\l- m_powerChange\l- m_rateChange\l|+ ParfWifiManager()\l+ ~ParfWifiManager()\l+ SetupPhy()\l+ SetHtSupported()\l+ SetVhtSupported()\l+ SetHeSupported()\l+ GetTypeId()\l- DoCreateStation()\l- DoReportRxOk()\l- DoReportRtsFailed()\l- DoReportDataFailed()\l- DoReportRtsOk()\l- DoReportDataOk()\l- DoReportFinalRtsFailed()\l- DoReportFinalDataFailed()\l- DoGetDataTxVector()\l- DoGetRtsTxVector()\l- IsLowLatency()\l- CheckInit()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d0/ddc/classns3_1_1ParfWifiManager.html"];
  Node1 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node17 [label="{ns3::RraaWifiManager\n|- m_calcTxTime\l- m_sifs\l- m_difs\l- m_frameLength\l- m_ackLength\l- m_basic\l- m_timeout\l- m_alpha\l- m_beta\l- m_tau\l- m_currentRate\l|+ RraaWifiManager()\l+ ~RraaWifiManager()\l+ SetupPhy()\l+ SetupMac()\l+ SetHtSupported()\l+ SetVhtSupported()\l+ SetHeSupported()\l+ GetTypeId()\l- DoCreateStation()\l- DoReportRxOk()\l- DoReportRtsFailed()\l- DoReportDataFailed()\l- DoReportRtsOk()\l- DoReportDataOk()\l- DoReportFinalRtsFailed()\l- DoReportFinalDataFailed()\l- DoGetDataTxVector()\l- DoGetRtsTxVector()\land 14 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/dca/classns3_1_1RraaWifiManager.html",tooltip="Robust Rate Adaptation AlgorithmThis is an implementation of RRAA as described in \"Robust rate adapta..."];
  Node1 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node18 [label="{ns3::RrpaaWifiManager\n|- m_calcTxTime\l- m_sifs\l- m_difs\l- m_frameLength\l- m_ackLength\l- m_basic\l- m_timeout\l- m_alpha\l- m_beta\l- m_tau\land 8 more...\l|+ RrpaaWifiManager()\l+ ~RrpaaWifiManager()\l+ SetupPhy()\l+ SetupMac()\l+ SetHtSupported()\l+ SetVhtSupported()\l+ SetHeSupported()\l+ AssignStreams()\l+ GetTypeId()\l- DoCreateStation()\l- DoReportRxOk()\l- DoReportRtsFailed()\l- DoReportDataFailed()\l- DoReportRtsOk()\l- DoReportDataOk()\l- DoReportFinalRtsFailed()\l- DoReportFinalDataFailed()\l- DoGetDataTxVector()\l- DoGetRtsTxVector()\land 12 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/de6/classns3_1_1RrpaaWifiManager.html"];
}
