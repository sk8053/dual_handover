digraph "ns3::Tag"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{ns3::Tag\n||+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{ns3::ObjectBase\n||+ ~ObjectBase()\l+ GetInstanceTypeId()\l+ SetAttribute()\l+ SetAttributeFailSafe()\l+ GetAttribute()\l+ GetAttributeFailSafe()\l+ TraceConnect()\l+ TraceConnectWithoutContext()\l+ TraceDisconnect()\l+ TraceDisconnectWithoutContext()\l+ GetTypeId()\l# NotifyConstructionCompleted()\l# ConstructSelf()\l- DoSet()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/dac/classns3_1_1ObjectBase.html",tooltip="Anchor the ns-3 type and attribute system. "];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{IPv4TestTag\n|- token\l|+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ SetToken()\l+ GetToken()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/da0/classIPv4TestTag.html",tooltip="Tag used in IPv4 Fragmentation Test. "];
  Node1 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{IPv6TestTag\n|- token\l|+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ SetToken()\l+ GetToken()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/d63/classIPv6TestTag.html",tooltip="Tag used in IPv6 Fragmentation Test. "];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 [label="{MyAppTag\n|+ m_sendTs\l|+ MyAppTag()\l+ MyAppTag()\l+ GetInstanceTypeId()\l+ Serialize()\l+ Deserialize()\l+ GetSerializedSize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d22/classMyAppTag.html"];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node6 [label="{MyTag\n|- m_simpleValue\l|+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ SetSimpleValue()\l+ GetSimpleValue()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d46/classMyTag.html"];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node7 [label="{ns3::AmpduTag\n|- m_ampdu\l- m_nbOfMpdus\l- m_duration\l|+ GetInstanceTypeId()\l+ AmpduTag()\l+ SetAmpdu()\l+ SetRemainingNbOfMpdus()\l+ SetRemainingAmpduDuration()\l+ Serialize()\l+ Deserialize()\l+ GetSerializedSize()\l+ Print()\l+ GetAmpdu()\l+ GetRemainingNbOfMpdus()\l+ GetRemainingAmpduDuration()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/d26/classns3_1_1AmpduTag.html"];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node8 [label="{ns3::AnimByteTag\n|- m_AnimUid\l|+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ Set()\l+ Get()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/d1b/classns3_1_1AnimByteTag.html",tooltip="Byte tag using by Anim to uniquely identify packets. "];
  Node1 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node9 [label="{ns3::aodv::DeferredRoute\lOutputTag\n|- m_oif\l|+ DeferredRouteOutputTag()\l+ GetInstanceTypeId()\l+ GetInterface()\l+ SetInterface()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/d0f/classns3_1_1aodv_1_1DeferredRouteOutputTag.html",tooltip="Tag used by AODV implementation. "];
  Node1 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node10 [label="{ns3::CoDelTimestampTag\n|- m_creationTime\l|+ CoDelTimestampTag()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTxTime()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/d3a/classns3_1_1CoDelTimestampTag.html"];
  Node1 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node11 [label="{ns3::DelayJitterEstimation\lTimestampTag\n|- m_creationTime\l|+ DelayJitterEstimationTimestampTag()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTxTime()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/d6e/classns3_1_1DelayJitterEstimationTimestampTag.html"];
  Node1 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node12 [label="{ns3::DeviceNameTag\n|- m_deviceName\l|+ DeviceNameTag()\l+ SetDeviceName()\l+ GetDeviceName()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/db6/classns3_1_1DeviceNameTag.html",tooltip="This class implements a tag that carries the ns3 device name from where a packet is coming..."];
  Node1 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node13 [label="{ns3::dot11s::HwmpTag\n|- m_address\l- m_ttl\l- m_metric\l- m_seqno\l|+ HwmpTag()\l+ ~HwmpTag()\l+ SetAddress()\l+ GetAddress()\l+ SetTtl()\l+ GetTtl()\l+ SetMetric()\l+ GetMetric()\l+ SetSeqno()\l+ GetSeqno()\land 6 more...\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/d53/classns3_1_1dot11s_1_1HwmpTag.html",tooltip="Hwmp tag implements interaction between HWMP protocol and MeshWifiMac. "];
  Node1 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node14 [label="{ns3::dsdv::DeferredRoute\lOutputTag\n|+ oif\l|+ DeferredRouteOutputTag()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/d5d/structns3_1_1dsdv_1_1DeferredRouteOutputTag.html",tooltip="Tag used by DSDV implementation. "];
  Node1 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node15 [label="{ns3::EpcX2Tag\n|- m_senderTimestamp\l|+ GetInstanceTypeId()\l+ EpcX2Tag()\l+ EpcX2Tag()\l+ Serialize()\l+ Deserialize()\l+ GetSerializedSize()\l+ Print()\l+ GetSenderTimestamp()\l+ SetSenderTimestamp()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/d2e/classns3_1_1EpcX2Tag.html"];
  Node1 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node16 [label="{ns3::EpsBearerTag\n|- m_rnti\l- m_bid\l|+ GetInstanceTypeId()\l+ EpsBearerTag()\l+ EpsBearerTag()\l+ SetRnti()\l+ SetBid()\l+ Serialize()\l+ Deserialize()\l+ GetSerializedSize()\l+ Print()\l+ GetRnti()\l+ GetBid()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/d49/classns3_1_1EpsBearerTag.html"];
  Node1 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node17 [label="{ns3::flame::FlameTag\n|+ transmitter\l+ receiver\l|+ FlameTag()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d96/classns3_1_1flame_1_1FlameTag.html",tooltip="Transmitter and receiver addresses. "];
  Node1 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node18 [label="{ns3::FlowIdTag\n|- m_flowId\l|+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ FlowIdTag()\l+ FlowIdTag()\l+ SetFlowId()\l+ GetFlowId()\l+ GetTypeId()\l+ AllocateFlowId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/ddf/classns3_1_1FlowIdTag.html"];
  Node1 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node19 [label="{ns3::HigherLayerTxVectorTag\n|- m_txVector\l- m_adaptable\l|+ GetInstanceTypeId()\l+ HigherLayerTxVectorTag()\l+ HigherLayerTxVectorTag()\l+ GetTxVector()\l+ IsAdaptable()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/d3c/classns3_1_1HigherLayerTxVectorTag.html",tooltip="This tag will be used to support higher layer control DataRate and TxPwr_Level for transmission..."];
  Node1 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node20 [label="{ns3::HighLatencyCtsToSelf\lTxVectorTag\n|- m_ctsToSelfTxVector\l|+ HighLatencyCtsToSelfTxVectorTag()\l+ HighLatencyCtsToSelfTxVectorTag()\l+ GetCtsToSelfTxVector()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/d8f/classns3_1_1HighLatencyCtsToSelfTxVectorTag.html"];
  Node1 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node21 [label="{ns3::HighLatencyDataTxVectorTag\n|- m_dataTxVector\l|+ HighLatencyDataTxVectorTag()\l+ HighLatencyDataTxVectorTag()\l+ GetDataTxVector()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/dd4/classns3_1_1HighLatencyDataTxVectorTag.html"];
  Node1 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node22 [label="{ns3::HighLatencyRtsTxVectorTag\n|- m_rtsTxVector\l|+ HighLatencyRtsTxVectorTag()\l+ HighLatencyRtsTxVectorTag()\l+ GetRtsTxVector()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/da6/classns3_1_1HighLatencyRtsTxVectorTag.html"];
  Node1 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node23 [label="{ns3::Ipv4FlowProbeTag\n|- m_flowId\l- m_packetId\l- m_packetSize\l- m_src\l- m_dst\l|+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ Ipv4FlowProbeTag()\l+ Ipv4FlowProbeTag()\l+ SetFlowId()\l+ SetPacketId()\l+ SetPacketSize()\l+ GetFlowId()\l+ GetPacketId()\l+ GetPacketSize()\l+ IsSrcDstValid()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/dfc/classns3_1_1Ipv4FlowProbeTag.html",tooltip="Tag used to allow a fast identification of the packet. "];
  Node1 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node24 [label="{ns3::Ipv4PacketInfoTag\n|- m_addr\l- m_spec_dst\l- m_ifindex\l- m_ttl\l|+ Ipv4PacketInfoTag()\l+ SetAddress()\l+ GetAddress()\l+ SetLocalAddress()\l+ GetLocalAddress()\l+ SetRecvIf()\l+ GetRecvIf()\l+ SetTtl()\l+ GetTtl()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/dfe/classns3_1_1Ipv4PacketInfoTag.html",tooltip="This class implements Linux struct pktinfo in order to deliver ancillary information to the socket in..."];
  Node1 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node25 [label="{ns3::Ipv6FlowProbeTag\n|- m_flowId\l- m_packetId\l- m_packetSize\l|+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ Ipv6FlowProbeTag()\l+ Ipv6FlowProbeTag()\l+ SetFlowId()\l+ SetPacketId()\l+ SetPacketSize()\l+ GetFlowId()\l+ GetPacketId()\l+ GetPacketSize()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/d24/classns3_1_1Ipv6FlowProbeTag.html",tooltip="Tag used to allow a fast identification of the packet. "];
  Node1 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node26 [label="{ns3::Ipv6PacketInfoTag\n|- m_addr\l- m_ifindex\l- m_hoplimit\l- m_tclass\l|+ Ipv6PacketInfoTag()\l+ SetAddress()\l+ GetAddress()\l+ SetRecvIf()\l+ GetRecvIf()\l+ SetHoplimit()\l+ GetHoplimit()\l+ SetTrafficClass()\l+ GetTrafficClass()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/d5f/classns3_1_1Ipv6PacketInfoTag.html",tooltip="This class implements a tag that carries socket ancillary data to the socket interface. This is used like socket option of IP_PKTINFO/IPV6_PKTINFO in {3542}. "];
  Node1 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node27 [label="{ns3::LrWpanLqiTag\n|- m_lqi\l|+ GetInstanceTypeId()\l+ LrWpanLqiTag()\l+ LrWpanLqiTag()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ Set()\l+ Get()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/d60/classns3_1_1LrWpanLqiTag.html"];
  Node1 -> Node28 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node28 [label="{ns3::LtePhyTag\n|- m_cellId\l|+ GetInstanceTypeId()\l+ LtePhyTag()\l+ LtePhyTag()\l+ ~LtePhyTag()\l+ Serialize()\l+ Deserialize()\l+ GetSerializedSize()\l+ Print()\l+ GetCellId()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d19/classns3_1_1LtePhyTag.html"];
  Node1 -> Node29 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node29 [label="{ns3::LteRadioBearerTag\n|- m_rnti\l- m_lcid\l- m_layer\l|+ GetInstanceTypeId()\l+ LteRadioBearerTag()\l+ LteRadioBearerTag()\l+ LteRadioBearerTag()\l+ SetRnti()\l+ SetLcid()\l+ SetLayer()\l+ Serialize()\l+ Deserialize()\l+ GetSerializedSize()\l+ Print()\l+ GetRnti()\l+ GetLcid()\l+ GetLayer()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/d42/classns3_1_1LteRadioBearerTag.html"];
  Node1 -> Node30 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node30 [label="{ns3::LteRlcSduStatusTag\n|- m_sduStatus\l|+ LteRlcSduStatusTag()\l+ SetStatus()\l+ GetStatus()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/d4a/classns3_1_1LteRlcSduStatusTag.html",tooltip="This class implements a tag that carries the status of a RLC SDU for the fragmentation process Status..."];
  Node1 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node31 [label="{ns3::MmWaveMacPduTag\n|# m_sfnSf\l# m_symStart\l# m_numSym\l# m_tagSize\l|+ GetInstanceTypeId()\l+ MmWaveMacPduTag()\l+ MmWaveMacPduTag()\l+ MmWaveMacPduTag()\l+ Serialize()\l+ Deserialize()\l+ GetSerializedSize()\l+ Print()\l+ GetSfn()\l+ SetSfn()\l+ GetSymStart()\l+ GetNumSym()\l+ SetSymStart()\l+ SetNumSym()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d53/classns3_1_1MmWaveMacPduTag.html"];
  Node1 -> Node32 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node32 [label="{ns3::MmWaveRadioBearerTag\n|- m_rnti\l- m_lcid\l- m_layer\l- m_size\l|+ GetInstanceTypeId()\l+ MmWaveRadioBearerTag()\l+ MmWaveRadioBearerTag()\l+ MmWaveRadioBearerTag()\l+ SetRnti()\l+ SetLcid()\l+ SetLayer()\l+ SetSize()\l+ Serialize()\l+ Deserialize()\land 6 more...\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/dbf/classns3_1_1MmWaveRadioBearerTag.html"];
  Node1 -> Node33 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node33 [label="{ns3::PacketSocketTag\n|- m_packetType\l- m_destAddr\l|+ PacketSocketTag()\l+ SetPacketType()\l+ GetPacketType()\l+ SetDestAddress()\l+ GetDestAddress()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/de4/classns3_1_1PacketSocketTag.html",tooltip="This class implements a tag that carries the dest address of a packet and the packet type..."];
  Node1 -> Node34 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node34 [label="{ns3::PdcpTag\n|- m_senderTimestamp\l|+ GetInstanceTypeId()\l+ PdcpTag()\l+ PdcpTag()\l+ Serialize()\l+ Deserialize()\l+ GetSerializedSize()\l+ Print()\l+ GetSenderTimestamp()\l+ SetSenderTimestamp()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d0f/classns3_1_1PdcpTag.html"];
  Node1 -> Node35 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node35 [label="{ns3::PyVizPacketTag\n|+ m_packetId\l|+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ PyVizPacketTag()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/d8e/structns3_1_1PyVizPacketTag.html"];
  Node1 -> Node36 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node36 [label="{ns3::RlcTag\n|- m_senderTimestamp\l|+ GetInstanceTypeId()\l+ RlcTag()\l+ RlcTag()\l+ Serialize()\l+ Deserialize()\l+ GetSerializedSize()\l+ Print()\l+ GetSenderTimestamp()\l+ SetSenderTimestamp()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/d79/classns3_1_1RlcTag.html"];
  Node1 -> Node37 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node37 [label="{ns3::SimpleTag\n|- m_src\l- m_dst\l- m_protocolNumber\l|+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ SetSrc()\l+ GetSrc()\l+ SetDst()\l+ GetDst()\l+ SetProto()\l+ GetProto()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/d8a/classns3_1_1SimpleTag.html",tooltip="SimpleNetDevice tag to store source, destination and protocol of each packet. "];
  Node1 -> Node38 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node38 [label="{ns3::SnrTag\n|- m_snr\l|+ GetInstanceTypeId()\l+ SnrTag()\l+ SnrTag()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ Set()\l+ Get()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/d10/classns3_1_1SnrTag.html"];
  Node1 -> Node39 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node39 [label="{ns3::SocketIpTosTag\n|- m_ipTos\l|+ SocketIpTosTag()\l+ SetTos()\l+ GetTos()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/dfb/classns3_1_1SocketIpTosTag.html",tooltip="indicates whether the socket has IP_TOS set. This tag is for IPv4 socket. "];
  Node1 -> Node40 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node40 [label="{ns3::SocketIpTtlTag\n|- m_ttl\l|+ SocketIpTtlTag()\l+ SetTtl()\l+ GetTtl()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/db8/classns3_1_1SocketIpTtlTag.html",tooltip="This class implements a tag that carries the socket-specific TTL of a packet to the IP layer..."];
  Node1 -> Node41 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node41 [label="{ns3::SocketIpv6HopLimitTag\n|- m_hopLimit\l|+ SocketIpv6HopLimitTag()\l+ SetHopLimit()\l+ GetHopLimit()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/d48/classns3_1_1SocketIpv6HopLimitTag.html",tooltip="This class implements a tag that carries the socket-specific HOPLIMIT of a packet to the IPv6 layer..."];
  Node1 -> Node42 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node42 [label="{ns3::SocketIpv6TclassTag\n|- m_ipv6Tclass\l|+ SocketIpv6TclassTag()\l+ SetTclass()\l+ GetTclass()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d0/dbf/classns3_1_1SocketIpv6TclassTag.html",tooltip="indicates whether the socket has IPV6_TCLASS set. This tag is for IPv6 socket. "];
  Node1 -> Node43 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node43 [label="{ns3::SocketPriorityTag\n|- m_priority\l|+ SocketPriorityTag()\l+ SetPriority()\l+ GetPriority()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/d3d/classns3_1_1SocketPriorityTag.html",tooltip="indicates whether the socket has a priority set. "];
  Node1 -> Node44 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node44 [label="{ns3::SocketSetDontFragmentTag\n|- m_dontFragment\l|+ SocketSetDontFragmentTag()\l+ Enable()\l+ Disable()\l+ IsEnabled()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/dc5/classns3_1_1SocketSetDontFragmentTag.html",tooltip="indicates whether packets should be sent out with the DF (Don&#39;t Fragment) flag set. "];
  Node1 -> Node45 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node45 [label="{ns3::WifiPhyTag\n|- m_wifiTxVector\l- m_mpduType\l|+ GetInstanceTypeId()\l+ WifiPhyTag()\l+ WifiPhyTag()\l+ GetWifiTxVector()\l+ GetMpduType()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/d6f/classns3_1_1WifiPhyTag.html"];
}
