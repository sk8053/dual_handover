digraph "ns3::AnimationInterface"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{ns3::AnimationInterface\n|- m_f\l- m_routingF\l- m_outputFileName\l- gAnimUid\l- m_writeCallback\l- m_started\l- m_enablePacketMetadata\l- m_startTime\l- m_maxPktsPerFile\l- m_originalFileName\land 55 more...\l|+ AnimationInterface()\l+ ~AnimationInterface()\l+ EnableIpv4L3ProtocolCounters()\l+ EnableQueueCounters()\l+ EnableWifiMacCounters()\l+ EnableWifiPhyCounters()\l+ EnableIpv4RouteTracking()\l+ EnableIpv4RouteTracking()\l+ SetStartTime()\l+ SetStopTime()\land 22 more...\l+ IsInitialized()\l+ SetConstantPosition()\l- GetElementsFromContext()\l- GetNodeFromContext()\l- GetNetDeviceFromContext()\l- StartAnimation()\l- SetOutputFile()\l- StopAnimation()\l- CounterTypeToString()\l- GetPacketMetadata()\l- AddByteTag()\l- WriteN()\land 112 more...\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_queueCountersPollInterval\n-m_wifiPhyCountersStopTime\n-m_queueCountersStopTime\n-m_stopTime\n-m_mobilityPollInterval\n-m_wifiPhyCountersPollInterval\n-m_ipv4L3ProtocolCountersStopTime\n-m_wifiMacCountersStopTime\n-m_routingPollInterval\n-m_ipv4L3ProtocolCountersPollInterval\n..." ,arrowhead="odiamond"];
  Node2 [label="{ns3::Time\n|- m_data\l- g_markingTimes\l|+ operator=()\l+ Time()\l+ Time()\l+ Time()\l+ ~Time()\l+ IsZero()\l+ IsNegative()\l+ IsPositive()\l+ IsStrictlyNegative()\l+ IsStrictlyPositive()\l+ Compare()\l+ operator int64x64_t()\l+ As()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ Time()\l+ GetYears()\l+ GetDays()\l+ GetHours()\l+ GetMinutes()\l+ GetSeconds()\l+ GetMilliSeconds()\l+ GetMicroSeconds()\l+ GetNanoSeconds()\l+ GetPicoSeconds()\l+ GetFemtoSeconds()\l+ GetTimeStep()\l+ GetDouble()\l+ GetInteger()\l+ ToInteger()\l+ ToDouble()\l+ To()\l+ Min()\l+ Max()\l+ SetResolution()\l+ GetResolution()\l+ From()\l+ StaticInit()\l+ FromInteger()\l+ FromDouble()\l+ From()\l- PeekResolution()\l- PeekInformation()\l- SetDefaultNsResolution()\l- SetResolution()\l- ClearMarkedTimes()\l- Mark()\l- Clear()\l- ConvertTimes()\l* operator==\l* operator!=\l* operator\<=\l* operator\>=\l* operator\<\l* operator\>\l* operator+\l* operator-\l* operator*\l* operator*\l* operator/\l* operator/\l* operator+=\l* operator-=\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* Time()\l* GetYears()\l* GetDays()\l* GetHours()\l* GetMinutes()\l* GetSeconds()\l* GetMilliSeconds()\l* GetMicroSeconds()\l* GetNanoSeconds()\l* GetPicoSeconds()\l* GetFemtoSeconds()\l* GetTimeStep()\l* GetDouble()\l* GetInteger()\l* ToInteger()\l* ToDouble()\l* To()\l* FromInteger()\l* FromDouble()\l* From()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d04/classns3_1_1Time.html",tooltip="Simulation virtual time values and global simulation resolution. "];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -userBoundary" ,arrowhead="odiamond"];
  Node3 [label="{ns3::Rectangle\n|+ xMin\l+ xMax\l+ yMin\l+ yMax\l|+ Rectangle()\l+ Rectangle()\l+ IsInside()\l+ GetClosestSide()\l+ CalculateIntersection()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/d6d/classns3_1_1Rectangle.html",tooltip="a 2d rectangle "];
  Node4 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_routingNc" ,arrowhead="odiamond"];
  Node4 [label="{ns3::NodeContainer\n|- m_nodes\l|+ NodeContainer()\l+ NodeContainer()\l+ NodeContainer()\l+ NodeContainer()\l+ NodeContainer()\l+ NodeContainer()\l+ NodeContainer()\l+ Begin()\l+ End()\l+ GetN()\land 6 more...\l+ GetGlobal()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/d97/classns3_1_1NodeContainer.html",tooltip="keep track of a set of node pointers. "];
}
