digraph "ns3::UdpSocketImpl"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{ns3::UdpSocketImpl\n|- m_endPoint\l- m_endPoint6\l- m_node\l- m_udp\l- m_icmpCallback\l- m_icmpCallback6\l- m_defaultAddress\l- m_defaultPort\l- m_dropTrace\l- m_errno\land 11 more...\l|+ UdpSocketImpl()\l+ ~UdpSocketImpl()\l+ SetNode()\l+ SetUdp()\l+ GetErrno()\l+ GetSocketType()\l+ GetNode()\l+ Bind()\l+ Bind6()\l+ Bind()\land 19 more...\l+ GetTypeId()\l- SetRcvBufSize()\l- GetRcvBufSize()\l- SetIpMulticastTtl()\l- GetIpMulticastTtl()\l- SetIpMulticastIf()\l- GetIpMulticastIf()\l- SetIpMulticastLoop()\l- GetIpMulticastLoop()\l- SetMtuDiscover()\l- GetMtuDiscover()\land 11 more...\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{ns3::UdpSocket\n||+ UdpSocket()\l+ ~UdpSocket()\l+ MulticastJoinGroup()\l+ MulticastLeaveGroup()\l+ GetTypeId()\l- SetRcvBufSize()\l- GetRcvBufSize()\l- SetIpMulticastTtl()\l- GetIpMulticastTtl()\l- SetIpMulticastIf()\l- GetIpMulticastIf()\l- SetIpMulticastLoop()\l- GetIpMulticastLoop()\l- SetMtuDiscover()\l- GetMtuDiscover()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/ddc/classns3_1_1UdpSocket.html",tooltip="(abstract) base class of all UdpSockets "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{ns3::Socket\n|# m_boundnetdevice\l# m_recvPktInfo\l# m_ipv6MulticastGroupAddress\l- m_connectionSucceeded\l- m_connectionFailed\l- m_normalClose\l- m_errorClose\l- m_connectionRequest\l- m_newConnectionCreated\l- m_dataSent\l- m_sendCb\l- m_receivedData\l- m_priority\land 11 more...\l|+ Socket()\l+ ~Socket()\l+ GetErrno()\l+ GetSocketType()\l+ GetNode()\l+ SetConnectCallback()\l+ SetCloseCallbacks()\l+ SetAcceptCallback()\l+ SetDataSentCallback()\l+ SetSendCallback()\land 51 more...\l+ GetTypeId()\l+ CreateSocket()\l+ IpTos2Priority()\l# NotifyConnectionSucceeded()\l# NotifyConnectionFailed()\l# NotifyNormalClose()\l# NotifyErrorClose()\l# NotifyConnectionRequest()\l# NotifyNewConnectionCreated()\l# NotifyDataSent()\l# NotifySend()\l# NotifyDataRecv()\l# DoDispose()\l# IsManualIpv6Tclass()\l# IsManualIpTtl()\l# IsManualIpv6HopLimit()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/df2/classns3_1_1Socket.html",tooltip="A low-level Socket API based loosely on the BSD Socket API.A few things to keep in mind about this ty..."];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{ns3::Object\n|- m_tid\l- m_disposed\l- m_initialized\l- m_aggregates\l- m_getObjectCount\l|+ Object()\l+ ~Object()\l+ GetInstanceTypeId()\l+ GetObject()\l+ GetObject()\l+ Dispose()\l+ AggregateObject()\l+ GetAggregateIterator()\l+ Initialize()\l+ IsInitialized()\l+ GetTypeId()\l# NotifyNewAggregate()\l# DoInitialize()\l# DoDispose()\l# Object()\l- DoGetObject()\l- Check()\l- CheckLoose()\l- SetTypeId()\l- Construct()\l- UpdateSortedArray()\l- DoDelete()\l* CopyObject\l* CopyObject\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d77/classns3_1_1Object.html",tooltip="A base class which provides memory management and object aggregation. "];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 [label="{ns3::SimpleRefCount\l\< Object, ObjectBase,\l ObjectDeleter \>\n|- m_count\l|+ SimpleRefCount()\l+ SimpleRefCount()\l+ operator=()\l+ Ref()\l+ Unref()\l+ GetReferenceCount()\l+ Cleanup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da1/classns3_1_1SimpleRefCount.html"];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node6 [label="{ns3::ObjectBase\n||+ ~ObjectBase()\l+ GetInstanceTypeId()\l+ SetAttribute()\l+ SetAttributeFailSafe()\l+ GetAttribute()\l+ GetAttributeFailSafe()\l+ TraceConnect()\l+ TraceConnectWithoutContext()\l+ TraceDisconnect()\l+ TraceDisconnectWithoutContext()\l+ GetTypeId()\l# NotifyConstructionCompleted()\l# ConstructSelf()\l- DoSet()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/dac/classns3_1_1ObjectBase.html",tooltip="Anchor the ns-3 type and attribute system. "];
}
