digraph "ns3::TcpGeneralTest"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{ns3::TcpGeneralTest\n|# m_congControlTypeId\l- m_propagationDelay\l- m_startTime\l- m_mtu\l- m_pktSize\l- m_pktCount\l- m_interPacketInterval\l- m_senderSocket\l- m_receiverSocket\l- m_remoteAddr\l|+ TcpGeneralTest()\l+ ~TcpGeneralTest()\l# CreateChannel()\l# CreateSenderErrorModel()\l# CreateReceiverErrorModel()\l# CreateReceiverSocket()\l# CreateSenderSocket()\l# CreateSocket()\l# GetSenderSocket()\l# GetReceiverSocket()\l# DoRun()\l# ConfigureEnvironment()\land 59 more...\l- NormalCloseCb()\l- ErrorCloseCb()\l- QueueDropCb()\l- PhyDropCb()\l- RcvAckCb()\l- ProcessedAckCb()\l- TxPacketCb()\l- RxPacketCb()\l- RtoExpiredCb()\l- UpdateRttHistoryCb()\l- AfterRetransmitCb()\l- BeforeRetransmitCb()\l- DataSentCb()\l- ForkCb()\l- HandleAccept()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{ns3::TestCase\n|- m_parent\l- m_children\l- m_dataDir\l- m_runner\l- m_result\l- m_name\l- m_duration\l|+ ~TestCase()\l+ GetName()\l# TestCase()\l# AddTestCase()\l# SetDataDir()\l# IsStatusFailure()\l# IsStatusSuccess()\l# GetParent()\l# ReportTestFailure()\l# MustAssertOnFailure()\l# MustContinueOnFailure()\l# CreateDataDirFilename()\l# CreateTempDirFilename()\l- DoSetup()\l- DoRun()\l- DoTeardown()\l- Run()\l- IsFailed()\l* ReportTestFailure()\l* MustAssertOnFailure()\l* MustContinueOnFailure()\l* CreateDataDirFilename()\l* CreateTempDirFilename()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/d88/classns3_1_1TestCase.html",tooltip="encapsulates test code "];
  Node3 -> Node2 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{ns3::NonCopyable\n||# NonCopyable()\l# ~NonCopyable()\l- NonCopyable()\l- operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/dd1/classns3_1_1NonCopyable.html"];
  Node1 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{SackPermittedTestCase\n|# m_configuration\l|+ SackPermittedTestCase()\l# CreateReceiverSocket()\l# CreateSenderSocket()\l# Tx()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d3b/classSackPermittedTestCase.html",tooltip="Test case for checking the SACK-PERMITTED option. "];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 [label="{TcpAdvertisedWindowTest\n|- m_pktSize\l- m_pktCount\l- m_lossRatio\l|+ TcpAdvertisedWindowTest()\l# ConfigureEnvironment()\l# CreateReceiverSocket()\l# CreateReceiverErrorModel()\l- InvalidAwndCb()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/dd3/classTcpAdvertisedWindowTest.html",tooltip="Test the new formula for calculating TCP&#39;s advertised window size. "];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node6 [label="{TcpBytesInFlightTest\n|- m_guessedBytesInFlight\l- m_dupAckRecv\l- m_lastAckRecv\l- m_greatestSeqSent\l- m_toDrop\l|+ TcpBytesInFlightTest()\l# CreateReceiverErrorModel()\l# Rx()\l# Tx()\l# BytesInFlightTrace()\l# PktDropped()\l# ConfigureEnvironment()\l# BeforeRTOExpired()\l# FinalChecks()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/d15/classTcpBytesInFlightTest.html",tooltip="Check the value of BytesInFlight against a home-made guess. "];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node7 [label="{TcpDataSentCbTestCase\n|- m_pktSize\l- m_pktCount\l- m_notifiedData\l|+ TcpDataSentCbTestCase()\l# CreateReceiverSocket()\l# DataSent()\l# ConfigureEnvironment()\l# FinalChecks()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d3f/classTcpDataSentCbTestCase.html",tooltip="Data Sent callback test. "];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node8 [label="{TcpFastRetrTest\n|# m_pktDropped\l# m_pktWasDropped\l# m_seqToKill\l# m_dupAckReceived\l# m_previousAck\l# m_sndNextExpSeq\l# m_rcvNextExpAck\l# m_countRetr\l# m_bytesRcvButNotAcked\l# m_errorModel\l|+ TcpFastRetrTest()\l+ CreateSenderErrorModel()\l+ CreateReceiverErrorModel()\l+ CreateSenderSocket()\l# RcvAck()\l# ProcessedAck()\l# CongStateTrace()\l# Tx()\l# Rx()\l# AfterRTOExpired()\l# PktDropped()\l# FinalChecks()\l# ConfigureProperties()\l# ConfigureEnvironment()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/d85/classTcpFastRetrTest.html",tooltip="Test the fast retransmission. "];
  Node1 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node9 [label="{TcpNewRenoCongAvoidNormalTest\n|- m_segmentSize\l- m_packetSize\l- m_packets\l- m_increment\l- m_event\l- m_initial\l|+ TcpNewRenoCongAvoidNormalTest()\l# CWndTrace()\l# QueueDrop()\l# PhyDrop()\l# NormalClose()\l# Check()\l# ConfigureEnvironment()\l# ConfigureProperties()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d46/classTcpNewRenoCongAvoidNormalTest.html",tooltip="Test the behavior of RFC congestion avoidance. "];
  Node1 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node10 [label="{TcpPktsAckedOpenTest\n|- m_segmentsAcked\l- m_segmentsReceived\l- m_congCtl\l|+ TcpPktsAckedOpenTest()\l+ PktsAckedCalled()\l# CreateSenderSocket()\l# Rx()\l# ConfigureEnvironment()\l# FinalChecks()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/db5/classTcpPktsAckedOpenTest.html",tooltip="Check the number of times that PktsAcked is called. "];
  Node1 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node11 [label="{TcpRtoTest\n|- m_afterRTOExpired\l- m_segmentReceived\l|+ TcpRtoTest()\l# CreateSenderSocket()\l# AfterRTOExpired()\l# RcvAck()\l# ProcessedAck()\l# FinalChecks()\l# ConfigureProperties()\l# ConfigureEnvironment()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/d2b/classTcpRtoTest.html",tooltip="Testing the moments after an RTO expiration. "];
  Node1 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node12 [label="{TcpRttEstimationTest\n|- m_enableTs\l- m_rttChanged\l- m_highestTxSeq\l- m_pktCount\l- m_dataCount\l|+ TcpRttEstimationTest()\l# CreateReceiverSocket()\l# CreateSenderSocket()\l# Rx()\l# Tx()\l# UpdatedRttHistory()\l# RttTrace()\l# FinalChecks()\l# ConfigureEnvironment()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/deb/classTcpRttEstimationTest.html",tooltip="Check Rtt calculations. "];
  Node12 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node13 [label="{TcpRttEstimationWithLossTest\n|- m_toDrop\l|+ TcpRttEstimationWithLossTest()\l# CreateReceiverErrorModel()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/d57/classTcpRttEstimationWithLossTest.html",tooltip="Check Rtt calculations with packet losses. "];
  Node1 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node14 [label="{TcpSlowStartNormalTest\n|# m_ackedBytes\l# m_sentBytes\l# m_totalAckedBytes\l# m_allowedIncrease\l# m_initial\l- m_segmentSize\l- m_packetSize\l- m_packets\l|+ TcpSlowStartNormalTest()\l# CWndTrace()\l# Tx()\l# Rx()\l# QueueDrop()\l# PhyDrop()\l# ConfigureEnvironment()\l# ConfigureProperties()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/d06/classTcpSlowStartNormalTest.html",tooltip="Test the normal behavior for slow start. "];
  Node14 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node15 [label="{TcpSlowStartAttackerTest\n||+ TcpSlowStartAttackerTest()\l# CreateReceiverSocket()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da1/classTcpSlowStartAttackerTest.html",tooltip="A slow start test using a socket which sends smaller ACKs. "];
  Node1 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node16 [label="{TcpTimeRtoTest\n|- m_senderSentSegments\l- m_previousRTO\l- m_closed\l|+ TcpTimeRtoTest()\l# CreateSenderSocket()\l# CreateReceiverErrorModel()\l# ErrorClose()\l# AfterRTOExpired()\l# Tx()\l# FinalChecks()\l# ConfigureEnvironment()\l# PktDropped()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/da7/classTcpTimeRtoTest.html",tooltip="Testing the timing of RTO. "];
  Node1 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node17 [label="{TcpZeroWindowTest\n|# m_receivePktEvent\l# m_zeroWindowProbe\l# m_windowUpdated\l# m_senderFinished\l# m_receiverFinished\l|+ TcpZeroWindowTest()\l# CreateReceiverSocket()\l# Tx()\l# Rx()\l# ProcessedAck()\l# NormalClose()\l# FinalChecks()\l# ConfigureEnvironment()\l# ConfigureProperties()\l# IncreaseBufSize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/db9/classTcpZeroWindowTest.html",tooltip="Testing the congestion avoidance increment on TCP ZeroWindow. "];
  Node1 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node18 [label="{TimestampTestCase\n|# m_configuration\l|+ TimestampTestCase()\l# CreateReceiverSocket()\l# CreateSenderSocket()\l# Tx()\l# Rx()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/db9/classTimestampTestCase.html",tooltip="TCP TimeStamp enabling Test. "];
  Node1 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node19 [label="{WScalingTestCase\n|# m_configuration\l# m_maxRcvBufferSize\l# m_maxSndBufferSize\l|+ WScalingTestCase()\l# CreateReceiverSocket()\l# CreateSenderSocket()\l# Tx()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/d9a/classWScalingTestCase.html",tooltip="TCP Window Scaling enabling Test. "];
}
