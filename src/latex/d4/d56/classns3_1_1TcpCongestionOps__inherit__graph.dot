digraph "ns3::TcpCongestionOps"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{ns3::TcpCongestionOps\n||+ TcpCongestionOps()\l+ TcpCongestionOps()\l+ ~TcpCongestionOps()\l+ GetName()\l+ GetSsThresh()\l+ IncreaseWindow()\l+ PktsAcked()\l+ CongestionStateSet()\l+ Fork()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{ns3::Object\n|- m_tid\l- m_disposed\l- m_initialized\l- m_aggregates\l- m_getObjectCount\l|+ Object()\l+ ~Object()\l+ GetInstanceTypeId()\l+ GetObject()\l+ GetObject()\l+ Dispose()\l+ AggregateObject()\l+ GetAggregateIterator()\l+ Initialize()\l+ IsInitialized()\l+ GetTypeId()\l# NotifyNewAggregate()\l# DoInitialize()\l# DoDispose()\l# Object()\l- DoGetObject()\l- Check()\l- CheckLoose()\l- SetTypeId()\l- Construct()\l- UpdateSortedArray()\l- DoDelete()\l* CopyObject\l* CopyObject\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d77/classns3_1_1Object.html",tooltip="A base class which provides memory management and object aggregation. "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{ns3::SimpleRefCount\l\< Object, ObjectBase,\l ObjectDeleter \>\n|- m_count\l|+ SimpleRefCount()\l+ SimpleRefCount()\l+ operator=()\l+ Ref()\l+ Unref()\l+ GetReferenceCount()\l+ Cleanup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da1/classns3_1_1SimpleRefCount.html"];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{ns3::ObjectBase\n||+ ~ObjectBase()\l+ GetInstanceTypeId()\l+ SetAttribute()\l+ SetAttributeFailSafe()\l+ GetAttribute()\l+ GetAttributeFailSafe()\l+ TraceConnect()\l+ TraceConnectWithoutContext()\l+ TraceDisconnect()\l+ TraceDisconnectWithoutContext()\l+ GetTypeId()\l# NotifyConstructionCompleted()\l# ConstructSelf()\l- DoSet()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/dac/classns3_1_1ObjectBase.html",tooltip="Anchor the ns-3 type and attribute system. "];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 [label="{ns3::TcpBic\n|- m_fastConvergence\l- m_beta\l- m_maxIncr\l- m_lowWnd\l- m_smoothPart\l- m_cWndCnt\l- m_lastMaxCwnd\l- m_lastCwnd\l- m_epochStart\l- m_b\l|+ TcpBic()\l+ TcpBic()\l+ GetName()\l+ IncreaseWindow()\l+ GetSsThresh()\l+ Fork()\l+ GetTypeId()\l# Update()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/d64/classns3_1_1TcpBic.html",tooltip="BIC congestion control algorithm. "];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node6 [label="{ns3::TcpCubic\n|- m_fastConvergence\l- m_beta\l- m_hystart\l- m_hystartDetect\l- m_hystartLowWindow\l- m_hystartAckDelta\l- m_hystartDelayMin\l- m_hystartDelayMax\l- m_hystartMinSamples\l- m_initialCwnd\land 15 more...\l|+ TcpCubic()\l+ TcpCubic()\l+ GetName()\l+ PktsAcked()\l+ IncreaseWindow()\l+ GetSsThresh()\l+ CongestionStateSet()\l+ Fork()\l+ GetTypeId()\l- HystartReset()\l- CubicReset()\l- Update()\l- HystartUpdate()\l- HystartDelayThresh()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/dc3/classns3_1_1TcpCubic.html",tooltip="The Cubic Congestion Control Algorithm. "];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node7 [label="{ns3::TcpNewReno\n||+ TcpNewReno()\l+ TcpNewReno()\l+ ~TcpNewReno()\l+ GetName()\l+ IncreaseWindow()\l+ GetSsThresh()\l+ Fork()\l+ GetTypeId()\l# SlowStart()\l# CongestionAvoidance()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d54/classns3_1_1TcpNewReno.html",tooltip="The NewReno implementation. "];
  Node7 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node8 [label="{DummyCongControl\n|- m_test\l|+ DummyCongControl()\l+ SetCallback()\l+ PktsAcked()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/d47/classDummyCongControl.html",tooltip="Behaves as NewReno, except that each time PktsAcked is called, a notification is sent to TcpPktsAcked..."];
  Node7 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node9 [label="{ns3::TcpHighSpeed\n|- m_ackCnt\l|+ TcpHighSpeed()\l+ TcpHighSpeed()\l+ ~TcpHighSpeed()\l+ GetName()\l+ GetSsThresh()\l+ Fork()\l+ GetTypeId()\l+ TableLookupA()\l+ TableLookupB()\l# CongestionAvoidance()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/d6f/classns3_1_1TcpHighSpeed.html",tooltip="An implementation of TCP HighSpeed. "];
  Node7 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node10 [label="{ns3::TcpHtcp\n|- m_alpha\l- m_beta\l- m_defaultBackoff\l- m_throughputRatio\l- m_delta\l- m_deltaL\l- m_lastCon\l- m_minRtt\l- m_maxRtt\l- m_throughput\l- m_lastThroughput\l- m_dataSent\l|+ TcpHtcp()\l+ TcpHtcp()\l+ ~TcpHtcp()\l+ GetName()\l+ Fork()\l+ GetSsThresh()\l+ PktsAcked()\l+ GetTypeId()\l# CongestionAvoidance()\l- UpdateAlpha()\l- UpdateBeta()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d0/d2c/classns3_1_1TcpHtcp.html",tooltip="An implementation of the H-TCP variant of TCP. "];
  Node7 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node11 [label="{ns3::TcpHybla\n|- m_rho\l- m_minRtt\l- m_rRtt\l- m_cWndCnt\l|+ TcpHybla()\l+ TcpHybla()\l+ ~TcpHybla()\l+ PktsAcked()\l+ GetName()\l+ Fork()\l+ GetTypeId()\l# SlowStart()\l# CongestionAvoidance()\l- RecalcParam()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/def/classns3_1_1TcpHybla.html",tooltip="Implementation of the TCP Hybla algorithm. "];
  Node7 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node12 [label="{ns3::TcpIllinois\n|- m_sumRtt\l- m_cntRtt\l- m_baseRtt\l- m_maxRtt\l- m_endSeq\l- m_rttAbove\l- m_rttLow\l- m_alphaMin\l- m_alphaMax\l- m_alphaBase\land 8 more...\l|+ TcpIllinois()\l+ TcpIllinois()\l+ ~TcpIllinois()\l+ GetName()\l+ GetSsThresh()\l+ Fork()\l+ CongestionStateSet()\l+ IncreaseWindow()\l+ PktsAcked()\l+ GetTypeId()\l- RecalcParam()\l- CalculateAlpha()\l- CalculateBeta()\l- CalculateAvgDelay()\l- CalculateMaxDelay()\l- Reset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/dd1/classns3_1_1TcpIllinois.html",tooltip="An implementation of TCP Illinois algorithm. "];
  Node7 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node13 [label="{ns3::TcpLedbat\n|- m_target\l- m_gain\l- m_doSs\l- m_baseHistoLen\l- m_noiseFilterLen\l- m_lastRollover\l- m_sndCwndCnt\l- m_baseHistory\l- m_noiseFilter\l- m_flag\l|+ TcpLedbat()\l+ TcpLedbat()\l+ ~TcpLedbat()\l+ GetName()\l+ PktsAcked()\l+ GetSsThresh()\l+ Fork()\l+ IncreaseWindow()\l+ SetDoSs()\l+ GetTypeId()\l# CongestionAvoidance()\l- InitCircBuf()\l- CurrentDelay()\l- BaseDelay()\l- AddDelay()\l- UpdateBaseDelay()\l- MinCircBuf()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d18/classns3_1_1TcpLedbat.html",tooltip="An implementation of LEDBAT. "];
  Node7 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node14 [label="{ns3::TcpScalable\n|- m_ackCnt\l- m_aiFactor\l- m_mdFactor\l|+ TcpScalable()\l+ TcpScalable()\l+ ~TcpScalable()\l+ GetName()\l+ GetSsThresh()\l+ Fork()\l+ GetTypeId()\l# CongestionAvoidance()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d8f/classns3_1_1TcpScalable.html",tooltip="An implementation of TCP Scalable. "];
  Node7 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node15 [label="{ns3::TcpVegas\n|- m_alpha\l- m_beta\l- m_gamma\l- m_baseRtt\l- m_minRtt\l- m_cntRtt\l- m_doingVegasNow\l- m_begSndNxt\l|+ TcpVegas()\l+ TcpVegas()\l+ ~TcpVegas()\l+ GetName()\l+ PktsAcked()\l+ CongestionStateSet()\l+ IncreaseWindow()\l+ GetSsThresh()\l+ Fork()\l+ GetTypeId()\l- EnableVegas()\l- DisableVegas()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/d38/classns3_1_1TcpVegas.html",tooltip="An implementation of TCP Vegas. "];
  Node7 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node16 [label="{ns3::TcpVeno\n|- m_baseRtt\l- m_minRtt\l- m_cntRtt\l- m_doingVenoNow\l- m_diff\l- m_inc\l- m_ackCnt\l- m_beta\l|+ TcpVeno()\l+ TcpVeno()\l+ ~TcpVeno()\l+ GetName()\l+ PktsAcked()\l+ CongestionStateSet()\l+ IncreaseWindow()\l+ GetSsThresh()\l+ Fork()\l+ GetTypeId()\l- EnableVeno()\l- DisableVeno()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/d4d/classns3_1_1TcpVeno.html",tooltip="An implementation of TCP Veno. "];
  Node7 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node17 [label="{ns3::TcpWestwood\n|# m_currentBW\l# m_lastSampleBW\l# m_lastBW\l# m_minRtt\l# m_pType\l# m_fType\l# m_ackedSegments\l# m_IsCount\l# m_bwEstimateEvent\l|+ TcpWestwood()\l+ TcpWestwood()\l+ ~TcpWestwood()\l+ GetSsThresh()\l+ PktsAcked()\l+ Fork()\l+ GetTypeId()\l- UpdateAckedSegments()\l- EstimateBW()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/d56/classns3_1_1TcpWestwood.html",tooltip="An implementation of TCP Westwood and Westwood+. "];
  Node7 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node18 [label="{ns3::TcpYeah\n|- m_alpha\l- m_gamma\l- m_delta\l- m_epsilon\l- m_phy\l- m_rho\l- m_zeta\l- m_stcpAiFactor\l- m_stcp\l- m_baseRtt\land 8 more...\l|+ TcpYeah()\l+ TcpYeah()\l+ ~TcpYeah()\l+ GetName()\l+ PktsAcked()\l+ CongestionStateSet()\l+ IncreaseWindow()\l+ GetSsThresh()\l+ Fork()\l+ GetTypeId()\l- EnableYeah()\l- DisableYeah()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/d18/classns3_1_1TcpYeah.html",tooltip="An implementation of TCP YeAH. "];
}
