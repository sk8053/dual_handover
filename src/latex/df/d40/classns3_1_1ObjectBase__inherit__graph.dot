digraph "ns3::ObjectBase"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{ns3::ObjectBase\n||+ ~ObjectBase()\l+ GetInstanceTypeId()\l+ SetAttribute()\l+ SetAttributeFailSafe()\l+ GetAttribute()\l+ GetAttributeFailSafe()\l+ TraceConnect()\l+ TraceConnectWithoutContext()\l+ TraceDisconnect()\l+ TraceDisconnectWithoutContext()\l+ GetTypeId()\l# NotifyConstructionCompleted()\l# ConstructSelf()\l- DoSet()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{ns3::Chunk\n||+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/d9b/classns3_1_1Chunk.html",tooltip="abstract base class for ns3::Header and ns3::Trailer "];
  Node2 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{ns3::Header\n||+ ~Header()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$d6/dae/classns3_1_1Header.html",tooltip="Protocol header serialization and deserialization. "];
  Node3 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{MyHeader\n|- m_data\l|+ MyHeader()\l+ ~MyHeader()\l+ SetData()\l+ GetData()\l+ GetInstanceTypeId()\l+ Print()\l+ Serialize()\l+ Deserialize()\l+ GetSerializedSize()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/db5/classMyHeader.html"];
  Node3 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 [label="{ns3::AlohaNoackMacHeader\n|- m_source\l- m_destination\l|+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ SetSource()\l+ SetDestination()\l+ GetSource()\l+ GetDestination()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d4b/classns3_1_1AlohaNoackMacHeader.html"];
  Node3 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node6 [label="{ns3::AmpduSubframeHeader\n|- m_crc\l- m_sig\l- m_length\l- m_eof\l|+ AmpduSubframeHeader()\l+ ~AmpduSubframeHeader()\l+ GetInstanceTypeId()\l+ Print()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ SetCrc()\l+ SetSig()\l+ SetLength()\l+ SetEof()\l+ GetCrc()\l+ GetSig()\l+ GetLength()\l+ GetEof()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/db6/classns3_1_1AmpduSubframeHeader.html"];
  Node3 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node7 [label="{ns3::AmsduSubframeHeader\n|- m_da\l- m_sa\l- m_length\l|+ AmsduSubframeHeader()\l+ ~AmsduSubframeHeader()\l+ GetInstanceTypeId()\l+ Print()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ SetDestinationAddr()\l+ SetSourceAddr()\l+ SetLength()\l+ GetDestinationAddr()\l+ GetSourceAddr()\l+ GetLength()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/dfd/classns3_1_1AmsduSubframeHeader.html"];
  Node3 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node8 [label="{ns3::aodv::RerrHeader\n|- m_flag\l- m_reserved\l- m_unreachableDstSeqNo\l|+ RerrHeader()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ SetNoDelete()\l+ GetNoDelete()\l+ AddUnDestination()\l+ RemoveUnDestination()\l+ Clear()\l+ GetDestCount()\l+ operator==()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/df8/classns3_1_1aodv_1_1RerrHeader.html",tooltip="Route Error (RERR) Message Format. "];
  Node3 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node9 [label="{ns3::aodv::RrepAckHeader\n|- m_reserved\l|+ RrepAckHeader()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ operator==()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/d46/classns3_1_1aodv_1_1RrepAckHeader.html",tooltip="Route Reply Acknowledgment (RREP-ACK) Message Format. "];
  Node3 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node10 [label="{ns3::aodv::RrepHeader\n|- m_flags\l- m_prefixSize\l- m_hopCount\l- m_dst\l- m_dstSeqNo\l- m_origin\l- m_lifeTime\l|+ RrepHeader()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ SetHopCount()\l+ GetHopCount()\l+ SetDst()\l+ GetDst()\land 12 more...\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/d54/classns3_1_1aodv_1_1RrepHeader.html",tooltip="Route Reply (RREP) Message Format. "];
  Node3 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node11 [label="{ns3::aodv::RreqHeader\n|- m_flags\l- m_reserved\l- m_hopCount\l- m_requestID\l- m_dst\l- m_dstSeqNo\l- m_origin\l- m_originSeqNo\l|+ RreqHeader()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ SetHopCount()\l+ GetHopCount()\l+ SetId()\l+ GetId()\land 15 more...\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/d7d/classns3_1_1aodv_1_1RreqHeader.html",tooltip="Route Request (RREQ) Message Format. "];
  Node3 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node12 [label="{ns3::aodv::TypeHeader\n|- m_type\l- m_valid\l|+ TypeHeader()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ Get()\l+ IsValid()\l+ operator==()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/d53/classns3_1_1aodv_1_1TypeHeader.html",tooltip="AODV types. "];
  Node3 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node13 [label="{ns3::ArpHeader\n|+ m_type\l+ m_macSource\l+ m_macDest\l+ m_ipv4Source\l+ m_ipv4Dest\l|+ SetRequest()\l+ SetReply()\l+ IsRequest()\l+ IsReply()\l+ GetSourceHardwareAddress()\l+ GetDestinationHardwareAddress()\l+ GetSourceIpv4Address()\l+ GetDestinationIpv4Address()\l+ GetInstanceTypeId()\l+ Print()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/d42/classns3_1_1ArpHeader.html",tooltip="The packet header for an ARP packet. "];
  Node3 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node14 [label="{ns3::Asn1Header\n|# m_serializationPendingBits\l# m_numSerializationPendingBits\l# m_isDataSerialized\l# m_serializationResult\l|+ Asn1Header()\l+ ~Asn1Header()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ PreSerialize()\l+ GetTypeId()\l# WriteOctet()\l# SerializeBoolean()\l# SerializeInteger()\l# SerializeSequenceOf()\l# SerializeChoice()\l# SerializeEnum()\l# SerializeNull()\l# FinalizeSerialization()\l# SerializeBitset()\l# SerializeSequence()\land 47 more...\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$d4/d02/classns3_1_1Asn1Header.html"];
  Node3 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node15 [label="{ns3::BandwidthRequestHeader\n|- m_ht\l- m_ec\l- m_type\l- m_br\l- m_cid\l- m_hcs\l- c_hcs\l|+ BandwidthRequestHeader()\l+ ~BandwidthRequestHeader()\l+ SetHt()\l+ SetEc()\l+ SetType()\l+ SetBr()\l+ SetCid()\l+ SetHcs()\l+ GetHt()\l+ GetEc()\land 11 more...\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d06/classns3_1_1BandwidthRequestHeader.html"];
  Node3 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node16 [label="{ns3::CtrlBAckRequestHeader\n|- m_barAckPolicy\l- m_multiTid\l- m_compressed\l- m_tidInfo\l- m_startingSeq\l|+ CtrlBAckRequestHeader()\l+ ~CtrlBAckRequestHeader()\l+ GetInstanceTypeId()\l+ Print()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ SetHtImmediateAck()\l+ SetType()\l+ SetTidInfo()\land 8 more...\l+ GetTypeId()\l- SetStartingSequenceControl()\l- GetBarControl()\l- SetBarControl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/dda/classns3_1_1CtrlBAckRequestHeader.html",tooltip="Headers for Block ack request. "];
  Node3 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node17 [label="{ns3::CtrlBAckResponseHeader\n|+ m_bitmap\l+ m_compressedBitmap\l- m_baAckPolicy\l- m_multiTid\l- m_compressed\l- m_tidInfo\l- m_startingSeq\l- bitmap\l|+ CtrlBAckResponseHeader()\l+ ~CtrlBAckResponseHeader()\l+ GetInstanceTypeId()\l+ Print()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ SetHtImmediateAck()\l+ SetType()\l+ SetTidInfo()\land 16 more...\l+ GetTypeId()\l- GetBaControl()\l- SetBaControl()\l- SerializeBitmap()\l- DeserializeBitmap()\l- IndexInBitmap()\l- IsInBitmap()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/da2/classns3_1_1CtrlBAckResponseHeader.html",tooltip="Headers for Block ack response. "];
  Node3 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node18 [label="{ns3::Dcd\n|- m_reserved\l- m_configurationChangeCount\l- m_channelEncodings\l- m_dlBurstProfiles\l- m_nrDlBurstProfiles\l|+ Dcd()\l+ ~Dcd()\l+ SetConfigurationChangeCount()\l+ SetChannelEncodings()\l+ AddDlBurstProfile()\l+ SetNrDlBurstProfiles()\l+ GetConfigurationChangeCount()\l+ GetChannelEncodings()\l+ GetDlBurstProfiles()\l+ GetNrDlBurstProfiles()\land 6 more...\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/dcc/classns3_1_1Dcd.html"];
  Node3 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node19 [label="{ns3::DlMap\n|- m_dcdCount\l- m_baseStationId\l- m_dlMapElements\l|+ DlMap()\l+ ~DlMap()\l+ SetDcdCount()\l+ SetBaseStationId()\l+ AddDlMapElement()\l+ GetDcdCount()\l+ GetBaseStationId()\l+ GetDlMapElements()\l+ GetName()\l+ GetInstanceTypeId()\l+ Print()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d59/classns3_1_1DlMap.html"];
  Node3 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node20 [label="{ns3::dot11s::MeshHeader\n|- m_meshFlags\l- m_meshTtl\l- m_meshSeqno\l- m_addr4\l- m_addr5\l- m_addr6\l|+ MeshHeader()\l+ ~MeshHeader()\l+ GetInstanceTypeId()\l+ Print()\l+ SetAddr4()\l+ SetAddr5()\l+ SetAddr6()\l+ GetAddr4()\l+ GetAddr5()\l+ GetAddr6()\land 9 more...\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/de1/classns3_1_1dot11s_1_1MeshHeader.html",tooltip="Mesh Control field, see Section 8.2.4.7.3 IEEE 802.11-2012. "];
  Node3 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node21 [label="{ns3::dot11s::PeerLinkClose\lStart\n|- m_meshId\l|+ PeerLinkCloseStart()\l+ SetPlinkCloseStart()\l+ GetFields()\l+ GetInstanceTypeId()\l+ Print()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ GetTypeId()\l- operator=()\l- PeerLinkCloseStart()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d01/classns3_1_1dot11s_1_1PeerLinkCloseStart.html",tooltip="802.11s Peer link close management frame "];
  Node3 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node22 [label="{ns3::dot11s::PeerLinkConfirm\lStart\n|- m_capability\l- m_aid\l- m_rates\l- m_config\l|+ PeerLinkConfirmStart()\l+ SetPlinkConfirmStart()\l+ GetFields()\l+ GetInstanceTypeId()\l+ Print()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ GetTypeId()\l- operator=()\l- PeerLinkConfirmStart()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/d02/classns3_1_1dot11s_1_1PeerLinkConfirmStart.html",tooltip="802.11s Peer link confirm management frame "];
  Node3 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node23 [label="{ns3::dot11s::PeerLinkOpen\lStart\n|- m_capability\l- m_rates\l- m_meshId\l- m_config\l|+ PeerLinkOpenStart()\l+ SetPlinkOpenStart()\l+ GetFields()\l+ GetInstanceTypeId()\l+ Print()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ GetTypeId()\l- operator=()\l- PeerLinkOpenStart()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/d35/classns3_1_1dot11s_1_1PeerLinkOpenStart.html",tooltip="802.11s Peer link open management frame "];
  Node3 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node24 [label="{ns3::DsaAck\n|- m_transactionId\l- m_confirmationCode\l|+ DsaAck()\l+ ~DsaAck()\l+ SetTransactionId()\l+ GetTransactionId()\l+ SetConfirmationCode()\l+ GetConfirmationCode()\l+ GetName()\l+ GetInstanceTypeId()\l+ Print()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d0/da6/classns3_1_1DsaAck.html"];
  Node3 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node25 [label="{ns3::DsaReq\n|- m_transactionId\l- m_sfid\l- m_cid\l- m_serviceFlow\l|+ DsaReq()\l+ ~DsaReq()\l+ DsaReq()\l+ SetTransactionId()\l+ SetSfid()\l+ SetCid()\l+ SetServiceFlow()\l+ GetServiceFlow()\l+ GetTransactionId()\l+ GetSfid()\land 7 more...\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/ddb/classns3_1_1DsaReq.html"];
  Node3 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node26 [label="{ns3::DsaRsp\n|- m_transactionId\l- m_confirmationCode\l- m_serviceFlow\l- m_sfid\l- m_cid\l|+ DsaRsp()\l+ ~DsaRsp()\l+ SetTransactionId()\l+ GetTransactionId()\l+ SetConfirmationCode()\l+ GetConfirmationCode()\l+ SetSfid()\l+ GetSfid()\l+ SetCid()\l+ GetCid()\land 8 more...\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d0/d5d/classns3_1_1DsaRsp.html"];
  Node3 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node27 [label="{ns3::dsdv::DsdvHeader\n|- m_dst\l- m_hopCount\l- m_dstSeqNo\l|+ DsdvHeader()\l+ ~DsdvHeader()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ SetDst()\l+ GetDst()\l+ SetHopCount()\l+ GetHopCount()\l+ SetDstSeqno()\l+ GetDstSeqno()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d0/db8/classns3_1_1dsdv_1_1DsdvHeader.html",tooltip="DSDV Update Packet Format. "];
  Node3 -> Node28 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node28 [label="{ns3::dsr::DsrFsHeader\n|- m_nextHeader\l- m_messageType\l- m_payloadLen\l- m_sourceId\l- m_destId\l- m_data\l|+ GetInstanceTypeId()\l+ DsrFsHeader()\l+ ~DsrFsHeader()\l+ SetNextHeader()\l+ GetNextHeader()\l+ SetMessageType()\l+ GetMessageType()\l+ SetSourceId()\l+ GetSourceId()\l+ SetDestId()\land 7 more...\l+ GetTypeId()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$dc/dc2/classns3_1_1dsr_1_1DsrFsHeader.html",tooltip="Dsr fixed size header Format. "];
  Node3 -> Node29 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node29 [label="{ns3::dsr::DsrOptionHeader\n|- m_type\l- m_length\l- m_data\l|+ GetInstanceTypeId()\l+ DsrOptionHeader()\l+ ~DsrOptionHeader()\l+ SetType()\l+ GetType()\l+ SetLength()\l+ GetLength()\l+ Print()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ GetAlignment()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$da/d3b/classns3_1_1dsr_1_1DsrOptionHeader.html",tooltip="Header for Dsr Options. "];
  Node3 -> Node30 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node30 [label="{ns3::EpcS1APErabReleaseIndication\lHeader\n|- m_numberOfIes\l- m_headerLength\l- m_enbUeS1Id\l- m_mmeUeS1Id\l- m_erabToBeReleaseIndication\l|+ EpcS1APErabReleaseIndication\lHeader()\l+ ~EpcS1APErabReleaseIndication\lHeader()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetMmeUeS1Id()\l+ SetMmeUeS1Id()\l+ GetEnbUeS1Id()\l+ SetEnbUeS1Id()\l+ GetErabToBeReleaseIndication()\l+ SetErabReleaseIndication()\l+ GetLengthOfIes()\l+ GetNumberOfIes()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/dd0/classns3_1_1EpcS1APErabReleaseIndicationHeader.html"];
  Node3 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node31 [label="{ns3::EpcS1APHeader\n|- m_procedureCode\l- m_lengthOfIes\l- m_numberOfIes\l|+ EpcS1APHeader()\l+ ~EpcS1APHeader()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetProcedureCode()\l+ SetProcedureCode()\l+ SetLengthOfIes()\l+ SetNumberOfIes()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/d13/classns3_1_1EpcS1APHeader.html"];
  Node3 -> Node32 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node32 [label="{ns3::EpcS1APInitialContext\lSetupRequestHeader\n|- m_numberOfIes\l- m_headerLength\l- m_enbUeS1Id\l- m_mmeUeS1Id\l- m_erabsToBeSetupList\l|+ EpcS1APInitialContextSetup\lRequestHeader()\l+ ~EpcS1APInitialContextSetup\lRequestHeader()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetMmeUeS1Id()\l+ SetMmeUeS1Id()\l+ GetEnbUeS1Id()\l+ SetEnbUeS1Id()\l+ GetErabToBeSetupItem()\l+ SetErabToBeSetupItem()\l+ GetLengthOfIes()\l+ GetNumberOfIes()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/d31/classns3_1_1EpcS1APInitialContextSetupRequestHeader.html"];
  Node3 -> Node33 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node33 [label="{ns3::EpcS1APInitialContext\lSetupResponseHeader\n|- m_numberOfIes\l- m_headerLength\l- m_enbUeS1Id\l- m_mmeUeS1Id\l- m_erabSetupList\l|+ EpcS1APInitialContextSetup\lResponseHeader()\l+ ~EpcS1APInitialContextSetup\lResponseHeader()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetMmeUeS1Id()\l+ SetMmeUeS1Id()\l+ GetEnbUeS1Id()\l+ SetEnbUeS1Id()\l+ GetErabSetupItem()\l+ SetErabSetupItem()\l+ GetLengthOfIes()\l+ GetNumberOfIes()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d0/de4/classns3_1_1EpcS1APInitialContextSetupResponseHeader.html"];
  Node3 -> Node34 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node34 [label="{ns3::EpcS1APInitialUeMessage\lHeader\n|- m_numberOfIes\l- m_headerLength\l- m_stmsi\l- m_mmeUeS1Id\l- m_enbUeS1Id\l- m_ecgi\l|+ EpcS1APInitialUeMessageHeader()\l+ ~EpcS1APInitialUeMessage\lHeader()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetMmeUeS1Id()\l+ SetMmeUeS1Id()\l+ GetEnbUeS1Id()\land 7 more...\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/d99/classns3_1_1EpcS1APInitialUeMessageHeader.html"];
  Node3 -> Node35 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node35 [label="{ns3::EpcS1APPathSwitchRequest\lAcknowledgeHeader\n|- m_numberOfIes\l- m_headerLength\l- m_enbUeS1Id\l- m_ecgi\l- m_mmeUeS1Id\l- m_erabToBeSwitchedInUplinkList\l|+ EpcS1APPathSwitchRequest\lAcknowledgeHeader()\l+ ~EpcS1APPathSwitchRequest\lAcknowledgeHeader()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetMmeUeS1Id()\l+ SetMmeUeS1Id()\l+ GetEnbUeS1Id()\land 7 more...\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d0/d37/classns3_1_1EpcS1APPathSwitchRequestAcknowledgeHeader.html"];
  Node3 -> Node36 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node36 [label="{ns3::EpcS1APPathSwitchRequest\lHeader\n|- m_numberOfIes\l- m_headerLength\l- m_enbUeS1Id\l- m_ecgi\l- m_mmeUeS1Id\l- m_erabToBeSwitchedInDownlinkList\l|+ EpcS1APPathSwitchRequest\lHeader()\l+ ~EpcS1APPathSwitchRequest\lHeader()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetMmeUeS1Id()\l+ SetMmeUeS1Id()\l+ GetEnbUeS1Id()\land 7 more...\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/dc9/classns3_1_1EpcS1APPathSwitchRequestHeader.html"];
  Node3 -> Node37 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node37 [label="{ns3::EpcX2AssistantInfoHeader\n|- TxonQueueSize\l- TxedQueueSize\l- RetxQueueSize\l- TxQueingDelay\l- ReTxQueingDelay\l- sourceCellId\l- drbId\l- rnti\l- headerLength\l|+ GetInstanceTypeId()\l+ EpcX2AssistantInfoHeader()\l+ ~EpcX2AssistantInfoHeader()\l+ Print()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ GetTxonQueue()\l+ SetTxonQueue()\l+ GetTxedQueue()\land 14 more...\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/da7/classns3_1_1EpcX2AssistantInfoHeader.html"];
  Node3 -> Node38 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node38 [label="{ns3::EpcX2ConnectionSwitch\lHeader\n|- m_numberOfIes\l- m_headerLength\l- m_mmWaveRnti\l- m_drbid\l- m_useMmWaveConnection\l|+ EpcX2ConnectionSwitchHeader()\l+ ~EpcX2ConnectionSwitchHeader()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetMmWaveRnti()\l+ SetMmWaveRnti()\l+ GetUseMmWaveConnection()\l+ SetUseMmWaveConnection()\l+ GetDrbid()\l+ SetDrbid()\l+ GetLengthOfIes()\l+ GetNumberOfIes()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/df6/classns3_1_1EpcX2ConnectionSwitchHeader.html"];
  Node3 -> Node39 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node39 [label="{ns3::EpcX2HandoverPreparation\lFailureHeader\n|- m_numberOfIes\l- m_headerLength\l- m_oldEnbUeX2apId\l- m_cause\l- m_criticalityDiagnostics\l|+ EpcX2HandoverPreparation\lFailureHeader()\l+ ~EpcX2HandoverPreparation\lFailureHeader()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetOldEnbUeX2apId()\l+ SetOldEnbUeX2apId()\l+ GetCause()\l+ SetCause()\l+ GetCriticalityDiagnostics()\l+ SetCriticalityDiagnostics()\l+ GetLengthOfIes()\l+ GetNumberOfIes()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d16/classns3_1_1EpcX2HandoverPreparationFailureHeader.html"];
  Node3 -> Node40 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node40 [label="{ns3::EpcX2HandoverRequest\lAckHeader\n|- m_numberOfIes\l- m_headerLength\l- m_oldEnbUeX2apId\l- m_newEnbUeX2apId\l- m_erabsAdmittedList\l- m_erabsNotAdmittedList\l|+ EpcX2HandoverRequestAckHeader()\l+ ~EpcX2HandoverRequestAck\lHeader()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetOldEnbUeX2apId()\l+ SetOldEnbUeX2apId()\l+ GetNewEnbUeX2apId()\land 7 more...\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/d92/classns3_1_1EpcX2HandoverRequestAckHeader.html"];
  Node3 -> Node41 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node41 [label="{ns3::EpcX2HandoverRequest\lHeader\n|- m_numberOfIes\l- m_headerLength\l- m_oldEnbUeX2apId\l- m_cause\l- m_targetCellId\l- m_mmeUeS1apId\l- m_ueAggregateMaxBitRateDownlink\l- m_ueAggregateMaxBitRateUplink\l- m_erabsToBeSetupList\l- m_rlcRequestsList\l- m_isMc\l|+ EpcX2HandoverRequestHeader()\l+ ~EpcX2HandoverRequestHeader()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetOldEnbUeX2apId()\l+ SetOldEnbUeX2apId()\l+ GetCause()\land 17 more...\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/db8/classns3_1_1EpcX2HandoverRequestHeader.html"];
  Node3 -> Node42 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node42 [label="{ns3::EpcX2Header\n|- m_messageType\l- m_procedureCode\l- m_lengthOfIes\l- m_numberOfIes\l|+ EpcX2Header()\l+ ~EpcX2Header()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetMessageType()\l+ SetMessageType()\l+ GetProcedureCode()\l+ SetProcedureCode()\l+ SetLengthOfIes()\l+ SetNumberOfIes()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/d09/classns3_1_1EpcX2Header.html"];
  Node3 -> Node43 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node43 [label="{ns3::EpcX2LoadInformation\lHeader\n|- m_numberOfIes\l- m_headerLength\l- m_cellInformationList\l|+ EpcX2LoadInformationHeader()\l+ ~EpcX2LoadInformationHeader()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetCellInformationList()\l+ SetCellInformationList()\l+ GetLengthOfIes()\l+ GetNumberOfIes()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d66/classns3_1_1EpcX2LoadInformationHeader.html"];
  Node3 -> Node44 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node44 [label="{ns3::EpcX2McHandoverHeader\n|- m_numberOfIes\l- m_headerLength\l- m_targetCellId\l- m_oldCellId\l- m_imsi\l|+ EpcX2McHandoverHeader()\l+ ~EpcX2McHandoverHeader()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTargetCellId()\l+ SetTargetCellId()\l+ GetOldCellId()\l+ SetOldCellId()\l+ GetImsi()\l+ SetImsi()\l+ GetLengthOfIes()\l+ GetNumberOfIes()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/dc6/classns3_1_1EpcX2McHandoverHeader.html"];
  Node3 -> Node45 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node45 [label="{ns3::EpcX2NotifyCoordinator\lHandoverFailedHeader\n|- m_numberOfIes\l- m_headerLength\l- m_targetCellId\l- m_sourceCellId\l- m_imsi\l|+ EpcX2NotifyCoordinatorHandover\lFailedHeader()\l+ ~EpcX2NotifyCoordinatorHandover\lFailedHeader()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTargetCellId()\l+ SetTargetCellId()\l+ GetSourceCellId()\l+ SetSourceCellId()\l+ GetImsi()\l+ SetImsi()\l+ GetLengthOfIes()\l+ GetNumberOfIes()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/d4f/classns3_1_1EpcX2NotifyCoordinatorHandoverFailedHeader.html"];
  Node3 -> Node46 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node46 [label="{ns3::EpcX2ResourceStatus\lUpdateHeader\n|- m_numberOfIes\l- m_headerLength\l- m_enb1MeasurementId\l- m_enb2MeasurementId\l- m_cellMeasurementResultList\l|+ EpcX2ResourceStatusUpdate\lHeader()\l+ ~EpcX2ResourceStatusUpdate\lHeader()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetEnb1MeasurementId()\l+ SetEnb1MeasurementId()\l+ GetEnb2MeasurementId()\l+ SetEnb2MeasurementId()\l+ GetCellMeasurementResultList()\l+ SetCellMeasurementResultList()\l+ GetLengthOfIes()\l+ GetNumberOfIes()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/d28/classns3_1_1EpcX2ResourceStatusUpdateHeader.html"];
  Node3 -> Node47 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node47 [label="{ns3::EpcX2RlcSetupCompleted\lHeader\n|- m_numberOfIes\l- m_headerLength\l- m_sourceCellId\l- m_targetCellId\l- m_gtpTeid\l|+ EpcX2RlcSetupCompletedHeader()\l+ ~EpcX2RlcSetupCompletedHeader()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetSourceCellId()\l+ SetSourceCellId()\l+ GetTargetCellId()\l+ SetTargetCellId()\l+ GetGtpTeid()\l+ SetGtpTeid()\l+ GetLengthOfIes()\l+ GetNumberOfIes()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d9e/classns3_1_1EpcX2RlcSetupCompletedHeader.html"];
  Node3 -> Node48 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node48 [label="{ns3::EpcX2RlcSetupRequest\lHeader\n|- m_numberOfIes\l- m_headerLength\l- m_sourceCellId\l- m_targetCellId\l- m_gtpTeid\l- m_mmWaveRnti\l- m_lteRnti\l- m_drbid\l- m_lcInfo\l- m_rlcConfig\l- m_lcConfig\l|+ EpcX2RlcSetupRequestHeader()\l+ ~EpcX2RlcSetupRequestHeader()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetSourceCellId()\l+ SetSourceCellId()\l+ GetTargetCellId()\land 17 more...\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d69/classns3_1_1EpcX2RlcSetupRequestHeader.html"];
  Node3 -> Node49 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node49 [label="{ns3::EpcX2SecondaryCellHandover\lCompletedHeader\n|- m_numberOfIes\l- m_headerLength\l- m_mmWaveRnti\l- m_oldEnbUeX2apId\l- m_imsi\l|+ EpcX2SecondaryCellHandover\lCompletedHeader()\l+ ~EpcX2SecondaryCellHandover\lCompletedHeader()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetMmWaveRnti()\l+ SetMmWaveRnti()\l+ GetOldEnbUeX2apId()\l+ SetOldEnbUeX2apId()\l+ GetImsi()\l+ SetImsi()\l+ GetLengthOfIes()\l+ GetNumberOfIes()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dc/d75/classns3_1_1EpcX2SecondaryCellHandoverCompletedHeader.html"];
  Node3 -> Node50 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node50 [label="{ns3::EpcX2SnStatusTransfer\lHeader\n|- m_numberOfIes\l- m_headerLength\l- m_oldEnbUeX2apId\l- m_newEnbUeX2apId\l- m_erabsSubjectToStatusTransferList\l|+ EpcX2SnStatusTransferHeader()\l+ ~EpcX2SnStatusTransferHeader()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetOldEnbUeX2apId()\l+ SetOldEnbUeX2apId()\l+ GetNewEnbUeX2apId()\l+ SetNewEnbUeX2apId()\l+ GetErabsSubjectToStatusTransferList()\l+ SetErabsSubjectToStatusTransferList()\l+ GetLengthOfIes()\l+ GetNumberOfIes()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/df6/classns3_1_1EpcX2SnStatusTransferHeader.html"];
  Node3 -> Node51 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node51 [label="{ns3::EpcX2UeContextRelease\lHeader\n|- m_numberOfIes\l- m_headerLength\l- m_oldEnbUeX2apId\l- m_newEnbUeX2apId\l|+ EpcX2UeContextReleaseHeader()\l+ ~EpcX2UeContextReleaseHeader()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetOldEnbUeX2apId()\l+ SetOldEnbUeX2apId()\l+ GetNewEnbUeX2apId()\l+ SetNewEnbUeX2apId()\l+ GetLengthOfIes()\l+ GetNumberOfIes()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d91/classns3_1_1EpcX2UeContextReleaseHeader.html"];
  Node2 -> Node52 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node52 [label="{ns3::Trailer\n||+ ~Trailer()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$de/db6/classns3_1_1Trailer.html",tooltip="Protocol trailer serialization and deserialization. "];
  Node1 -> Node53 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node53 [label="{ns3::ConfigStore\n|- m_mode\l- m_fileFormat\l- m_filename\l- m_file\l|+ GetInstanceTypeId()\l+ ConfigStore()\l+ ~ConfigStore()\l+ SetMode()\l+ SetFileFormat()\l+ SetFilename()\l+ ConfigureDefaults()\l+ ConfigureAttributes()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/d51/classns3_1_1ConfigStore.html"];
  Node1 -> Node54 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node54 [label="{ns3::Tag\n||+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d0/d79/classns3_1_1Tag.html",tooltip="tag a set of bytes in a packet "];
  Node54 -> Node55 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node55 [label="{IPv4TestTag\n|- token\l|+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ SetToken()\l+ GetToken()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/da0/classIPv4TestTag.html",tooltip="Tag used in IPv4 Fragmentation Test. "];
  Node54 -> Node56 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node56 [label="{IPv6TestTag\n|- token\l|+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ SetToken()\l+ GetToken()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/d63/classIPv6TestTag.html",tooltip="Tag used in IPv6 Fragmentation Test. "];
  Node54 -> Node57 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node57 [label="{MyAppTag\n|+ m_sendTs\l|+ MyAppTag()\l+ MyAppTag()\l+ GetInstanceTypeId()\l+ Serialize()\l+ Deserialize()\l+ GetSerializedSize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d22/classMyAppTag.html"];
  Node54 -> Node58 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node58 [label="{MyTag\n|- m_simpleValue\l|+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ SetSimpleValue()\l+ GetSimpleValue()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d46/classMyTag.html"];
  Node54 -> Node59 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node59 [label="{ns3::AmpduTag\n|- m_ampdu\l- m_nbOfMpdus\l- m_duration\l|+ GetInstanceTypeId()\l+ AmpduTag()\l+ SetAmpdu()\l+ SetRemainingNbOfMpdus()\l+ SetRemainingAmpduDuration()\l+ Serialize()\l+ Deserialize()\l+ GetSerializedSize()\l+ Print()\l+ GetAmpdu()\l+ GetRemainingNbOfMpdus()\l+ GetRemainingAmpduDuration()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/d26/classns3_1_1AmpduTag.html"];
  Node54 -> Node60 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node60 [label="{ns3::AnimByteTag\n|- m_AnimUid\l|+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ Set()\l+ Get()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/d1b/classns3_1_1AnimByteTag.html",tooltip="Byte tag using by Anim to uniquely identify packets. "];
  Node54 -> Node61 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node61 [label="{ns3::aodv::DeferredRoute\lOutputTag\n|- m_oif\l|+ DeferredRouteOutputTag()\l+ GetInstanceTypeId()\l+ GetInterface()\l+ SetInterface()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/d0f/classns3_1_1aodv_1_1DeferredRouteOutputTag.html",tooltip="Tag used by AODV implementation. "];
  Node54 -> Node62 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node62 [label="{ns3::CoDelTimestampTag\n|- m_creationTime\l|+ CoDelTimestampTag()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTxTime()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/d3a/classns3_1_1CoDelTimestampTag.html"];
  Node54 -> Node63 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node63 [label="{ns3::DelayJitterEstimation\lTimestampTag\n|- m_creationTime\l|+ DelayJitterEstimationTimestampTag()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTxTime()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/d6e/classns3_1_1DelayJitterEstimationTimestampTag.html"];
  Node54 -> Node64 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node64 [label="{ns3::DeviceNameTag\n|- m_deviceName\l|+ DeviceNameTag()\l+ SetDeviceName()\l+ GetDeviceName()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/db6/classns3_1_1DeviceNameTag.html",tooltip="This class implements a tag that carries the ns3 device name from where a packet is coming..."];
  Node54 -> Node65 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node65 [label="{ns3::dot11s::HwmpTag\n|- m_address\l- m_ttl\l- m_metric\l- m_seqno\l|+ HwmpTag()\l+ ~HwmpTag()\l+ SetAddress()\l+ GetAddress()\l+ SetTtl()\l+ GetTtl()\l+ SetMetric()\l+ GetMetric()\l+ SetSeqno()\l+ GetSeqno()\land 6 more...\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/d53/classns3_1_1dot11s_1_1HwmpTag.html",tooltip="Hwmp tag implements interaction between HWMP protocol and MeshWifiMac. "];
  Node54 -> Node66 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node66 [label="{ns3::dsdv::DeferredRoute\lOutputTag\n|+ oif\l|+ DeferredRouteOutputTag()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/d5d/structns3_1_1dsdv_1_1DeferredRouteOutputTag.html",tooltip="Tag used by DSDV implementation. "];
  Node54 -> Node67 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node67 [label="{ns3::EpcX2Tag\n|- m_senderTimestamp\l|+ GetInstanceTypeId()\l+ EpcX2Tag()\l+ EpcX2Tag()\l+ Serialize()\l+ Deserialize()\l+ GetSerializedSize()\l+ Print()\l+ GetSenderTimestamp()\l+ SetSenderTimestamp()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/d2e/classns3_1_1EpcX2Tag.html"];
  Node54 -> Node68 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node68 [label="{ns3::EpsBearerTag\n|- m_rnti\l- m_bid\l|+ GetInstanceTypeId()\l+ EpsBearerTag()\l+ EpsBearerTag()\l+ SetRnti()\l+ SetBid()\l+ Serialize()\l+ Deserialize()\l+ GetSerializedSize()\l+ Print()\l+ GetRnti()\l+ GetBid()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/d49/classns3_1_1EpsBearerTag.html"];
  Node54 -> Node69 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node69 [label="{ns3::flame::FlameTag\n|+ transmitter\l+ receiver\l|+ FlameTag()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d96/classns3_1_1flame_1_1FlameTag.html",tooltip="Transmitter and receiver addresses. "];
  Node54 -> Node70 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node70 [label="{ns3::FlowIdTag\n|- m_flowId\l|+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ FlowIdTag()\l+ FlowIdTag()\l+ SetFlowId()\l+ GetFlowId()\l+ GetTypeId()\l+ AllocateFlowId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/ddf/classns3_1_1FlowIdTag.html"];
  Node54 -> Node71 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node71 [label="{ns3::HigherLayerTxVectorTag\n|- m_txVector\l- m_adaptable\l|+ GetInstanceTypeId()\l+ HigherLayerTxVectorTag()\l+ HigherLayerTxVectorTag()\l+ GetTxVector()\l+ IsAdaptable()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/d3c/classns3_1_1HigherLayerTxVectorTag.html",tooltip="This tag will be used to support higher layer control DataRate and TxPwr_Level for transmission..."];
  Node54 -> Node72 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node72 [label="{ns3::HighLatencyCtsToSelf\lTxVectorTag\n|- m_ctsToSelfTxVector\l|+ HighLatencyCtsToSelfTxVectorTag()\l+ HighLatencyCtsToSelfTxVectorTag()\l+ GetCtsToSelfTxVector()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/d8f/classns3_1_1HighLatencyCtsToSelfTxVectorTag.html"];
  Node54 -> Node73 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node73 [label="{ns3::HighLatencyDataTxVectorTag\n|- m_dataTxVector\l|+ HighLatencyDataTxVectorTag()\l+ HighLatencyDataTxVectorTag()\l+ GetDataTxVector()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/dd4/classns3_1_1HighLatencyDataTxVectorTag.html"];
  Node54 -> Node74 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node74 [label="{ns3::HighLatencyRtsTxVectorTag\n|- m_rtsTxVector\l|+ HighLatencyRtsTxVectorTag()\l+ HighLatencyRtsTxVectorTag()\l+ GetRtsTxVector()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/da6/classns3_1_1HighLatencyRtsTxVectorTag.html"];
  Node54 -> Node75 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node75 [label="{ns3::Ipv4FlowProbeTag\n|- m_flowId\l- m_packetId\l- m_packetSize\l- m_src\l- m_dst\l|+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ Ipv4FlowProbeTag()\l+ Ipv4FlowProbeTag()\l+ SetFlowId()\l+ SetPacketId()\l+ SetPacketSize()\l+ GetFlowId()\l+ GetPacketId()\l+ GetPacketSize()\l+ IsSrcDstValid()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/dfc/classns3_1_1Ipv4FlowProbeTag.html",tooltip="Tag used to allow a fast identification of the packet. "];
  Node54 -> Node76 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node76 [label="{ns3::Ipv4PacketInfoTag\n|- m_addr\l- m_spec_dst\l- m_ifindex\l- m_ttl\l|+ Ipv4PacketInfoTag()\l+ SetAddress()\l+ GetAddress()\l+ SetLocalAddress()\l+ GetLocalAddress()\l+ SetRecvIf()\l+ GetRecvIf()\l+ SetTtl()\l+ GetTtl()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/dfe/classns3_1_1Ipv4PacketInfoTag.html",tooltip="This class implements Linux struct pktinfo in order to deliver ancillary information to the socket in..."];
  Node54 -> Node77 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node77 [label="{ns3::Ipv6FlowProbeTag\n|- m_flowId\l- m_packetId\l- m_packetSize\l|+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ Ipv6FlowProbeTag()\l+ Ipv6FlowProbeTag()\l+ SetFlowId()\l+ SetPacketId()\l+ SetPacketSize()\l+ GetFlowId()\l+ GetPacketId()\l+ GetPacketSize()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/d24/classns3_1_1Ipv6FlowProbeTag.html",tooltip="Tag used to allow a fast identification of the packet. "];
  Node54 -> Node78 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node78 [label="{ns3::Ipv6PacketInfoTag\n|- m_addr\l- m_ifindex\l- m_hoplimit\l- m_tclass\l|+ Ipv6PacketInfoTag()\l+ SetAddress()\l+ GetAddress()\l+ SetRecvIf()\l+ GetRecvIf()\l+ SetHoplimit()\l+ GetHoplimit()\l+ SetTrafficClass()\l+ GetTrafficClass()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/d5f/classns3_1_1Ipv6PacketInfoTag.html",tooltip="This class implements a tag that carries socket ancillary data to the socket interface. This is used like socket option of IP_PKTINFO/IPV6_PKTINFO in {3542}. "];
  Node54 -> Node79 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node79 [label="{ns3::LrWpanLqiTag\n|- m_lqi\l|+ GetInstanceTypeId()\l+ LrWpanLqiTag()\l+ LrWpanLqiTag()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ Set()\l+ Get()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$db/d60/classns3_1_1LrWpanLqiTag.html"];
  Node54 -> Node80 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node80 [label="{ns3::LtePhyTag\n|- m_cellId\l|+ GetInstanceTypeId()\l+ LtePhyTag()\l+ LtePhyTag()\l+ ~LtePhyTag()\l+ Serialize()\l+ Deserialize()\l+ GetSerializedSize()\l+ Print()\l+ GetCellId()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d19/classns3_1_1LtePhyTag.html"];
  Node54 -> Node81 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node81 [label="{ns3::LteRadioBearerTag\n|- m_rnti\l- m_lcid\l- m_layer\l|+ GetInstanceTypeId()\l+ LteRadioBearerTag()\l+ LteRadioBearerTag()\l+ LteRadioBearerTag()\l+ SetRnti()\l+ SetLcid()\l+ SetLayer()\l+ Serialize()\l+ Deserialize()\l+ GetSerializedSize()\l+ Print()\l+ GetRnti()\l+ GetLcid()\l+ GetLayer()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/d42/classns3_1_1LteRadioBearerTag.html"];
  Node54 -> Node82 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node82 [label="{ns3::LteRlcSduStatusTag\n|- m_sduStatus\l|+ LteRlcSduStatusTag()\l+ SetStatus()\l+ GetStatus()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/d4a/classns3_1_1LteRlcSduStatusTag.html",tooltip="This class implements a tag that carries the status of a RLC SDU for the fragmentation process Status..."];
  Node54 -> Node83 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node83 [label="{ns3::MmWaveMacPduTag\n|# m_sfnSf\l# m_symStart\l# m_numSym\l# m_tagSize\l|+ GetInstanceTypeId()\l+ MmWaveMacPduTag()\l+ MmWaveMacPduTag()\l+ MmWaveMacPduTag()\l+ Serialize()\l+ Deserialize()\l+ GetSerializedSize()\l+ Print()\l+ GetSfn()\l+ SetSfn()\l+ GetSymStart()\l+ GetNumSym()\l+ SetSymStart()\l+ SetNumSym()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d6/d53/classns3_1_1MmWaveMacPduTag.html"];
  Node54 -> Node84 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node84 [label="{ns3::MmWaveRadioBearerTag\n|- m_rnti\l- m_lcid\l- m_layer\l- m_size\l|+ GetInstanceTypeId()\l+ MmWaveRadioBearerTag()\l+ MmWaveRadioBearerTag()\l+ MmWaveRadioBearerTag()\l+ SetRnti()\l+ SetLcid()\l+ SetLayer()\l+ SetSize()\l+ Serialize()\l+ Deserialize()\land 6 more...\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/dbf/classns3_1_1MmWaveRadioBearerTag.html"];
  Node54 -> Node85 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node85 [label="{ns3::PacketSocketTag\n|- m_packetType\l- m_destAddr\l|+ PacketSocketTag()\l+ SetPacketType()\l+ GetPacketType()\l+ SetDestAddress()\l+ GetDestAddress()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/de4/classns3_1_1PacketSocketTag.html",tooltip="This class implements a tag that carries the dest address of a packet and the packet type..."];
  Node54 -> Node86 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node86 [label="{ns3::PdcpTag\n|- m_senderTimestamp\l|+ GetInstanceTypeId()\l+ PdcpTag()\l+ PdcpTag()\l+ Serialize()\l+ Deserialize()\l+ GetSerializedSize()\l+ Print()\l+ GetSenderTimestamp()\l+ SetSenderTimestamp()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/d0f/classns3_1_1PdcpTag.html"];
  Node54 -> Node87 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node87 [label="{ns3::PyVizPacketTag\n|+ m_packetId\l|+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ PyVizPacketTag()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/d8e/structns3_1_1PyVizPacketTag.html"];
  Node54 -> Node88 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node88 [label="{ns3::RlcTag\n|- m_senderTimestamp\l|+ GetInstanceTypeId()\l+ RlcTag()\l+ RlcTag()\l+ Serialize()\l+ Deserialize()\l+ GetSerializedSize()\l+ Print()\l+ GetSenderTimestamp()\l+ SetSenderTimestamp()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/d79/classns3_1_1RlcTag.html"];
  Node54 -> Node89 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node89 [label="{ns3::SimpleTag\n|- m_src\l- m_dst\l- m_protocolNumber\l|+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ SetSrc()\l+ GetSrc()\l+ SetDst()\l+ GetDst()\l+ SetProto()\l+ GetProto()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/d8a/classns3_1_1SimpleTag.html",tooltip="SimpleNetDevice tag to store source, destination and protocol of each packet. "];
  Node54 -> Node90 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node90 [label="{ns3::SnrTag\n|- m_snr\l|+ GetInstanceTypeId()\l+ SnrTag()\l+ SnrTag()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ Set()\l+ Get()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/d10/classns3_1_1SnrTag.html"];
  Node54 -> Node91 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node91 [label="{ns3::SocketIpTosTag\n|- m_ipTos\l|+ SocketIpTosTag()\l+ SetTos()\l+ GetTos()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$dd/dfb/classns3_1_1SocketIpTosTag.html",tooltip="indicates whether the socket has IP_TOS set. This tag is for IPv4 socket. "];
  Node54 -> Node92 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node92 [label="{ns3::SocketIpTtlTag\n|- m_ttl\l|+ SocketIpTtlTag()\l+ SetTtl()\l+ GetTtl()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/db8/classns3_1_1SocketIpTtlTag.html",tooltip="This class implements a tag that carries the socket-specific TTL of a packet to the IP layer..."];
  Node54 -> Node93 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node93 [label="{ns3::SocketIpv6HopLimitTag\n|- m_hopLimit\l|+ SocketIpv6HopLimitTag()\l+ SetHopLimit()\l+ GetHopLimit()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/d48/classns3_1_1SocketIpv6HopLimitTag.html",tooltip="This class implements a tag that carries the socket-specific HOPLIMIT of a packet to the IPv6 layer..."];
  Node54 -> Node94 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node94 [label="{ns3::SocketIpv6TclassTag\n|- m_ipv6Tclass\l|+ SocketIpv6TclassTag()\l+ SetTclass()\l+ GetTclass()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d0/dbf/classns3_1_1SocketIpv6TclassTag.html",tooltip="indicates whether the socket has IPV6_TCLASS set. This tag is for IPv6 socket. "];
  Node54 -> Node95 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node95 [label="{ns3::SocketPriorityTag\n|- m_priority\l|+ SocketPriorityTag()\l+ SetPriority()\l+ GetPriority()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/d3d/classns3_1_1SocketPriorityTag.html",tooltip="indicates whether the socket has a priority set. "];
  Node54 -> Node96 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node96 [label="{ns3::SocketSetDontFragmentTag\n|- m_dontFragment\l|+ SocketSetDontFragmentTag()\l+ Enable()\l+ Disable()\l+ IsEnabled()\l+ GetInstanceTypeId()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/dc5/classns3_1_1SocketSetDontFragmentTag.html",tooltip="indicates whether packets should be sent out with the DF (Don&#39;t Fragment) flag set. "];
  Node54 -> Node97 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node97 [label="{ns3::WifiPhyTag\n|- m_wifiTxVector\l- m_mpduType\l|+ GetInstanceTypeId()\l+ WifiPhyTag()\l+ WifiPhyTag()\l+ GetWifiTxVector()\l+ GetMpduType()\l+ GetSerializedSize()\l+ Serialize()\l+ Deserialize()\l+ Print()\l+ GetTypeId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/d6f/classns3_1_1WifiPhyTag.html"];
  Node1 -> Node98 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node98 [label="{ns3::SimpleRefCount\l\< Object, ObjectBase,\l ObjectDeleter \>\n|- m_count\l|+ SimpleRefCount()\l+ SimpleRefCount()\l+ operator=()\l+ Ref()\l+ Unref()\l+ GetReferenceCount()\l+ Cleanup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/da1/classns3_1_1SimpleRefCount.html"];
  Node98 -> Node99 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node99 [label="{ns3::Object\n|- m_tid\l- m_disposed\l- m_initialized\l- m_aggregates\l- m_getObjectCount\l|+ Object()\l+ ~Object()\l+ GetInstanceTypeId()\l+ GetObject()\l+ GetObject()\l+ Dispose()\l+ AggregateObject()\l+ GetAggregateIterator()\l+ Initialize()\l+ IsInitialized()\l+ GetTypeId()\l# NotifyNewAggregate()\l# DoInitialize()\l# DoDispose()\l# Object()\l- DoGetObject()\l- Check()\l- CheckLoose()\l- SetTypeId()\l- Construct()\l- UpdateSortedArray()\l- DoDelete()\l* CopyObject\l* CopyObject\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$d9/d77/classns3_1_1Object.html",tooltip="A base class which provides memory management and object aggregation. "];
}
